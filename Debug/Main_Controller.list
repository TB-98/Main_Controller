
Main_Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000105bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004500  08010770  08010770  00020770  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c70  08014c70  00030238  2**0
                  CONTENTS
  4 .ARM          00000008  08014c70  08014c70  00024c70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c78  08014c78  00030238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c78  08014c78  00024c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c7c  08014c7c  00024c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  08014c80  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030238  2**0
                  CONTENTS
 10 .bss          00000930  20000238  20000238  00030238  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000b68  20000b68  00030238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022323  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004180  00000000  00000000  0005258b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a40  00000000  00000000  00056710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000018b0  00000000  00000000  00058150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029da0  00000000  00000000  00059a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002053d  00000000  00000000  000837a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f4730  00000000  00000000  000a3cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0019840d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008568  00000000  00000000  00198460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000238 	.word	0x20000238
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08010754 	.word	0x08010754

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000023c 	.word	0x2000023c
 80001ec:	08010754 	.word	0x08010754

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <at24_isConnected>:
  * @brief  Checks if memory device is ready for communication.
  * @param  none
  * @retval bool status
  */
bool at24_isConnected(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_1,SET);
 8001010:	2201      	movs	r2, #1
 8001012:	2102      	movs	r1, #2
 8001014:	4808      	ldr	r0, [pc, #32]	; (8001038 <at24_isConnected+0x2c>)
 8001016:	f004 fd25 	bl	8005a64 <HAL_GPIO_WritePin>
  #endif
  if (HAL_I2C_IsDeviceReady(&_EEPROM_I2C, _EEPROM_ADDRESS, 2, 100) == HAL_OK)
 800101a:	2364      	movs	r3, #100	; 0x64
 800101c:	2202      	movs	r2, #2
 800101e:	21a0      	movs	r1, #160	; 0xa0
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <at24_isConnected+0x30>)
 8001022:	f005 f9cf 	bl	80063c4 <HAL_I2C_IsDeviceReady>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d101      	bne.n	8001030 <at24_isConnected+0x24>
    return true;
 800102c:	2301      	movs	r3, #1
 800102e:	e000      	b.n	8001032 <at24_isConnected+0x26>
  else
    return false;	
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021800 	.word	0x40021800
 800103c:	200003ac 	.word	0x200003ac

08001040 <at24_write>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
bool at24_write(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af04      	add	r7, sp, #16
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	4603      	mov	r3, r0
 800104e:	81fb      	strh	r3, [r7, #14]
  if (at24_lock == 1)
 8001050:	4b31      	ldr	r3, [pc, #196]	; (8001118 <at24_write+0xd8>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	2b01      	cmp	r3, #1
 8001056:	d101      	bne.n	800105c <at24_write+0x1c>
    return false;
 8001058:	2300      	movs	r3, #0
 800105a:	e058      	b.n	800110e <at24_write+0xce>
	
  at24_lock = 1; 
 800105c:	4b2e      	ldr	r3, [pc, #184]	; (8001118 <at24_write+0xd8>)
 800105e:	2201      	movs	r2, #1
 8001060:	701a      	strb	r2, [r3, #0]
  uint16_t w;
  uint32_t startTime = HAL_GetTick();
 8001062:	f003 fc57 	bl	8004914 <HAL_GetTick>
 8001066:	6138      	str	r0, [r7, #16]
	
  #if	(_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1,GPIO_PIN_RESET);
 8001068:	2200      	movs	r2, #0
 800106a:	2102      	movs	r1, #2
 800106c:	482b      	ldr	r0, [pc, #172]	; (800111c <at24_write+0xdc>)
 800106e:	f004 fcf9 	bl	8005a64 <HAL_GPIO_WritePin>

  #endif
	
  while (1)
  {
    w = _EEPROM_PSIZE - (address  % _EEPROM_PSIZE);
 8001072:	89fb      	ldrh	r3, [r7, #14]
 8001074:	f003 031f 	and.w	r3, r3, #31
 8001078:	b29b      	uxth	r3, r3
 800107a:	f1c3 0320 	rsb	r3, r3, #32
 800107e:	82fb      	strh	r3, [r7, #22]
    if (w > len)
 8001080:	8afb      	ldrh	r3, [r7, #22]
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	d201      	bcs.n	800108c <at24_write+0x4c>
      w = len;        
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	82fb      	strh	r3, [r7, #22]
    #elif (_EEPROM_SIZE_KBIT==8)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)
    #elif (_EEPROM_SIZE_KBIT==16)
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, w, 100) == HAL_OK)		
    #else
    if (HAL_I2C_Mem_Write(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, w, 100) == HAL_OK)
 800108c:	89fa      	ldrh	r2, [r7, #14]
 800108e:	2364      	movs	r3, #100	; 0x64
 8001090:	9302      	str	r3, [sp, #8]
 8001092:	8afb      	ldrh	r3, [r7, #22]
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2310      	movs	r3, #16
 800109c:	21a0      	movs	r1, #160	; 0xa0
 800109e:	4820      	ldr	r0, [pc, #128]	; (8001120 <at24_write+0xe0>)
 80010a0:	f004 fe70 	bl	8005d84 <HAL_I2C_Mem_Write>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d128      	bne.n	80010fc <at24_write+0xbc>

    	#endif
    {
      at24_delay(10);
 80010aa:	200a      	movs	r0, #10
 80010ac:	f003 fc3e 	bl	800492c <HAL_Delay>
      len -= w;
 80010b0:	8afb      	ldrh	r3, [r7, #22]
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	607b      	str	r3, [r7, #4]
      data += w;
 80010b8:	8afb      	ldrh	r3, [r7, #22]
 80010ba:	68ba      	ldr	r2, [r7, #8]
 80010bc:	4413      	add	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
      address += w;
 80010c0:	89fa      	ldrh	r2, [r7, #14]
 80010c2:	8afb      	ldrh	r3, [r7, #22]
 80010c4:	4413      	add	r3, r2
 80010c6:	81fb      	strh	r3, [r7, #14]
      if (len == 0)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <at24_write+0xa2>
      {
        #if (_EEPROM_USE_WP_PIN==1)
        HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
 80010ce:	2201      	movs	r2, #1
 80010d0:	2102      	movs	r1, #2
 80010d2:	4812      	ldr	r0, [pc, #72]	; (800111c <at24_write+0xdc>)
 80010d4:	f004 fcc6 	bl	8005a64 <HAL_GPIO_WritePin>
        #endif
        at24_lock = 0;
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <at24_write+0xd8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
        return true;
 80010de:	2301      	movs	r3, #1
 80010e0:	e015      	b.n	800110e <at24_write+0xce>
      }
      if (HAL_GetTick() - startTime >= timeout) 
 80010e2:	f003 fc17 	bl	8004914 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	429a      	cmp	r2, r3
 80010f0:	d8bf      	bhi.n	8001072 <at24_write+0x32>
      {
        at24_lock = 0;
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <at24_write+0xd8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	701a      	strb	r2, [r3, #0]
        return false;
 80010f8:	2300      	movs	r3, #0
 80010fa:	e008      	b.n	800110e <at24_write+0xce>
      }
    }
    else
    {
      #if (_EEPROM_USE_WP_PIN==1)
      HAL_GPIO_WritePin(_EEPROM_WP_GPIO, _EEPROM_WP_PIN, GPIO_PIN_SET);
 80010fc:	2201      	movs	r2, #1
 80010fe:	2102      	movs	r1, #2
 8001100:	4806      	ldr	r0, [pc, #24]	; (800111c <at24_write+0xdc>)
 8001102:	f004 fcaf 	bl	8005a64 <HAL_GPIO_WritePin>
      #endif
      at24_lock = 0;
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <at24_write+0xd8>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
      return false;
 800110c:	2300      	movs	r3, #0
    }
  }
}
 800110e:	4618      	mov	r0, r3
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000254 	.word	0x20000254
 800111c:	40021800 	.word	0x40021800
 8001120:	200003ac 	.word	0x200003ac

08001124 <at24_read>:
  * @param  len Amount of data to be sent
  * @param  timeout Timeout duration
  * @retval bool status
  */
bool at24_read(uint16_t address, uint8_t *data, size_t len, uint32_t timeout)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af04      	add	r7, sp, #16
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	4603      	mov	r3, r0
 8001132:	81fb      	strh	r3, [r7, #14]
  if (at24_lock == 1)
 8001134:	4b15      	ldr	r3, [pc, #84]	; (800118c <at24_read+0x68>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <at24_read+0x1c>
    return false;
 800113c:	2300      	movs	r3, #0
 800113e:	e021      	b.n	8001184 <at24_read+0x60>
  at24_lock = 1;
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <at24_read+0x68>)
 8001142:	2201      	movs	r2, #1
 8001144:	701a      	strb	r2, [r3, #0]
  #if (_EEPROM_USE_WP_PIN==1)
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_1, GPIO_PIN_SET);
 8001146:	2201      	movs	r2, #1
 8001148:	2102      	movs	r1, #2
 800114a:	4811      	ldr	r0, [pc, #68]	; (8001190 <at24_read+0x6c>)
 800114c:	f004 fc8a 	bl	8005a64 <HAL_GPIO_WritePin>
  #elif (_EEPROM_SIZE_KBIT == 8)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0300) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #elif (_EEPROM_SIZE_KBIT==16)
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS | ((address & 0x0700) >> 7), (address & 0xff), I2C_MEMADD_SIZE_8BIT, data, len, 100) == HAL_OK)
  #else
  if (HAL_I2C_Mem_Read(&_EEPROM_I2C, _EEPROM_ADDRESS, address, I2C_MEMADD_SIZE_16BIT, data, len, timeout) == HAL_OK)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	b29b      	uxth	r3, r3
 8001154:	89f9      	ldrh	r1, [r7, #14]
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	9202      	str	r2, [sp, #8]
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	2310      	movs	r3, #16
 8001162:	460a      	mov	r2, r1
 8001164:	21a0      	movs	r1, #160	; 0xa0
 8001166:	480b      	ldr	r0, [pc, #44]	; (8001194 <at24_read+0x70>)
 8001168:	f004 ff06 	bl	8005f78 <HAL_I2C_Mem_Read>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d104      	bne.n	800117c <at24_read+0x58>
  #endif
  {
    at24_lock = 0;
 8001172:	4b06      	ldr	r3, [pc, #24]	; (800118c <at24_read+0x68>)
 8001174:	2200      	movs	r2, #0
 8001176:	701a      	strb	r2, [r3, #0]
    return true;
 8001178:	2301      	movs	r3, #1
 800117a:	e003      	b.n	8001184 <at24_read+0x60>
  }
  else
  {
    at24_lock = 0;
 800117c:	4b03      	ldr	r3, [pc, #12]	; (800118c <at24_read+0x68>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
    return false;	
 8001182:	2300      	movs	r3, #0
  }    
}
 8001184:	4618      	mov	r0, r3
 8001186:	3710      	adds	r7, #16
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20000254 	.word	0x20000254
 8001190:	40021800 	.word	0x40021800
 8001194:	200003ac 	.word	0x200003ac

08001198 <__io_putchar>:
#endif /* __GNUC__ */
// Standard Output String


PUTCHAR_PROTOTYPE			// For printf Function
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart5, (uint8_t *)&ch, 1, 0xFFFF);   // USB
 80011a0:	1d39      	adds	r1, r7, #4
 80011a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a6:	2201      	movs	r2, #1
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <__io_putchar+0x20>)
 80011aa:	f007 ff36 	bl	800901a <HAL_UART_Transmit>
	return ch;
 80011ae:	687b      	ldr	r3, [r7, #4]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	200005f4 	.word	0x200005f4
 80011bc:	00000000 	.word	0x00000000

080011c0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80011c4:	b084      	sub	sp, #16
 80011c6:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011c8:	f003 fb3e 	bl	8004848 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011cc:	f000 ff0e 	bl	8001fec <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011d0:	f001 fb90 	bl	80028f4 <MX_GPIO_Init>
	MX_SPI1_Init();
 80011d4:	f001 f8ea 	bl	80023ac <MX_SPI1_Init>
	MX_TIM6_Init();
 80011d8:	f001 f9ee 	bl	80025b8 <MX_TIM6_Init>
	MX_TIM2_Init();
 80011dc:	f001 f952 	bl	8002484 <MX_TIM2_Init>
	MX_I2C2_Init();
 80011e0:	f001 f8a4 	bl	800232c <MX_I2C2_Init>
	MX_I2C1_Init();
 80011e4:	f001 f862 	bl	80022ac <MX_I2C1_Init>
	MX_ADC1_Init();
 80011e8:	f000 ff6a 	bl	80020c0 <MX_ADC1_Init>
	MX_SPI2_Init();
 80011ec:	f001 f914 	bl	8002418 <MX_SPI2_Init>
	MX_TIM14_Init();
 80011f0:	f001 fad0 	bl	8002794 <MX_TIM14_Init>
	MX_FMC_Init();
 80011f4:	f001 fb1c 	bl	8002830 <MX_FMC_Init>
	MX_ADC2_Init();
 80011f8:	f000 ffb4 	bl	8002164 <MX_ADC2_Init>
	MX_ADC3_Init();
 80011fc:	f001 f804 	bl	8002208 <MX_ADC3_Init>
	MX_TIM3_Init();
 8001200:	f001 f98c 	bl	800251c <MX_TIM3_Init>
	MX_TIM7_Init();
 8001204:	f001 fa0e 	bl	8002624 <MX_TIM7_Init>
	MX_TIM10_Init();
 8001208:	f001 fa7c 	bl	8002704 <MX_TIM10_Init>
	MX_TIM11_Init();
 800120c:	f001 fa9e 	bl	800274c <MX_TIM11_Init>
	MX_UART5_Init();
 8001210:	f001 fae4 	bl	80027dc <MX_UART5_Init>
	MX_TIM9_Init();
 8001214:	f001 fa3c 	bl	8002690 <MX_TIM9_Init>

#if !testForLoop

	/*	LCD(BANK 1 NE1 A18 16Bit) _ while use lcd, usart3 exhibit
	 * */
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin,SET);
 8001218:	2201      	movs	r2, #1
 800121a:	2102      	movs	r1, #2
 800121c:	488d      	ldr	r0, [pc, #564]	; (8001454 <main+0x294>)
 800121e:	f004 fc21 	bl	8005a64 <HAL_GPIO_WritePin>
	HAL_SuspendTick();
 8001222:	f003 fba7 	bl	8004974 <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001226:	2101      	movs	r1, #1
 8001228:	2001      	movs	r0, #1
 800122a:	f005 fdcf 	bl	8006dcc <HAL_PWR_EnterSLEEPMode>
	HAL_ResumeTick();
 800122e:	f003 fbb1 	bl	8004994 <HAL_ResumeTick>

	Init_RFID();
 8001232:	f009 f945 	bl	800a4c0 <Init_RFID>
	lcdInit();
 8001236:	f008 fab1 	bl	800979c <lcdInit>

	HAL_Delay(10);
 800123a:	200a      	movs	r0, #10
 800123c:	f003 fb76 	bl	800492c <HAL_Delay>
	// recommand == 1 (for touch)
	lcdSetOrientation(1);
 8001240:	2001      	movs	r0, #1
 8001242:	f008 ff83 	bl	800a14c <lcdSetOrientation>
	lcdFillRGB(COLOR_WHITE);
 8001246:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800124a:	f008 fbd3 	bl	80099f4 <lcdFillRGB>
	lcdSetTextFont(&Font20);
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
	lcdSetCursor(0, 0);
	lcdPrintf((char*)"debugging mode_start");
#else
	lcdSetTextFont(&Font20);
 800124e:	4882      	ldr	r0, [pc, #520]	; (8001458 <main+0x298>)
 8001250:	f008 ff56 	bl	800a100 <lcdSetTextFont>
	lcdSetCursor(5, 10);
 8001254:	210a      	movs	r1, #10
 8001256:	2005      	movs	r0, #5
 8001258:	f008 ffe6 	bl	800a228 <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 800125c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001260:	2000      	movs	r0, #0
 8001262:	f008 ff5d 	bl	800a120 <lcdSetTextColor>
	lcdPrintf("S.A WheelChair");
 8001266:	487d      	ldr	r0, [pc, #500]	; (800145c <main+0x29c>)
 8001268:	f008 febe 	bl	8009fe8 <lcdPrintf>

	lcdFillRoundRect(20, 80, 280, 100, 5, COLOR_ORANGE);
 800126c:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	2305      	movs	r3, #5
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2364      	movs	r3, #100	; 0x64
 8001278:	f44f 728c 	mov.w	r2, #280	; 0x118
 800127c:	2150      	movs	r1, #80	; 0x50
 800127e:	2014      	movs	r0, #20
 8001280:	f008 fda2 	bl	8009dc8 <lcdFillRoundRect>
	lcdSetTextFont(&Font24);
 8001284:	4876      	ldr	r0, [pc, #472]	; (8001460 <main+0x2a0>)
 8001286:	f008 ff3b 	bl	800a100 <lcdSetTextFont>
	lcdSetTextColor(COLOR_BLACK, COLOR_ORANGE);
 800128a:	f64f 5120 	movw	r1, #64800	; 0xfd20
 800128e:	2000      	movs	r0, #0
 8001290:	f008 ff46 	bl	800a120 <lcdSetTextColor>
	lcdSetCursor((320-170)/2, 5*24);
 8001294:	2178      	movs	r1, #120	; 0x78
 8001296:	204b      	movs	r0, #75	; 0x4b
 8001298:	f008 ffc6 	bl	800a228 <lcdSetCursor>
	lcdPrintf("TOUCH CARD");
 800129c:	4871      	ldr	r0, [pc, #452]	; (8001464 <main+0x2a4>)
 800129e:	f008 fea3 	bl	8009fe8 <lcdPrintf>


#endif

#if debug_mode ==0
	while(main_start_flag){
 80012a2:	e06e      	b.n	8001382 <main+0x1c2>
		HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin,SET);
 80012a4:	2201      	movs	r2, #1
 80012a6:	2102      	movs	r1, #2
 80012a8:	486a      	ldr	r0, [pc, #424]	; (8001454 <main+0x294>)
 80012aa:	f004 fbdb 	bl	8005a64 <HAL_GPIO_WritePin>
		HAL_SuspendTick();
 80012ae:	f003 fb61 	bl	8004974 <HAL_SuspendTick>
		HAL_PWR_EnterSLEEPMode(PWR_LOWPOWERREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80012b2:	2101      	movs	r1, #1
 80012b4:	2001      	movs	r0, #1
 80012b6:	f005 fd89 	bl	8006dcc <HAL_PWR_EnterSLEEPMode>
		HAL_ResumeTick();
 80012ba:	f003 fb6b 	bl	8004994 <HAL_ResumeTick>
		if(PIR_flag == 1){
 80012be:	4b6a      	ldr	r3, [pc, #424]	; (8001468 <main+0x2a8>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d15a      	bne.n	800137c <main+0x1bc>
			HAL_Delay(250);
 80012c6:	20fa      	movs	r0, #250	; 0xfa
 80012c8:	f003 fb30 	bl	800492c <HAL_Delay>
			for(int i=0;i<2;i++){
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	e038      	b.n	8001344 <main+0x184>
				HAL_GPIO_WritePin(Relay_Back_Light_GPIO_Port, Relay_Back_Light_Pin, SET);
 80012d2:	2201      	movs	r2, #1
 80012d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012d8:	4864      	ldr	r0, [pc, #400]	; (800146c <main+0x2ac>)
 80012da:	f004 fbc3 	bl	8005a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Relay_Front_Light_GPIO_Port, Relay_Front_Light_Pin , SET);
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012e4:	485b      	ldr	r0, [pc, #364]	; (8001454 <main+0x294>)
 80012e6:	f004 fbbd 	bl	8005a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Relay_Left_Light_GPIO_Port, Relay_Left_Light_Pin, SET);
 80012ea:	2201      	movs	r2, #1
 80012ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012f0:	485e      	ldr	r0, [pc, #376]	; (800146c <main+0x2ac>)
 80012f2:	f004 fbb7 	bl	8005a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Relay_Right_Light_GPIO_Port, Relay_Right_Light_Pin, SET);
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012fc:	485b      	ldr	r0, [pc, #364]	; (800146c <main+0x2ac>)
 80012fe:	f004 fbb1 	bl	8005a64 <HAL_GPIO_WritePin>
				HAL_Delay(150);
 8001302:	2096      	movs	r0, #150	; 0x96
 8001304:	f003 fb12 	bl	800492c <HAL_Delay>
				HAL_GPIO_WritePin(Relay_Back_Light_GPIO_Port, Relay_Back_Light_Pin, RESET);
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800130e:	4857      	ldr	r0, [pc, #348]	; (800146c <main+0x2ac>)
 8001310:	f004 fba8 	bl	8005a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Relay_Front_Light_GPIO_Port, Relay_Front_Light_Pin , RESET);
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 7100 	mov.w	r1, #512	; 0x200
 800131a:	484e      	ldr	r0, [pc, #312]	; (8001454 <main+0x294>)
 800131c:	f004 fba2 	bl	8005a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Relay_Left_Light_GPIO_Port, Relay_Left_Light_Pin, RESET);
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001326:	4851      	ldr	r0, [pc, #324]	; (800146c <main+0x2ac>)
 8001328:	f004 fb9c 	bl	8005a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Relay_Right_Light_GPIO_Port, Relay_Right_Light_Pin, RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001332:	484e      	ldr	r0, [pc, #312]	; (800146c <main+0x2ac>)
 8001334:	f004 fb96 	bl	8005a64 <HAL_GPIO_WritePin>
				HAL_Delay(250);
 8001338:	20fa      	movs	r0, #250	; 0xfa
 800133a:	f003 faf7 	bl	800492c <HAL_Delay>
			for(int i=0;i<2;i++){
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3301      	adds	r3, #1
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b01      	cmp	r3, #1
 8001348:	ddc3      	ble.n	80012d2 <main+0x112>
			}
			HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin,RESET);
 800134a:	2200      	movs	r2, #0
 800134c:	2102      	movs	r1, #2
 800134e:	4841      	ldr	r0, [pc, #260]	; (8001454 <main+0x294>)
 8001350:	f004 fb88 	bl	8005a64 <HAL_GPIO_WritePin>
			main_loop_counter_flag=0;
 8001354:	4b46      	ldr	r3, [pc, #280]	; (8001470 <main+0x2b0>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(&htim14,0);
 800135a:	4b46      	ldr	r3, [pc, #280]	; (8001474 <main+0x2b4>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2200      	movs	r2, #0
 8001360:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim14);
 8001362:	4844      	ldr	r0, [pc, #272]	; (8001474 <main+0x2b4>)
 8001364:	f007 f9ac 	bl	80086c0 <HAL_TIM_Base_Start_IT>
			// RFID Check
			rfid_loop_init_set();
 8001368:	f002 f8f2 	bl	8003550 <rfid_loop_init_set>
			HAL_GPIO_WritePin(Alarm_GPIO_Port, Alarm_Pin, RESET);
 800136c:	2200      	movs	r2, #0
 800136e:	2140      	movs	r1, #64	; 0x40
 8001370:	483e      	ldr	r0, [pc, #248]	; (800146c <main+0x2ac>)
 8001372:	f004 fb77 	bl	8005a64 <HAL_GPIO_WritePin>
			PIR_flag=0;
 8001376:	4b3c      	ldr	r3, [pc, #240]	; (8001468 <main+0x2a8>)
 8001378:	2200      	movs	r2, #0
 800137a:	701a      	strb	r2, [r3, #0]
		}

		HAL_TIM_Base_Stop_IT(&htim14);
 800137c:	483d      	ldr	r0, [pc, #244]	; (8001474 <main+0x2b4>)
 800137e:	f007 fa0f 	bl	80087a0 <HAL_TIM_Base_Stop_IT>
	while(main_start_flag){
 8001382:	4b3d      	ldr	r3, [pc, #244]	; (8001478 <main+0x2b8>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d18c      	bne.n	80012a4 <main+0xe4>
	}
	rfid_flag_wrong=0;
 800138a:	4b3c      	ldr	r3, [pc, #240]	; (800147c <main+0x2bc>)
 800138c:	2200      	movs	r2, #0
 800138e:	701a      	strb	r2, [r3, #0]
	BEEP(3,7);
 8001390:	2107      	movs	r1, #7
 8001392:	2003      	movs	r0, #3
 8001394:	f002 fb94 	bl	8003ac0 <BEEP>
	HAL_Delay(3000);
 8001398:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800139c:	f003 fac6 	bl	800492c <HAL_Delay>
	rfid_loop_setup_card();
 80013a0:	f002 f9a2 	bl	80036e8 <rfid_loop_setup_card>
	BEEP(3,20);
 80013a4:	2114      	movs	r1, #20
 80013a6:	2003      	movs	r0, #3
 80013a8:	f002 fb8a 	bl	8003ac0 <BEEP>
	HAL_GPIO_WritePin(state_ThisBoard_GPIO_Port, state_ThisBoard_Pin, SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2140      	movs	r1, #64	; 0x40
 80013b0:	4833      	ldr	r0, [pc, #204]	; (8001480 <main+0x2c0>)
 80013b2:	f004 fb57 	bl	8005a64 <HAL_GPIO_WritePin>
#endif

#if !test_motor
	HAL_GPIO_WritePin(share_default_set_GPIO_Port, share_default_set_Pin, SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	2108      	movs	r1, #8
 80013ba:	4832      	ldr	r0, [pc, #200]	; (8001484 <main+0x2c4>)
 80013bc:	f004 fb52 	bl	8005a64 <HAL_GPIO_WritePin>

	de_sh_f=1;
 80013c0:	4b31      	ldr	r3, [pc, #196]	; (8001488 <main+0x2c8>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	701a      	strb	r2, [r3, #0]
	de_sh_f_1=0;
 80013c6:	4b31      	ldr	r3, [pc, #196]	; (800148c <main+0x2cc>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	801a      	strh	r2, [r3, #0]
	lcdFillRGB(COLOR_WHITE);
 80013cc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013d0:	f008 fb10 	bl	80099f4 <lcdFillRGB>
	lcdFillRoundRect(20, 80, 280, 100, 5, COLOR_LIGHTGREY);
 80013d4:	f24c 6318 	movw	r3, #50712	; 0xc618
 80013d8:	9301      	str	r3, [sp, #4]
 80013da:	2305      	movs	r3, #5
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	2364      	movs	r3, #100	; 0x64
 80013e0:	f44f 728c 	mov.w	r2, #280	; 0x118
 80013e4:	2150      	movs	r1, #80	; 0x50
 80013e6:	2014      	movs	r0, #20
 80013e8:	f008 fcee 	bl	8009dc8 <lcdFillRoundRect>
	lcdSetTextFont(&Font24);
 80013ec:	481c      	ldr	r0, [pc, #112]	; (8001460 <main+0x2a0>)
 80013ee:	f008 fe87 	bl	800a100 <lcdSetTextFont>
	lcdSetTextColor(COLOR_BLACK, COLOR_LIGHTGREY);
 80013f2:	f24c 6118 	movw	r1, #50712	; 0xc618
 80013f6:	2000      	movs	r0, #0
 80013f8:	f008 fe92 	bl	800a120 <lcdSetTextColor>
	lcdSetCursor((320-170)/2, 5*24);
 80013fc:	2178      	movs	r1, #120	; 0x78
 80013fe:	204b      	movs	r0, #75	; 0x4b
 8001400:	f008 ff12 	bl	800a228 <lcdSetCursor>
	lcdPrintf("Init System");
 8001404:	4822      	ldr	r0, [pc, #136]	; (8001490 <main+0x2d0>)
 8001406:	f008 fdef 	bl	8009fe8 <lcdPrintf>

	lcdFillRGB(COLOR_WHITE);
 800140a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800140e:	f008 faf1 	bl	80099f4 <lcdFillRGB>
	lcdFillRoundRect(20, 80, 280, 100, 5, COLOR_ORANGE);
 8001412:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8001416:	9301      	str	r3, [sp, #4]
 8001418:	2305      	movs	r3, #5
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2364      	movs	r3, #100	; 0x64
 800141e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001422:	2150      	movs	r1, #80	; 0x50
 8001424:	2014      	movs	r0, #20
 8001426:	f008 fccf 	bl	8009dc8 <lcdFillRoundRect>
	lcdSetTextFont(&Font24);
 800142a:	480d      	ldr	r0, [pc, #52]	; (8001460 <main+0x2a0>)
 800142c:	f008 fe68 	bl	800a100 <lcdSetTextFont>
	lcdSetTextColor(COLOR_BLACK, COLOR_ORANGE);
 8001430:	f64f 5120 	movw	r1, #64800	; 0xfd20
 8001434:	2000      	movs	r0, #0
 8001436:	f008 fe73 	bl	800a120 <lcdSetTextColor>
	lcdSetCursor((320-170)/2, 5*24);
 800143a:	2178      	movs	r1, #120	; 0x78
 800143c:	204b      	movs	r0, #75	; 0x4b
 800143e:	f008 fef3 	bl	800a228 <lcdSetCursor>
	lcdPrintf("Put Walker");
 8001442:	4814      	ldr	r0, [pc, #80]	; (8001494 <main+0x2d4>)
 8001444:	f008 fdd0 	bl	8009fe8 <lcdPrintf>

	de_sh_f=1;
 8001448:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <main+0x2c8>)
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]

	uint8_t modesets_flag=0;
 800144e:	2300      	movs	r3, #0
 8001450:	70fb      	strb	r3, [r7, #3]
	while(de_sh_f){
 8001452:	e02e      	b.n	80014b2 <main+0x2f2>
 8001454:	40021400 	.word	0x40021400
 8001458:	20000034 	.word	0x20000034
 800145c:	08010770 	.word	0x08010770
 8001460:	2000003c 	.word	0x2000003c
 8001464:	08010780 	.word	0x08010780
 8001468:	2000025a 	.word	0x2000025a
 800146c:	40020800 	.word	0x40020800
 8001470:	20000269 	.word	0x20000269
 8001474:	200008f0 	.word	0x200008f0
 8001478:	20000010 	.word	0x20000010
 800147c:	2000026c 	.word	0x2000026c
 8001480:	40020c00 	.word	0x40020c00
 8001484:	40021800 	.word	0x40021800
 8001488:	20000508 	.word	0x20000508
 800148c:	200006dc 	.word	0x200006dc
 8001490:	0801078c 	.word	0x0801078c
 8001494:	08010798 	.word	0x08010798
		if(de_sh_f_1>1000){
			shutdown;
		}
#endif
#if modefortest
		HAL_Delay(1000);
 8001498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800149c:	f003 fa46 	bl	800492c <HAL_Delay>
		modesets_flag+=1;
 80014a0:	78fb      	ldrb	r3, [r7, #3]
 80014a2:	3301      	adds	r3, #1
 80014a4:	70fb      	strb	r3, [r7, #3]

		if(modesets_flag>5){
 80014a6:	78fb      	ldrb	r3, [r7, #3]
 80014a8:	2b05      	cmp	r3, #5
 80014aa:	d902      	bls.n	80014b2 <main+0x2f2>
			de_sh_f=0;
 80014ac:	4bb7      	ldr	r3, [pc, #732]	; (800178c <main+0x5cc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	701a      	strb	r2, [r3, #0]
	while(de_sh_f){
 80014b2:	4bb6      	ldr	r3, [pc, #728]	; (800178c <main+0x5cc>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1ee      	bne.n	8001498 <main+0x2d8>
		}
#endif
	}
#if modefortest
	shutdown;
 80014ba:	f004 f8dc 	bl	8005676 <HAL_NVIC_SystemReset>
#endif


#endif
	HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin,RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	2102      	movs	r1, #2
 80014c2:	48b3      	ldr	r0, [pc, #716]	; (8001790 <main+0x5d0>)
 80014c4:	f004 face 	bl	8005a64 <HAL_GPIO_WritePin>
	lcdFillRGB(COLOR_WHITE);
	lcdSetCursor(0, 0);
	lcdPrintf((char*)"debugging mode_Home");
#endif

	lcdSetTextFont(&Font20);
 80014c8:	48b2      	ldr	r0, [pc, #712]	; (8001794 <main+0x5d4>)
 80014ca:	f008 fe19 	bl	800a100 <lcdSetTextFont>
	lcdSetCursor(5, 10);
 80014ce:	210a      	movs	r1, #10
 80014d0:	2005      	movs	r0, #5
 80014d2:	f008 fea9 	bl	800a228 <lcdSetCursor>
	lcdSetTextColor(COLOR_BLACK, COLOR_WHITE);
 80014d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80014da:	2000      	movs	r0, #0
 80014dc:	f008 fe20 	bl	800a120 <lcdSetTextColor>
	lcdPrintf("S.A WheelChair");
 80014e0:	48ad      	ldr	r0, [pc, #692]	; (8001798 <main+0x5d8>)
 80014e2:	f008 fd81 	bl	8009fe8 <lcdPrintf>


#if debug_mode ==0
	lcdFillRect(0, 30, 320, 240, COLOR_WHITE);
 80014e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	23f0      	movs	r3, #240	; 0xf0
 80014ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80014f2:	211e      	movs	r1, #30
 80014f4:	2000      	movs	r0, #0
 80014f6:	f008 fc0b 	bl	8009d10 <lcdFillRect>
	lcdFillRoundRect(30, 40, 14*18-14, 30, 5, COLOR_GRAY_225);
 80014fa:	f24e 731c 	movw	r3, #59164	; 0xe71c
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	2305      	movs	r3, #5
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	231e      	movs	r3, #30
 8001506:	22ee      	movs	r2, #238	; 0xee
 8001508:	2128      	movs	r1, #40	; 0x28
 800150a:	201e      	movs	r0, #30
 800150c:	f008 fc5c 	bl	8009dc8 <lcdFillRoundRect>
	lcdSetTextFont(&Font20);
 8001510:	48a0      	ldr	r0, [pc, #640]	; (8001794 <main+0x5d4>)
 8001512:	f008 fdf5 	bl	800a100 <lcdSetTextFont>
	lcdSetTextColor(COLOR_BLACK,COLOR_GRAY_225);
 8001516:	f24e 711c 	movw	r1, #59164	; 0xe71c
 800151a:	2000      	movs	r0, #0
 800151c:	f008 fe00 	bl	800a120 <lcdSetTextColor>
	lcdSetCursor(20, 45);
 8001520:	212d      	movs	r1, #45	; 0x2d
 8001522:	2014      	movs	r0, #20
 8001524:	f008 fe80 	bl	800a228 <lcdSetCursor>
	lcdPrintf(" Temp:    Hum:    ");
 8001528:	489c      	ldr	r0, [pc, #624]	; (800179c <main+0x5dc>)
 800152a:	f008 fd5d 	bl	8009fe8 <lcdPrintf>

	lcdFillRoundRect(30, 80, 14*8 , 30, 5, COLOR_THEME_SKYBLUE_BASE);
 800152e:	f249 53bf 	movw	r3, #38335	; 0x95bf
 8001532:	9301      	str	r3, [sp, #4]
 8001534:	2305      	movs	r3, #5
 8001536:	9300      	str	r3, [sp, #0]
 8001538:	231e      	movs	r3, #30
 800153a:	2270      	movs	r2, #112	; 0x70
 800153c:	2150      	movs	r1, #80	; 0x50
 800153e:	201e      	movs	r0, #30
 8001540:	f008 fc42 	bl	8009dc8 <lcdFillRoundRect>
	lcdSetTextColor(COLOR_BLACK,COLOR_THEME_SKYBLUE_BASE);
 8001544:	f249 51bf 	movw	r1, #38335	; 0x95bf
 8001548:	2000      	movs	r0, #0
 800154a:	f008 fde9 	bl	800a120 <lcdSetTextColor>
	lcdSetCursor(30, 85);
 800154e:	2155      	movs	r1, #85	; 0x55
 8001550:	201e      	movs	r0, #30
 8001552:	f008 fe69 	bl	800a228 <lcdSetCursor>
	lcdPrintf("Speed:  ");
 8001556:	4892      	ldr	r0, [pc, #584]	; (80017a0 <main+0x5e0>)
 8001558:	f008 fd46 	bl	8009fe8 <lcdPrintf>

	lcdFillRoundRect(152, 80, 14*8 , 30, 5, COLOR_THEME_SKYBLUE_LIGHTER);
 800155c:	f24e 735f 	movw	r3, #59231	; 0xe75f
 8001560:	9301      	str	r3, [sp, #4]
 8001562:	2305      	movs	r3, #5
 8001564:	9300      	str	r3, [sp, #0]
 8001566:	231e      	movs	r3, #30
 8001568:	2270      	movs	r2, #112	; 0x70
 800156a:	2150      	movs	r1, #80	; 0x50
 800156c:	2098      	movs	r0, #152	; 0x98
 800156e:	f008 fc2b 	bl	8009dc8 <lcdFillRoundRect>
	lcdSetTextColor(COLOR_BLACK,COLOR_THEME_SKYBLUE_LIGHTER);
 8001572:	f24e 715f 	movw	r1, #59231	; 0xe75f
 8001576:	2000      	movs	r0, #0
 8001578:	f008 fdd2 	bl	800a120 <lcdSetTextColor>
	lcdSetCursor(152, 85);
 800157c:	2155      	movs	r1, #85	; 0x55
 800157e:	2098      	movs	r0, #152	; 0x98
 8001580:	f008 fe52 	bl	800a228 <lcdSetCursor>
	lcdPrintf("Seat:   ");
 8001584:	4887      	ldr	r0, [pc, #540]	; (80017a4 <main+0x5e4>)
 8001586:	f008 fd2f 	bl	8009fe8 <lcdPrintf>

	lcdFillRoundRect(30, 120, 240 , 30, 5, COLOR_THEME_LIMEGREEN_BASE);
 800158a:	f24d 73f0 	movw	r3, #55280	; 0xd7f0
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	2305      	movs	r3, #5
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	231e      	movs	r3, #30
 8001596:	22f0      	movs	r2, #240	; 0xf0
 8001598:	2178      	movs	r1, #120	; 0x78
 800159a:	201e      	movs	r0, #30
 800159c:	f008 fc14 	bl	8009dc8 <lcdFillRoundRect>
	lcdSetTextColor(COLOR_BLACK,COLOR_THEME_LIMEGREEN_BASE);
 80015a0:	f24d 71f0 	movw	r1, #55280	; 0xd7f0
 80015a4:	2000      	movs	r0, #0
 80015a6:	f008 fdbb 	bl	800a120 <lcdSetTextColor>
	lcdSetCursor(30, 125);
 80015aa:	217d      	movs	r1, #125	; 0x7d
 80015ac:	201e      	movs	r0, #30
 80015ae:	f008 fe3b 	bl	800a228 <lcdSetCursor>
	lcdPrintf("Power:   ");
 80015b2:	487d      	ldr	r0, [pc, #500]	; (80017a8 <main+0x5e8>)
 80015b4:	f008 fd18 	bl	8009fe8 <lcdPrintf>
	//	lcdPrintf("TOUCH CARD");



	//MPU6050
	HAL_TIM_Base_Start_IT(&htim2);
 80015b8:	487c      	ldr	r0, [pc, #496]	; (80017ac <main+0x5ec>)
 80015ba:	f007 f881 	bl	80086c0 <HAL_TIM_Base_Start_IT>
	MPU_milliseconds=0;
 80015be:	4b7c      	ldr	r3, [pc, #496]	; (80017b0 <main+0x5f0>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	801a      	strh	r2, [r3, #0]
	flag_for_MPU_RESET=0;
 80015c4:	4b7b      	ldr	r3, [pc, #492]	; (80017b4 <main+0x5f4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	701a      	strb	r2, [r3, #0]
	Angle_on=1;
 80015ca:	4b7b      	ldr	r3, [pc, #492]	; (80017b8 <main+0x5f8>)
 80015cc:	2201      	movs	r2, #1
 80015ce:	701a      	strb	r2, [r3, #0]

#endif

	//Light Int 0.5sec
	HAL_TIM_Base_Start_IT(&htim7);
 80015d0:	487a      	ldr	r0, [pc, #488]	; (80017bc <main+0x5fc>)
 80015d2:	f007 f875 	bl	80086c0 <HAL_TIM_Base_Start_IT>

	//Beep Timing Tim _ 1sec default
	HAL_TIM_Base_Start_IT(&htim10);
 80015d6:	487a      	ldr	r0, [pc, #488]	; (80017c0 <main+0x600>)
 80015d8:	f007 f872 	bl	80086c0 <HAL_TIM_Base_Start_IT>

	//main_loop_timing_0.1sec
	HAL_TIM_Base_Start_IT(&htim11);
 80015dc:	4879      	ldr	r0, [pc, #484]	; (80017c4 <main+0x604>)
 80015de:	f007 f86f 	bl	80086c0 <HAL_TIM_Base_Start_IT>

	//mpu6050 int1
	HAL_TIM_Base_Start_IT(&htim9);
 80015e2:	4879      	ldr	r0, [pc, #484]	; (80017c8 <main+0x608>)
 80015e4:	f007 f86c 	bl	80086c0 <HAL_TIM_Base_Start_IT>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		F_active=0;
 80015e8:	4b78      	ldr	r3, [pc, #480]	; (80017cc <main+0x60c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	701a      	strb	r2, [r3, #0]
		main_loop_control(2);
 80015ee:	2002      	movs	r0, #2
 80015f0:	f001 fc8e 	bl	8002f10 <main_loop_control>
		printf("6.FSR %d \r\n",F_mainLoop.flag_FSR);
		printf("7.GPIO %d \r\n",F_mainLoop.flag_GPIO);
#endif

#if !testForLoop
		switch(F_active){
 80015f4:	4b75      	ldr	r3, [pc, #468]	; (80017cc <main+0x60c>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	2b06      	cmp	r3, #6
 80015fc:	d8f4      	bhi.n	80015e8 <main+0x428>
 80015fe:	a201      	add	r2, pc, #4	; (adr r2, 8001604 <main+0x444>)
 8001600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001604:	08001f49 	.word	0x08001f49
 8001608:	08001e73 	.word	0x08001e73
 800160c:	08001dd1 	.word	0x08001dd1
 8001610:	08001be5 	.word	0x08001be5
 8001614:	08001aa5 	.word	0x08001aa5
 8001618:	08001809 	.word	0x08001809
 800161c:	08001621 	.word	0x08001621

		case F_GPIO:
			//GPIO
			/////////////////////////////////
			if(HAL_GPIO_ReadPin(share_Left_in_GPIO_Port, share_Left_in_Pin)==GPIO_PIN_SET)
 8001620:	2108      	movs	r1, #8
 8001622:	486b      	ldr	r0, [pc, #428]	; (80017d0 <main+0x610>)
 8001624:	f004 fa06 	bl	8005a34 <HAL_GPIO_ReadPin>
 8001628:	4603      	mov	r3, r0
 800162a:	2b01      	cmp	r3, #1
 800162c:	d103      	bne.n	8001636 <main+0x476>
			{
				flag_motor_Left=1;
 800162e:	4b69      	ldr	r3, [pc, #420]	; (80017d4 <main+0x614>)
 8001630:	2201      	movs	r2, #1
 8001632:	701a      	strb	r2, [r3, #0]
 8001634:	e002      	b.n	800163c <main+0x47c>

			}
			else{
				flag_motor_Left=0;
 8001636:	4b67      	ldr	r3, [pc, #412]	; (80017d4 <main+0x614>)
 8001638:	2200      	movs	r2, #0
 800163a:	701a      	strb	r2, [r3, #0]
			}

			if(HAL_GPIO_ReadPin(share_Right_in_GPIO_Port, share_Right_in_Pin)==GPIO_PIN_SET){
 800163c:	2101      	movs	r1, #1
 800163e:	4866      	ldr	r0, [pc, #408]	; (80017d8 <main+0x618>)
 8001640:	f004 f9f8 	bl	8005a34 <HAL_GPIO_ReadPin>
 8001644:	4603      	mov	r3, r0
 8001646:	2b01      	cmp	r3, #1
 8001648:	d103      	bne.n	8001652 <main+0x492>
				flag_motor_Right=1;
 800164a:	4b64      	ldr	r3, [pc, #400]	; (80017dc <main+0x61c>)
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
 8001650:	e002      	b.n	8001658 <main+0x498>
			}
			else{
				flag_motor_Right=0;
 8001652:	4b62      	ldr	r3, [pc, #392]	; (80017dc <main+0x61c>)
 8001654:	2200      	movs	r2, #0
 8001656:	701a      	strb	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(share_Back_in_GPIO_Port, share_Back_in_Pin)==GPIO_PIN_SET){
 8001658:	2108      	movs	r1, #8
 800165a:	484d      	ldr	r0, [pc, #308]	; (8001790 <main+0x5d0>)
 800165c:	f004 f9ea 	bl	8005a34 <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b01      	cmp	r3, #1
 8001664:	d103      	bne.n	800166e <main+0x4ae>
				flag_motor_B_F=1;
 8001666:	4b5e      	ldr	r3, [pc, #376]	; (80017e0 <main+0x620>)
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e002      	b.n	8001674 <main+0x4b4>
			}
			else{
				flag_motor_B_F=0;
 800166e:	4b5c      	ldr	r3, [pc, #368]	; (80017e0 <main+0x620>)
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
			}

			if(HAL_GPIO_ReadPin(share_stop_in_GPIO_Port, share_stop_in_Pin)==GPIO_PIN_SET){
 8001674:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001678:	485a      	ldr	r0, [pc, #360]	; (80017e4 <main+0x624>)
 800167a:	f004 f9db 	bl	8005a34 <HAL_GPIO_ReadPin>
 800167e:	4603      	mov	r3, r0
 8001680:	2b01      	cmp	r3, #1
 8001682:	d103      	bne.n	800168c <main+0x4cc>
				flag_motor_stop=1;
 8001684:	4b58      	ldr	r3, [pc, #352]	; (80017e8 <main+0x628>)
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	e002      	b.n	8001692 <main+0x4d2>
			}
			else{
				flag_motor_stop=0;
 800168c:	4b56      	ldr	r3, [pc, #344]	; (80017e8 <main+0x628>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]
			}

			//2.4sec  -> 0.8sec *3
			if(HAL_GPIO_ReadPin(SW_standing_method_GPIO_Port, SW_standing_method_Pin)==GPIO_PIN_SET)
 8001692:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001696:	4855      	ldr	r0, [pc, #340]	; (80017ec <main+0x62c>)
 8001698:	f004 f9cc 	bl	8005a34 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d102      	bne.n	80016a8 <main+0x4e8>
			{
				share_standing_option_on=1;
 80016a2:	4b53      	ldr	r3, [pc, #332]	; (80017f0 <main+0x630>)
 80016a4:	2201      	movs	r2, #1
 80016a6:	701a      	strb	r2, [r3, #0]

			}
			if(standing_loop_flag){
 80016a8:	4b52      	ldr	r3, [pc, #328]	; (80017f4 <main+0x634>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00b      	beq.n	80016c8 <main+0x508>
				share_standing_option_on=0;
 80016b0:	4b4f      	ldr	r3, [pc, #316]	; (80017f0 <main+0x630>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
				standing_loop_flag=0;
 80016b6:	4b4f      	ldr	r3, [pc, #316]	; (80017f4 <main+0x634>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(share_stand_output_GPIO_Port, share_stand_output_Pin, RESET);
 80016bc:	2200      	movs	r2, #0
 80016be:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016c2:	4833      	ldr	r0, [pc, #204]	; (8001790 <main+0x5d0>)
 80016c4:	f004 f9ce 	bl	8005a64 <HAL_GPIO_WritePin>
			}

			if(HAL_GPIO_ReadPin(share_standing_complete_GPIO_Port, share_standing_complete_Pin) == GPIO_PIN_SET ){
 80016c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016cc:	4842      	ldr	r0, [pc, #264]	; (80017d8 <main+0x618>)
 80016ce:	f004 f9b1 	bl	8005a34 <HAL_GPIO_ReadPin>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d101      	bne.n	80016dc <main+0x51c>
				shutdown;
 80016d8:	f003 ffcd 	bl	8005676 <HAL_NVIC_SystemReset>

			}
			if(share_standing_option_on==1){
 80016dc:	4b44      	ldr	r3, [pc, #272]	; (80017f0 <main+0x630>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d116      	bne.n	8001712 <main+0x552>
				if(flag_motor_stop==1){
 80016e4:	4b40      	ldr	r3, [pc, #256]	; (80017e8 <main+0x628>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d112      	bne.n	8001712 <main+0x552>
					HAL_GPIO_WritePin(share_stand_output_GPIO_Port, share_stand_output_Pin, SET);
 80016ec:	2201      	movs	r2, #1
 80016ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f2:	4827      	ldr	r0, [pc, #156]	; (8001790 <main+0x5d0>)
 80016f4:	f004 f9b6 	bl	8005a64 <HAL_GPIO_WritePin>
					HAL_TIM_Base_Stop_IT(&htim11);
 80016f8:	4832      	ldr	r0, [pc, #200]	; (80017c4 <main+0x604>)
 80016fa:	f007 f851 	bl	80087a0 <HAL_TIM_Base_Stop_IT>
					standing_loop_flag=1;
 80016fe:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <main+0x634>)
 8001700:	2201      	movs	r2, #1
 8001702:	701a      	strb	r2, [r3, #0]
					HAL_Delay(3000);
 8001704:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001708:	f003 f910 	bl	800492c <HAL_Delay>
					HAL_TIM_Base_Start_IT(&htim11);
 800170c:	482d      	ldr	r0, [pc, #180]	; (80017c4 <main+0x604>)
 800170e:	f006 ffd7 	bl	80086c0 <HAL_TIM_Base_Start_IT>

				}
			}


			if(HAL_GPIO_ReadPin(share_seat_joy_in_GPIO_Port, share_seat_joy_in_Pin)==GPIO_PIN_SET)
 8001712:	2108      	movs	r1, #8
 8001714:	4838      	ldr	r0, [pc, #224]	; (80017f8 <main+0x638>)
 8001716:	f004 f98d 	bl	8005a34 <HAL_GPIO_ReadPin>
 800171a:	4603      	mov	r3, r0
 800171c:	2b01      	cmp	r3, #1
 800171e:	d103      	bne.n	8001728 <main+0x568>
			{
				flag_motor_seat_joy=1;
 8001720:	4b36      	ldr	r3, [pc, #216]	; (80017fc <main+0x63c>)
 8001722:	2201      	movs	r2, #1
 8001724:	701a      	strb	r2, [r3, #0]
 8001726:	e002      	b.n	800172e <main+0x56e>
			}
			else{
				flag_motor_seat_joy=0;
 8001728:	4b34      	ldr	r3, [pc, #208]	; (80017fc <main+0x63c>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
			}

			share_speed_val=0;
 800172e:	4b34      	ldr	r3, [pc, #208]	; (8001800 <main+0x640>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]

			if(HAL_GPIO_ReadPin(share_speed_in_GPIO_Port, share_speed_in_Pin) == GPIO_PIN_SET){
 8001734:	2180      	movs	r1, #128	; 0x80
 8001736:	4816      	ldr	r0, [pc, #88]	; (8001790 <main+0x5d0>)
 8001738:	f004 f97c 	bl	8005a34 <HAL_GPIO_ReadPin>
 800173c:	4603      	mov	r3, r0
 800173e:	2b01      	cmp	r3, #1
 8001740:	d105      	bne.n	800174e <main+0x58e>
				share_speed_val+=1;
 8001742:	4b2f      	ldr	r3, [pc, #188]	; (8001800 <main+0x640>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <main+0x640>)
 800174c:	701a      	strb	r2, [r3, #0]
			}
			if(HAL_GPIO_ReadPin(share_speed_in_1_GPIO_Port, share_speed_in_1_Pin) == GPIO_PIN_SET){
 800174e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001752:	480f      	ldr	r0, [pc, #60]	; (8001790 <main+0x5d0>)
 8001754:	f004 f96e 	bl	8005a34 <HAL_GPIO_ReadPin>
 8001758:	4603      	mov	r3, r0
 800175a:	2b01      	cmp	r3, #1
 800175c:	d105      	bne.n	800176a <main+0x5aa>
				share_speed_val+=2;
 800175e:	4b28      	ldr	r3, [pc, #160]	; (8001800 <main+0x640>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	3302      	adds	r3, #2
 8001764:	b2da      	uxtb	r2, r3
 8001766:	4b26      	ldr	r3, [pc, #152]	; (8001800 <main+0x640>)
 8001768:	701a      	strb	r2, [r3, #0]
#if debug_mode ==1
			lcdSetCursor(0, 40);
			lcdPrintf("%d",share_speed_val);
#endif
#if debug_mode == 0
			lcdSetTextColor(COLOR_BLACK,COLOR_THEME_SKYBLUE_BASE);
 800176a:	f249 51bf 	movw	r1, #38335	; 0x95bf
 800176e:	2000      	movs	r0, #0
 8001770:	f008 fcd6 	bl	800a120 <lcdSetTextColor>
			lcdSetCursor(30+14*6, 85);
 8001774:	2155      	movs	r1, #85	; 0x55
 8001776:	2072      	movs	r0, #114	; 0x72
 8001778:	f008 fd56 	bl	800a228 <lcdSetCursor>
			lcdPrintf("%d",share_speed_val);
 800177c:	4b20      	ldr	r3, [pc, #128]	; (8001800 <main+0x640>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	4619      	mov	r1, r3
 8001782:	4820      	ldr	r0, [pc, #128]	; (8001804 <main+0x644>)
 8001784:	f008 fc30 	bl	8009fe8 <lcdPrintf>
#endif
			break;
 8001788:	f000 bc14 	b.w	8001fb4 <main+0xdf4>
 800178c:	20000508 	.word	0x20000508
 8001790:	40021400 	.word	0x40021400
 8001794:	20000034 	.word	0x20000034
 8001798:	08010770 	.word	0x08010770
 800179c:	080107a4 	.word	0x080107a4
 80017a0:	080107b8 	.word	0x080107b8
 80017a4:	080107c4 	.word	0x080107c4
 80017a8:	080107d0 	.word	0x080107d0
 80017ac:	20000844 	.word	0x20000844
 80017b0:	20000264 	.word	0x20000264
 80017b4:	2000000e 	.word	0x2000000e
 80017b8:	20000938 	.word	0x20000938
 80017bc:	20000940 	.word	0x20000940
 80017c0:	2000050c 	.word	0x2000050c
 80017c4:	200006e0 	.word	0x200006e0
 80017c8:	20000790 	.word	0x20000790
 80017cc:	20000255 	.word	0x20000255
 80017d0:	40020000 	.word	0x40020000
 80017d4:	20000285 	.word	0x20000285
 80017d8:	40020800 	.word	0x40020800
 80017dc:	20000286 	.word	0x20000286
 80017e0:	20000287 	.word	0x20000287
 80017e4:	40020400 	.word	0x40020400
 80017e8:	20000288 	.word	0x20000288
 80017ec:	40021800 	.word	0x40021800
 80017f0:	20000270 	.word	0x20000270
 80017f4:	2000025b 	.word	0x2000025b
 80017f8:	40021000 	.word	0x40021000
 80017fc:	20000284 	.word	0x20000284
 8001800:	2000026a 	.word	0x2000026a
 8001804:	080107dc 	.word	0x080107dc

		case F_FSR:
			/////////////////////////////////////////////////////
			//FSR
			HAL_ADC_Start(&hadc1);
 8001808:	4899      	ldr	r0, [pc, #612]	; (8001a70 <main+0x8b0>)
 800180a:	f003 f917 	bl	8004a3c <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc1, 100)==HAL_OK)
 800180e:	2164      	movs	r1, #100	; 0x64
 8001810:	4897      	ldr	r0, [pc, #604]	; (8001a70 <main+0x8b0>)
 8001812:	f003 f9e5 	bl	8004be0 <HAL_ADC_PollForConversion>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d15f      	bne.n	80018dc <main+0x71c>
			{
				adc_FSR=HAL_ADC_GetValue(&hadc1);
 800181c:	4894      	ldr	r0, [pc, #592]	; (8001a70 <main+0x8b0>)
 800181e:	f003 fbab 	bl	8004f78 <HAL_ADC_GetValue>
 8001822:	4603      	mov	r3, r0
 8001824:	b29a      	uxth	r2, r3
 8001826:	4b93      	ldr	r3, [pc, #588]	; (8001a74 <main+0x8b4>)
 8001828:	801a      	strh	r2, [r3, #0]
				if(adc_FSR>FSR_Sensity){
 800182a:	4b93      	ldr	r3, [pc, #588]	; (8001a78 <main+0x8b8>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b90      	ldr	r3, [pc, #576]	; (8001a74 <main+0x8b4>)
 8001832:	881b      	ldrh	r3, [r3, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d227      	bcs.n	8001888 <main+0x6c8>
					if(flag_seat<9)
 8001838:	4b90      	ldr	r3, [pc, #576]	; (8001a7c <main+0x8bc>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b08      	cmp	r3, #8
 800183e:	d805      	bhi.n	800184c <main+0x68c>
						flag_seat+=3;
 8001840:	4b8e      	ldr	r3, [pc, #568]	; (8001a7c <main+0x8bc>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	3303      	adds	r3, #3
 8001846:	b2da      	uxtb	r2, r3
 8001848:	4b8c      	ldr	r3, [pc, #560]	; (8001a7c <main+0x8bc>)
 800184a:	701a      	strb	r2, [r3, #0]

					if(flag_seat>=9)
 800184c:	4b8b      	ldr	r3, [pc, #556]	; (8001a7c <main+0x8bc>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b08      	cmp	r3, #8
 8001852:	d902      	bls.n	800185a <main+0x69a>
						flag_seat=9;
 8001854:	4b89      	ldr	r3, [pc, #548]	; (8001a7c <main+0x8bc>)
 8001856:	2209      	movs	r2, #9
 8001858:	701a      	strb	r2, [r3, #0]

					if(flag_motor_stop && flag_seat_off>0){
 800185a:	4b89      	ldr	r3, [pc, #548]	; (8001a80 <main+0x8c0>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00a      	beq.n	8001878 <main+0x6b8>
 8001862:	4b88      	ldr	r3, [pc, #544]	; (8001a84 <main+0x8c4>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <main+0x6b8>

						flag_seat_off-=1;
 800186a:	4b86      	ldr	r3, [pc, #536]	; (8001a84 <main+0x8c4>)
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	3b01      	subs	r3, #1
 8001870:	b2da      	uxtb	r2, r3
 8001872:	4b84      	ldr	r3, [pc, #528]	; (8001a84 <main+0x8c4>)
 8001874:	701a      	strb	r2, [r3, #0]
 8001876:	e029      	b.n	80018cc <main+0x70c>
					}
					else if(flag_motor_stop == 0){
 8001878:	4b81      	ldr	r3, [pc, #516]	; (8001a80 <main+0x8c0>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d125      	bne.n	80018cc <main+0x70c>
						flag_seat_off=0;
 8001880:	4b80      	ldr	r3, [pc, #512]	; (8001a84 <main+0x8c4>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
 8001886:	e021      	b.n	80018cc <main+0x70c>

				}


				else{
					if(flag_motor_stop && flag_seat_off<seat_off_value){
 8001888:	4b7d      	ldr	r3, [pc, #500]	; (8001a80 <main+0x8c0>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d00c      	beq.n	80018aa <main+0x6ea>
 8001890:	4b7c      	ldr	r3, [pc, #496]	; (8001a84 <main+0x8c4>)
 8001892:	781a      	ldrb	r2, [r3, #0]
 8001894:	4b7c      	ldr	r3, [pc, #496]	; (8001a88 <main+0x8c8>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d206      	bcs.n	80018aa <main+0x6ea>
						flag_seat_off+=1;
 800189c:	4b79      	ldr	r3, [pc, #484]	; (8001a84 <main+0x8c4>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	4b77      	ldr	r3, [pc, #476]	; (8001a84 <main+0x8c4>)
 80018a6:	701a      	strb	r2, [r3, #0]
 80018a8:	e006      	b.n	80018b8 <main+0x6f8>
					}
					else if(flag_motor_stop == 0){
 80018aa:	4b75      	ldr	r3, [pc, #468]	; (8001a80 <main+0x8c0>)
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <main+0x6f8>
						flag_seat_off=0;
 80018b2:	4b74      	ldr	r3, [pc, #464]	; (8001a84 <main+0x8c4>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	701a      	strb	r2, [r3, #0]
					}
					if(flag_seat>=1){
 80018b8:	4b70      	ldr	r3, [pc, #448]	; (8001a7c <main+0x8bc>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d005      	beq.n	80018cc <main+0x70c>
						flag_seat-=1;
 80018c0:	4b6e      	ldr	r3, [pc, #440]	; (8001a7c <main+0x8bc>)
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	3b01      	subs	r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b6c      	ldr	r3, [pc, #432]	; (8001a7c <main+0x8bc>)
 80018ca:	701a      	strb	r2, [r3, #0]
					if(flag_seat<0){
						flag_seat=0;
					}
				}

				if(flag_seat_off>=seat_off_value){
 80018cc:	4b6d      	ldr	r3, [pc, #436]	; (8001a84 <main+0x8c4>)
 80018ce:	781a      	ldrb	r2, [r3, #0]
 80018d0:	4b6d      	ldr	r3, [pc, #436]	; (8001a88 <main+0x8c8>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d301      	bcc.n	80018dc <main+0x71c>
					shutdown;
 80018d8:	f003 fecd 	bl	8005676 <HAL_NVIC_SystemReset>
				sprintf(adc_str,"adc_FSR: %05d  ",adc_FSR);
				lcdSetCursor(0, 20);
				lcdPrintf(adc_str);
#endif
			}
			if(flag_seat>=9){
 80018dc:	4b67      	ldr	r3, [pc, #412]	; (8001a7c <main+0x8bc>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d95f      	bls.n	80019a4 <main+0x7e4>
				HAL_GPIO_WritePin(share_seat_out_GPIO_Port, share_seat_out_Pin, SET);
 80018e4:	2201      	movs	r2, #1
 80018e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ea:	4868      	ldr	r0, [pc, #416]	; (8001a8c <main+0x8cc>)
 80018ec:	f004 f8ba 	bl	8005a64 <HAL_GPIO_WritePin>
#if debug_mode == 0
				if(flag_motor_seat_joy && flag_loop_seat!=1){
 80018f0:	4b67      	ldr	r3, [pc, #412]	; (8001a90 <main+0x8d0>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d025      	beq.n	8001944 <main+0x784>
 80018f8:	4b66      	ldr	r3, [pc, #408]	; (8001a94 <main+0x8d4>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d021      	beq.n	8001944 <main+0x784>
					lcdFillRoundRect(152, 80, 14*8 , 30, 5, COLOR_THEME_SKYBLUE_LIGHTER);
 8001900:	f24e 735f 	movw	r3, #59231	; 0xe75f
 8001904:	9301      	str	r3, [sp, #4]
 8001906:	2305      	movs	r3, #5
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	231e      	movs	r3, #30
 800190c:	2270      	movs	r2, #112	; 0x70
 800190e:	2150      	movs	r1, #80	; 0x50
 8001910:	2098      	movs	r0, #152	; 0x98
 8001912:	f008 fa59 	bl	8009dc8 <lcdFillRoundRect>
					lcdSetTextColor(COLOR_BLACK,COLOR_THEME_SKYBLUE_LIGHTER);
 8001916:	f24e 715f 	movw	r1, #59231	; 0xe75f
 800191a:	2000      	movs	r0, #0
 800191c:	f008 fc00 	bl	800a120 <lcdSetTextColor>
					lcdSetCursor(152, 85);
 8001920:	2155      	movs	r1, #85	; 0x55
 8001922:	2098      	movs	r0, #152	; 0x98
 8001924:	f008 fc80 	bl	800a228 <lcdSetCursor>
					lcdPrintf("Seat:   ");
 8001928:	485b      	ldr	r0, [pc, #364]	; (8001a98 <main+0x8d8>)
 800192a:	f008 fb5d 	bl	8009fe8 <lcdPrintf>
					lcdSetCursor(222, 85);
 800192e:	2155      	movs	r1, #85	; 0x55
 8001930:	20de      	movs	r0, #222	; 0xde
 8001932:	f008 fc79 	bl	800a228 <lcdSetCursor>
					lcdPrintf("on ");
 8001936:	4859      	ldr	r0, [pc, #356]	; (8001a9c <main+0x8dc>)
 8001938:	f008 fb56 	bl	8009fe8 <lcdPrintf>
					flag_loop_seat=1;
 800193c:	4b55      	ldr	r3, [pc, #340]	; (8001a94 <main+0x8d4>)
 800193e:	2201      	movs	r2, #1
 8001940:	701a      	strb	r2, [r3, #0]
 8001942:	e094      	b.n	8001a6e <main+0x8ae>
				}
				else if(flag_motor_seat_joy==0 && flag_loop_seat!=2){
 8001944:	4b52      	ldr	r3, [pc, #328]	; (8001a90 <main+0x8d0>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f040 8329 	bne.w	8001fa0 <main+0xde0>
 800194e:	4b51      	ldr	r3, [pc, #324]	; (8001a94 <main+0x8d4>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b02      	cmp	r3, #2
 8001954:	f000 8324 	beq.w	8001fa0 <main+0xde0>
					BEEP(2,10);
 8001958:	210a      	movs	r1, #10
 800195a:	2002      	movs	r0, #2
 800195c:	f002 f8b0 	bl	8003ac0 <BEEP>
					lcdFillRoundRect(152, 80, 14*8 , 30, 5, COLOR_THEME_VIOLET_LIGHTER);
 8001960:	f24c 4375 	movw	r3, #50293	; 0xc475
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	2305      	movs	r3, #5
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	231e      	movs	r3, #30
 800196c:	2270      	movs	r2, #112	; 0x70
 800196e:	2150      	movs	r1, #80	; 0x50
 8001970:	2098      	movs	r0, #152	; 0x98
 8001972:	f008 fa29 	bl	8009dc8 <lcdFillRoundRect>
					lcdSetTextColor(COLOR_BLACK,COLOR_THEME_VIOLET_LIGHTER);
 8001976:	f24c 4175 	movw	r1, #50293	; 0xc475
 800197a:	2000      	movs	r0, #0
 800197c:	f008 fbd0 	bl	800a120 <lcdSetTextColor>
					lcdSetCursor(152, 85);
 8001980:	2155      	movs	r1, #85	; 0x55
 8001982:	2098      	movs	r0, #152	; 0x98
 8001984:	f008 fc50 	bl	800a228 <lcdSetCursor>
					lcdPrintf("Seat:   ");
 8001988:	4843      	ldr	r0, [pc, #268]	; (8001a98 <main+0x8d8>)
 800198a:	f008 fb2d 	bl	8009fe8 <lcdPrintf>
					lcdSetCursor(222, 85);
 800198e:	2155      	movs	r1, #85	; 0x55
 8001990:	20de      	movs	r0, #222	; 0xde
 8001992:	f008 fc49 	bl	800a228 <lcdSetCursor>
					lcdPrintf("on ");
 8001996:	4841      	ldr	r0, [pc, #260]	; (8001a9c <main+0x8dc>)
 8001998:	f008 fb26 	bl	8009fe8 <lcdPrintf>
					flag_loop_seat=2;
 800199c:	4b3d      	ldr	r3, [pc, #244]	; (8001a94 <main+0x8d4>)
 800199e:	2202      	movs	r2, #2
 80019a0:	701a      	strb	r2, [r3, #0]
				}

#endif
			}

			break;
 80019a2:	e2fd      	b.n	8001fa0 <main+0xde0>
			else if(flag_seat==0){
 80019a4:	4b35      	ldr	r3, [pc, #212]	; (8001a7c <main+0x8bc>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f040 82f9 	bne.w	8001fa0 <main+0xde0>
				HAL_GPIO_WritePin(share_seat_out_GPIO_Port, share_seat_out_Pin, RESET);
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b4:	4835      	ldr	r0, [pc, #212]	; (8001a8c <main+0x8cc>)
 80019b6:	f004 f855 	bl	8005a64 <HAL_GPIO_WritePin>
				if(flag_motor_seat_joy && flag_loop_seat!=3){
 80019ba:	4b35      	ldr	r3, [pc, #212]	; (8001a90 <main+0x8d0>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d025      	beq.n	8001a0e <main+0x84e>
 80019c2:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <main+0x8d4>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d021      	beq.n	8001a0e <main+0x84e>
					lcdFillRoundRect(152, 80, 14*8 , 30, 5, COLOR_THEME_SKYBLUE_LIGHTER);
 80019ca:	f24e 735f 	movw	r3, #59231	; 0xe75f
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	2305      	movs	r3, #5
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	231e      	movs	r3, #30
 80019d6:	2270      	movs	r2, #112	; 0x70
 80019d8:	2150      	movs	r1, #80	; 0x50
 80019da:	2098      	movs	r0, #152	; 0x98
 80019dc:	f008 f9f4 	bl	8009dc8 <lcdFillRoundRect>
					lcdSetTextColor(COLOR_BLACK,COLOR_THEME_SKYBLUE_LIGHTER);
 80019e0:	f24e 715f 	movw	r1, #59231	; 0xe75f
 80019e4:	2000      	movs	r0, #0
 80019e6:	f008 fb9b 	bl	800a120 <lcdSetTextColor>
					lcdSetCursor(152, 85);
 80019ea:	2155      	movs	r1, #85	; 0x55
 80019ec:	2098      	movs	r0, #152	; 0x98
 80019ee:	f008 fc1b 	bl	800a228 <lcdSetCursor>
					lcdPrintf("Seat:   ");
 80019f2:	4829      	ldr	r0, [pc, #164]	; (8001a98 <main+0x8d8>)
 80019f4:	f008 faf8 	bl	8009fe8 <lcdPrintf>
					lcdSetCursor(222, 85);
 80019f8:	2155      	movs	r1, #85	; 0x55
 80019fa:	20de      	movs	r0, #222	; 0xde
 80019fc:	f008 fc14 	bl	800a228 <lcdSetCursor>
					lcdPrintf("off");
 8001a00:	4827      	ldr	r0, [pc, #156]	; (8001aa0 <main+0x8e0>)
 8001a02:	f008 faf1 	bl	8009fe8 <lcdPrintf>
					flag_loop_seat=3;
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <main+0x8d4>)
 8001a08:	2203      	movs	r2, #3
 8001a0a:	701a      	strb	r2, [r3, #0]
 8001a0c:	e02f      	b.n	8001a6e <main+0x8ae>
				else if(flag_motor_seat_joy==0 && flag_loop_seat!=4){
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <main+0x8d0>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	f040 82c4 	bne.w	8001fa0 <main+0xde0>
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <main+0x8d4>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b04      	cmp	r3, #4
 8001a1e:	f000 82bf 	beq.w	8001fa0 <main+0xde0>
					BEEP(2,10);
 8001a22:	210a      	movs	r1, #10
 8001a24:	2002      	movs	r0, #2
 8001a26:	f002 f84b 	bl	8003ac0 <BEEP>
					lcdFillRoundRect(152, 80, 14*8 , 30, 5, COLOR_THEME_VIOLET_LIGHTER);
 8001a2a:	f24c 4375 	movw	r3, #50293	; 0xc475
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	2305      	movs	r3, #5
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	231e      	movs	r3, #30
 8001a36:	2270      	movs	r2, #112	; 0x70
 8001a38:	2150      	movs	r1, #80	; 0x50
 8001a3a:	2098      	movs	r0, #152	; 0x98
 8001a3c:	f008 f9c4 	bl	8009dc8 <lcdFillRoundRect>
					lcdSetTextColor(COLOR_BLACK,COLOR_THEME_VIOLET_LIGHTER);
 8001a40:	f24c 4175 	movw	r1, #50293	; 0xc475
 8001a44:	2000      	movs	r0, #0
 8001a46:	f008 fb6b 	bl	800a120 <lcdSetTextColor>
					lcdSetCursor(152, 85);
 8001a4a:	2155      	movs	r1, #85	; 0x55
 8001a4c:	2098      	movs	r0, #152	; 0x98
 8001a4e:	f008 fbeb 	bl	800a228 <lcdSetCursor>
					lcdPrintf("Seat:   ");
 8001a52:	4811      	ldr	r0, [pc, #68]	; (8001a98 <main+0x8d8>)
 8001a54:	f008 fac8 	bl	8009fe8 <lcdPrintf>
					lcdSetCursor(222, 85);
 8001a58:	2155      	movs	r1, #85	; 0x55
 8001a5a:	20de      	movs	r0, #222	; 0xde
 8001a5c:	f008 fbe4 	bl	800a228 <lcdSetCursor>
					lcdPrintf("off");
 8001a60:	480f      	ldr	r0, [pc, #60]	; (8001aa0 <main+0x8e0>)
 8001a62:	f008 fac1 	bl	8009fe8 <lcdPrintf>
					flag_loop_seat=4;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <main+0x8d4>)
 8001a68:	2204      	movs	r2, #4
 8001a6a:	701a      	strb	r2, [r3, #0]
			break;
 8001a6c:	e298      	b.n	8001fa0 <main+0xde0>
 8001a6e:	e297      	b.n	8001fa0 <main+0xde0>
 8001a70:	20000638 	.word	0x20000638
 8001a74:	20000272 	.word	0x20000272
 8001a78:	20000280 	.word	0x20000280
 8001a7c:	20000282 	.word	0x20000282
 8001a80:	20000288 	.word	0x20000288
 8001a84:	20000283 	.word	0x20000283
 8001a88:	2000001a 	.word	0x2000001a
 8001a8c:	40021400 	.word	0x40021400
 8001a90:	20000284 	.word	0x20000284
 8001a94:	2000026b 	.word	0x2000026b
 8001a98:	080107c4 	.word	0x080107c4
 8001a9c:	080107e0 	.word	0x080107e0
 8001aa0:	080107e4 	.word	0x080107e4

		case F_BATTERY:

			//battery
			/////////////////////////////////////////////
			HAL_ADC_Start(&hadc3);
 8001aa4:	48b4      	ldr	r0, [pc, #720]	; (8001d78 <main+0xbb8>)
 8001aa6:	f002 ffc9 	bl	8004a3c <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc3, 100)==HAL_OK){
 8001aaa:	2164      	movs	r1, #100	; 0x64
 8001aac:	48b2      	ldr	r0, [pc, #712]	; (8001d78 <main+0xbb8>)
 8001aae:	f003 f897 	bl	8004be0 <HAL_ADC_PollForConversion>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d160      	bne.n	8001b7a <main+0x9ba>
				adc_battery=HAL_ADC_GetValue(&hadc3);
 8001ab8:	48af      	ldr	r0, [pc, #700]	; (8001d78 <main+0xbb8>)
 8001aba:	f003 fa5d 	bl	8004f78 <HAL_ADC_GetValue>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4bae      	ldr	r3, [pc, #696]	; (8001d7c <main+0xbbc>)
 8001ac4:	801a      	strh	r2, [r3, #0]
				battery_voltage=(float)adc_battery/4096.0*3.23*10.0;
 8001ac6:	4bad      	ldr	r3, [pc, #692]	; (8001d7c <main+0xbbc>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	ee07 3a90 	vmov	s15, r3
 8001ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ad2:	ee17 0a90 	vmov	r0, s15
 8001ad6:	f7fe fd47 	bl	8000568 <__aeabi_f2d>
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4ba8      	ldr	r3, [pc, #672]	; (8001d80 <main+0xbc0>)
 8001ae0:	f7fe fec4 	bl	800086c <__aeabi_ddiv>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	a3a0      	add	r3, pc, #640	; (adr r3, 8001d70 <main+0xbb0>)
 8001aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af2:	f7fe fd91 	bl	8000618 <__aeabi_dmul>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f04f 0200 	mov.w	r2, #0
 8001b02:	4ba0      	ldr	r3, [pc, #640]	; (8001d84 <main+0xbc4>)
 8001b04:	f7fe fd88 	bl	8000618 <__aeabi_dmul>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f7ff f87a 	bl	8000c08 <__aeabi_d2f>
 8001b14:	4603      	mov	r3, r0
 8001b16:	4a9c      	ldr	r2, [pc, #624]	; (8001d88 <main+0xbc8>)
 8001b18:	6013      	str	r3, [r2, #0]
				battery_percentage=(battery_voltage-16.5)/(use_battery_voltage-16.5)*100.0;
 8001b1a:	4b9b      	ldr	r3, [pc, #620]	; (8001d88 <main+0xbc8>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fd22 	bl	8000568 <__aeabi_f2d>
 8001b24:	f04f 0200 	mov.w	r2, #0
 8001b28:	4b98      	ldr	r3, [pc, #608]	; (8001d8c <main+0xbcc>)
 8001b2a:	f7fe fbbd 	bl	80002a8 <__aeabi_dsub>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4690      	mov	r8, r2
 8001b34:	4699      	mov	r9, r3
 8001b36:	4b96      	ldr	r3, [pc, #600]	; (8001d90 <main+0xbd0>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd14 	bl	8000568 <__aeabi_f2d>
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	4b91      	ldr	r3, [pc, #580]	; (8001d8c <main+0xbcc>)
 8001b46:	f7fe fbaf 	bl	80002a8 <__aeabi_dsub>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4640      	mov	r0, r8
 8001b50:	4649      	mov	r1, r9
 8001b52:	f7fe fe8b 	bl	800086c <__aeabi_ddiv>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4610      	mov	r0, r2
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 0200 	mov.w	r2, #0
 8001b62:	4b8c      	ldr	r3, [pc, #560]	; (8001d94 <main+0xbd4>)
 8001b64:	f7fe fd58 	bl	8000618 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7ff f84a 	bl	8000c08 <__aeabi_d2f>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4a88      	ldr	r2, [pc, #544]	; (8001d98 <main+0xbd8>)
 8001b78:	6013      	str	r3, [r2, #0]
			}


#if debug_mode == 0
			lcdSetTextColor(COLOR_BLACK,COLOR_THEME_LIMEGREEN_BASE);
 8001b7a:	f24d 71f0 	movw	r1, #55280	; 0xd7f0
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f008 face 	bl	800a120 <lcdSetTextColor>
			lcdSetCursor(30+14*6, 125);
 8001b84:	217d      	movs	r1, #125	; 0x7d
 8001b86:	2072      	movs	r0, #114	; 0x72
 8001b88:	f008 fb4e 	bl	800a228 <lcdSetCursor>
			if(battery_voltage<30 && battery_voltage>=16.5){
 8001b8c:	4b7e      	ldr	r3, [pc, #504]	; (8001d88 <main+0xbc8>)
 8001b8e:	edd3 7a00 	vldr	s15, [r3]
 8001b92:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b96:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b9e:	d400      	bmi.n	8001ba2 <main+0x9e2>
				lcdPrintf("%03.0f%%(%02.0fV)",battery_percentage,battery_voltage);
			}
#endif
			break;
 8001ba0:	e208      	b.n	8001fb4 <main+0xdf4>
			if(battery_voltage<30 && battery_voltage>=16.5){
 8001ba2:	4b79      	ldr	r3, [pc, #484]	; (8001d88 <main+0xbc8>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8001d9c <main+0xbdc>
 8001bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	da00      	bge.n	8001bb8 <main+0x9f8>
			break;
 8001bb6:	e1fd      	b.n	8001fb4 <main+0xdf4>
				lcdPrintf("%03.0f%%(%02.0fV)",battery_percentage,battery_voltage);
 8001bb8:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <main+0xbd8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7fe fcd3 	bl	8000568 <__aeabi_f2d>
 8001bc2:	4680      	mov	r8, r0
 8001bc4:	4689      	mov	r9, r1
 8001bc6:	4b70      	ldr	r3, [pc, #448]	; (8001d88 <main+0xbc8>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7fe fccc 	bl	8000568 <__aeabi_f2d>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	e9cd 2300 	strd	r2, r3, [sp]
 8001bd8:	4642      	mov	r2, r8
 8001bda:	464b      	mov	r3, r9
 8001bdc:	4870      	ldr	r0, [pc, #448]	; (8001da0 <main+0xbe0>)
 8001bde:	f008 fa03 	bl	8009fe8 <lcdPrintf>
			break;
 8001be2:	e1e7      	b.n	8001fb4 <main+0xdf4>

		case F_ULTRA:
			//ultra_
			//////////////////////////////////////////
			if(flag_motor_B_F==1){
 8001be4:	4b6f      	ldr	r3, [pc, #444]	; (8001da4 <main+0xbe4>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	f040 80ae 	bne.w	8001d4a <main+0xb8a>
				Ultra_Distance_Data();
 8001bee:	f001 ff97 	bl	8003b20 <Ultra_Distance_Data>
				beepforultra_1=0;
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <main+0xbe8>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
				if(ultra_distance1>=19){
 8001bf8:	4b6c      	ldr	r3, [pc, #432]	; (8001dac <main+0xbec>)
 8001bfa:	edd3 7a00 	vldr	s15, [r3]
 8001bfe:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8001c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	db48      	blt.n	8001c9e <main+0xade>
					if(ultra_distance1<45 )	beepforultra_1=5;
 8001c0c:	4b67      	ldr	r3, [pc, #412]	; (8001dac <main+0xbec>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8001db0 <main+0xbf0>
 8001c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1e:	d503      	bpl.n	8001c28 <main+0xa68>
 8001c20:	4b61      	ldr	r3, [pc, #388]	; (8001da8 <main+0xbe8>)
 8001c22:	2205      	movs	r2, #5
 8001c24:	701a      	strb	r2, [r3, #0]
 8001c26:	e03a      	b.n	8001c9e <main+0xade>
					else if(ultra_distance1<55 )	beepforultra_1=4;
 8001c28:	4b60      	ldr	r3, [pc, #384]	; (8001dac <main+0xbec>)
 8001c2a:	edd3 7a00 	vldr	s15, [r3]
 8001c2e:	ed9f 7a61 	vldr	s14, [pc, #388]	; 8001db4 <main+0xbf4>
 8001c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	d503      	bpl.n	8001c44 <main+0xa84>
 8001c3c:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <main+0xbe8>)
 8001c3e:	2204      	movs	r2, #4
 8001c40:	701a      	strb	r2, [r3, #0]
 8001c42:	e02c      	b.n	8001c9e <main+0xade>
					else if(ultra_distance1<85 )	beepforultra_1=3;
 8001c44:	4b59      	ldr	r3, [pc, #356]	; (8001dac <main+0xbec>)
 8001c46:	edd3 7a00 	vldr	s15, [r3]
 8001c4a:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001db8 <main+0xbf8>
 8001c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c56:	d503      	bpl.n	8001c60 <main+0xaa0>
 8001c58:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <main+0xbe8>)
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	701a      	strb	r2, [r3, #0]
 8001c5e:	e01e      	b.n	8001c9e <main+0xade>
					else if(ultra_distance1<125 )	beepforultra_1=2;
 8001c60:	4b52      	ldr	r3, [pc, #328]	; (8001dac <main+0xbec>)
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8001dbc <main+0xbfc>
 8001c6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c72:	d503      	bpl.n	8001c7c <main+0xabc>
 8001c74:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <main+0xbe8>)
 8001c76:	2202      	movs	r2, #2
 8001c78:	701a      	strb	r2, [r3, #0]
 8001c7a:	e010      	b.n	8001c9e <main+0xade>
					else if(ultra_distance1<200 )	beepforultra_1=1;
 8001c7c:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <main+0xbec>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8001dc0 <main+0xc00>
 8001c86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8e:	d503      	bpl.n	8001c98 <main+0xad8>
 8001c90:	4b45      	ldr	r3, [pc, #276]	; (8001da8 <main+0xbe8>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	e002      	b.n	8001c9e <main+0xade>
					else	beepforultra_1=0;
 8001c98:	4b43      	ldr	r3, [pc, #268]	; (8001da8 <main+0xbe8>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
				}
				beepforultra_2=0;
 8001c9e:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <main+0xc04>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
				if(ultra_distance2>=19){
 8001ca4:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <main+0xc08>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8001cae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb6:	db48      	blt.n	8001d4a <main+0xb8a>
					if(ultra_distance2<45 )	beepforultra_2=5;
 8001cb8:	4b43      	ldr	r3, [pc, #268]	; (8001dc8 <main+0xc08>)
 8001cba:	edd3 7a00 	vldr	s15, [r3]
 8001cbe:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001db0 <main+0xbf0>
 8001cc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cca:	d503      	bpl.n	8001cd4 <main+0xb14>
 8001ccc:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <main+0xc04>)
 8001cce:	2205      	movs	r2, #5
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e03a      	b.n	8001d4a <main+0xb8a>
					else if(ultra_distance2<55 )	beepforultra_2=4;
 8001cd4:	4b3c      	ldr	r3, [pc, #240]	; (8001dc8 <main+0xc08>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001db4 <main+0xbf4>
 8001cde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ce6:	d503      	bpl.n	8001cf0 <main+0xb30>
 8001ce8:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <main+0xc04>)
 8001cea:	2204      	movs	r2, #4
 8001cec:	701a      	strb	r2, [r3, #0]
 8001cee:	e02c      	b.n	8001d4a <main+0xb8a>
					else if(ultra_distance2<85 )	beepforultra_2=3;
 8001cf0:	4b35      	ldr	r3, [pc, #212]	; (8001dc8 <main+0xc08>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001db8 <main+0xbf8>
 8001cfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d02:	d503      	bpl.n	8001d0c <main+0xb4c>
 8001d04:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <main+0xc04>)
 8001d06:	2203      	movs	r2, #3
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e01e      	b.n	8001d4a <main+0xb8a>
					else if(ultra_distance2<125)	beepforultra_2=2;
 8001d0c:	4b2e      	ldr	r3, [pc, #184]	; (8001dc8 <main+0xc08>)
 8001d0e:	edd3 7a00 	vldr	s15, [r3]
 8001d12:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001dbc <main+0xbfc>
 8001d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1e:	d503      	bpl.n	8001d28 <main+0xb68>
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <main+0xc04>)
 8001d22:	2202      	movs	r2, #2
 8001d24:	701a      	strb	r2, [r3, #0]
 8001d26:	e010      	b.n	8001d4a <main+0xb8a>
					else if(ultra_distance2<200)	beepforultra_2=1;
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <main+0xc08>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001dc0 <main+0xc00>
 8001d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d3a:	d503      	bpl.n	8001d44 <main+0xb84>
 8001d3c:	4b21      	ldr	r3, [pc, #132]	; (8001dc4 <main+0xc04>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	e002      	b.n	8001d4a <main+0xb8a>
					else	beepforultra_2=0;
 8001d44:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <main+0xc04>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	701a      	strb	r2, [r3, #0]
				}
			}

			if(beepforultra_1<beepforultra_2){
 8001d4a:	4b17      	ldr	r3, [pc, #92]	; (8001da8 <main+0xbe8>)
 8001d4c:	781a      	ldrb	r2, [r3, #0]
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	; (8001dc4 <main+0xc04>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d204      	bcs.n	8001d60 <main+0xba0>
				beepforultra=beepforultra_1;
 8001d56:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <main+0xbe8>)
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <main+0xc0c>)
 8001d5c:	701a      	strb	r2, [r3, #0]
			}
			else{
				beepforultra=beepforultra_2;
			}

			break;
 8001d5e:	e129      	b.n	8001fb4 <main+0xdf4>
				beepforultra=beepforultra_2;
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <main+0xc04>)
 8001d62:	781a      	ldrb	r2, [r3, #0]
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <main+0xc0c>)
 8001d66:	701a      	strb	r2, [r3, #0]
			break;
 8001d68:	e124      	b.n	8001fb4 <main+0xdf4>
 8001d6a:	bf00      	nop
 8001d6c:	f3af 8000 	nop.w
 8001d70:	3d70a3d7 	.word	0x3d70a3d7
 8001d74:	4009d70a 	.word	0x4009d70a
 8001d78:	20000680 	.word	0x20000680
 8001d7c:	20000276 	.word	0x20000276
 8001d80:	40b00000 	.word	0x40b00000
 8001d84:	40240000 	.word	0x40240000
 8001d88:	20000278 	.word	0x20000278
 8001d8c:	40308000 	.word	0x40308000
 8001d90:	20000014 	.word	0x20000014
 8001d94:	40590000 	.word	0x40590000
 8001d98:	2000027c 	.word	0x2000027c
 8001d9c:	41840000 	.word	0x41840000
 8001da0:	080107e8 	.word	0x080107e8
 8001da4:	20000287 	.word	0x20000287
 8001da8:	2000026e 	.word	0x2000026e
 8001dac:	200005f0 	.word	0x200005f0
 8001db0:	42340000 	.word	0x42340000
 8001db4:	425c0000 	.word	0x425c0000
 8001db8:	42aa0000 	.word	0x42aa0000
 8001dbc:	42fa0000 	.word	0x42fa0000
 8001dc0:	43480000 	.word	0x43480000
 8001dc4:	2000026f 	.word	0x2000026f
 8001dc8:	2000078c 	.word	0x2000078c
 8001dcc:	2000026d 	.word	0x2000026d


		case F_CDS:
			////////////////////////////////////////////
			//CDS
			HAL_ADC_Start(&hadc2);
 8001dd0:	4879      	ldr	r0, [pc, #484]	; (8001fb8 <main+0xdf8>)
 8001dd2:	f002 fe33 	bl	8004a3c <HAL_ADC_Start>
			if(HAL_ADC_PollForConversion(&hadc2, 100)==HAL_OK)
 8001dd6:	2164      	movs	r1, #100	; 0x64
 8001dd8:	4877      	ldr	r0, [pc, #476]	; (8001fb8 <main+0xdf8>)
 8001dda:	f002 ff01 	bl	8004be0 <HAL_ADC_PollForConversion>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d123      	bne.n	8001e2c <main+0xc6c>
			{
				adc_CDS=HAL_ADC_GetValue(&hadc2);
 8001de4:	4874      	ldr	r0, [pc, #464]	; (8001fb8 <main+0xdf8>)
 8001de6:	f003 f8c7 	bl	8004f78 <HAL_ADC_GetValue>
 8001dea:	4603      	mov	r3, r0
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	4b73      	ldr	r3, [pc, #460]	; (8001fbc <main+0xdfc>)
 8001df0:	801a      	strh	r2, [r3, #0]
				if(adc_CDS<1200){
 8001df2:	4b72      	ldr	r3, [pc, #456]	; (8001fbc <main+0xdfc>)
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001dfa:	d20d      	bcs.n	8001e18 <main+0xc58>
					flag_autoLight+=3;
 8001dfc:	4b70      	ldr	r3, [pc, #448]	; (8001fc0 <main+0xe00>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	3303      	adds	r3, #3
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	4b6e      	ldr	r3, [pc, #440]	; (8001fc0 <main+0xe00>)
 8001e06:	701a      	strb	r2, [r3, #0]
					if(flag_autoLight>9)
 8001e08:	4b6d      	ldr	r3, [pc, #436]	; (8001fc0 <main+0xe00>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	d90d      	bls.n	8001e2c <main+0xc6c>
						flag_autoLight=9;
 8001e10:	4b6b      	ldr	r3, [pc, #428]	; (8001fc0 <main+0xe00>)
 8001e12:	2209      	movs	r2, #9
 8001e14:	701a      	strb	r2, [r3, #0]
 8001e16:	e009      	b.n	8001e2c <main+0xc6c>
				}
				else{
					if(flag_autoLight>0)
 8001e18:	4b69      	ldr	r3, [pc, #420]	; (8001fc0 <main+0xe00>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <main+0xc6c>
						flag_autoLight-=1;
 8001e20:	4b67      	ldr	r3, [pc, #412]	; (8001fc0 <main+0xe00>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b2da      	uxtb	r2, r3
 8001e28:	4b65      	ldr	r3, [pc, #404]	; (8001fc0 <main+0xe00>)
 8001e2a:	701a      	strb	r2, [r3, #0]
				sprintf(adc_str,"adc_CDS: %05d  ",adc_CDS);
				lcdSetCursor(0, 120);
				lcdPrintf(adc_str);
#endif
			}
			if(flag_autoLight>=9){
 8001e2c:	4b64      	ldr	r3, [pc, #400]	; (8001fc0 <main+0xe00>)
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b08      	cmp	r3, #8
 8001e32:	d90c      	bls.n	8001e4e <main+0xc8e>
				HAL_GPIO_WritePin(Relay_Front_Light_GPIO_Port, Relay_Front_Light_Pin, SET);
 8001e34:	2201      	movs	r2, #1
 8001e36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e3a:	4862      	ldr	r0, [pc, #392]	; (8001fc4 <main+0xe04>)
 8001e3c:	f003 fe12 	bl	8005a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Relay_Back_Light_GPIO_Port, Relay_Back_Light_Pin, SET);
 8001e40:	2201      	movs	r2, #1
 8001e42:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e46:	4860      	ldr	r0, [pc, #384]	; (8001fc8 <main+0xe08>)
 8001e48:	f003 fe0c 	bl	8005a64 <HAL_GPIO_WritePin>
			}
			else if(flag_autoLight==0){
				HAL_GPIO_WritePin(Relay_Front_Light_GPIO_Port, Relay_Front_Light_Pin, RESET);
				HAL_GPIO_WritePin(Relay_Back_Light_GPIO_Port, Relay_Back_Light_Pin, RESET);
			}
			break;
 8001e4c:	e0ab      	b.n	8001fa6 <main+0xde6>
			else if(flag_autoLight==0){
 8001e4e:	4b5c      	ldr	r3, [pc, #368]	; (8001fc0 <main+0xe00>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 80a7 	bne.w	8001fa6 <main+0xde6>
				HAL_GPIO_WritePin(Relay_Front_Light_GPIO_Port, Relay_Front_Light_Pin, RESET);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e5e:	4859      	ldr	r0, [pc, #356]	; (8001fc4 <main+0xe04>)
 8001e60:	f003 fe00 	bl	8005a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Relay_Back_Light_GPIO_Port, Relay_Back_Light_Pin, RESET);
 8001e64:	2200      	movs	r2, #0
 8001e66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e6a:	4857      	ldr	r0, [pc, #348]	; (8001fc8 <main+0xe08>)
 8001e6c:	f003 fdfa 	bl	8005a64 <HAL_GPIO_WritePin>
			break;
 8001e70:	e099      	b.n	8001fa6 <main+0xde6>

		case F_MPU6050:
			///////////////////////////////////////////
			//MPU6050
			if(angleY >0){
 8001e72:	4b56      	ldr	r3, [pc, #344]	; (8001fcc <main+0xe0c>)
 8001e74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e78:	f04f 0200 	mov.w	r2, #0
 8001e7c:	f04f 0300 	mov.w	r3, #0
 8001e80:	f7fe fe5a 	bl	8000b38 <__aeabi_dcmpgt>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d02b      	beq.n	8001ee2 <main+0xd22>
				if(angleY > angle_Y_limt){
 8001e8a:	4b51      	ldr	r3, [pc, #324]	; (8001fd0 <main+0xe10>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe fb58 	bl	8000544 <__aeabi_i2d>
 8001e94:	4b4d      	ldr	r3, [pc, #308]	; (8001fcc <main+0xe0c>)
 8001e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e9a:	f7fe fe2f 	bl	8000afc <__aeabi_dcmplt>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d100      	bne.n	8001ea6 <main+0xce6>
					}
					if(flag_Waring_angle == 5)
						BEEP(1,7);
				}
			}
			break;
 8001ea4:	e082      	b.n	8001fac <main+0xdec>
					if(flag_Waring_angle<5){
 8001ea6:	4b4b      	ldr	r3, [pc, #300]	; (8001fd4 <main+0xe14>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b04      	cmp	r3, #4
 8001eac:	d806      	bhi.n	8001ebc <main+0xcfc>
						flag_Waring_angle+=1;
 8001eae:	4b49      	ldr	r3, [pc, #292]	; (8001fd4 <main+0xe14>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <main+0xe14>)
 8001eb8:	701a      	strb	r2, [r3, #0]
 8001eba:	e009      	b.n	8001ed0 <main+0xd10>
						if(flag_Waring_angle>0)
 8001ebc:	4b45      	ldr	r3, [pc, #276]	; (8001fd4 <main+0xe14>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <main+0xd10>
							flag_Waring_angle-=1;
 8001ec4:	4b43      	ldr	r3, [pc, #268]	; (8001fd4 <main+0xe14>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <main+0xe14>)
 8001ece:	701a      	strb	r2, [r3, #0]
					if(flag_Waring_angle == 5)
 8001ed0:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <main+0xe14>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b05      	cmp	r3, #5
 8001ed6:	d169      	bne.n	8001fac <main+0xdec>
						BEEP(1,7);
 8001ed8:	2107      	movs	r1, #7
 8001eda:	2001      	movs	r0, #1
 8001edc:	f001 fdf0 	bl	8003ac0 <BEEP>
			break;
 8001ee0:	e064      	b.n	8001fac <main+0xdec>
				if(-angleY > angle_Y_limt){
 8001ee2:	4b3a      	ldr	r3, [pc, #232]	; (8001fcc <main+0xe0c>)
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	4614      	mov	r4, r2
 8001eea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001eee:	4b38      	ldr	r3, [pc, #224]	; (8001fd0 <main+0xe10>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7fe fb26 	bl	8000544 <__aeabi_i2d>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4620      	mov	r0, r4
 8001efe:	4629      	mov	r1, r5
 8001f00:	f7fe fe1a 	bl	8000b38 <__aeabi_dcmpgt>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d100      	bne.n	8001f0c <main+0xd4c>
			break;
 8001f0a:	e04f      	b.n	8001fac <main+0xdec>
					if(flag_Waring_angle < 5){
 8001f0c:	4b31      	ldr	r3, [pc, #196]	; (8001fd4 <main+0xe14>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d806      	bhi.n	8001f22 <main+0xd62>
						flag_Waring_angle+=1;
 8001f14:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <main+0xe14>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	3301      	adds	r3, #1
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <main+0xe14>)
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	e009      	b.n	8001f36 <main+0xd76>
						if(flag_Waring_angle > 0)
 8001f22:	4b2c      	ldr	r3, [pc, #176]	; (8001fd4 <main+0xe14>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <main+0xd76>
							flag_Waring_angle-=1;
 8001f2a:	4b2a      	ldr	r3, [pc, #168]	; (8001fd4 <main+0xe14>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b2da      	uxtb	r2, r3
 8001f32:	4b28      	ldr	r3, [pc, #160]	; (8001fd4 <main+0xe14>)
 8001f34:	701a      	strb	r2, [r3, #0]
					if(flag_Waring_angle == 5)
 8001f36:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <main+0xe14>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d136      	bne.n	8001fac <main+0xdec>
						BEEP(1,7);
 8001f3e:	2107      	movs	r1, #7
 8001f40:	2001      	movs	r0, #1
 8001f42:	f001 fdbd 	bl	8003ac0 <BEEP>
			break;
 8001f46:	e031      	b.n	8001fac <main+0xdec>
			dht11_print();
			//MPU6050
			MPU6050_printAngle(MPU_milliseconds);
#else
			//DHT11
			if(dht11_read()==1){
 8001f48:	f001 f9ea 	bl	8003320 <dht11_read>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d12f      	bne.n	8001fb2 <main+0xdf2>
				sprintf(DHT_11_print,"%02dC",Temperature);
 8001f52:	4b21      	ldr	r3, [pc, #132]	; (8001fd8 <main+0xe18>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	4920      	ldr	r1, [pc, #128]	; (8001fdc <main+0xe1c>)
 8001f5a:	4821      	ldr	r0, [pc, #132]	; (8001fe0 <main+0xe20>)
 8001f5c:	f00a fbbe 	bl	800c6dc <siprintf>
				lcdSetTextColor(COLOR_BLACK,COLOR_GRAY_225);
 8001f60:	f24e 711c 	movw	r1, #59164	; 0xe71c
 8001f64:	2000      	movs	r0, #0
 8001f66:	f008 f8db 	bl	800a120 <lcdSetTextColor>
				lcdSetCursor(104, 45);
 8001f6a:	212d      	movs	r1, #45	; 0x2d
 8001f6c:	2068      	movs	r0, #104	; 0x68
 8001f6e:	f008 f95b 	bl	800a228 <lcdSetCursor>
				lcdPrintf(DHT_11_print);
 8001f72:	481b      	ldr	r0, [pc, #108]	; (8001fe0 <main+0xe20>)
 8001f74:	f008 f838 	bl	8009fe8 <lcdPrintf>

				sprintf(DHT_11_print,"%02d %%",Humidity);
 8001f78:	4b1a      	ldr	r3, [pc, #104]	; (8001fe4 <main+0xe24>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	491a      	ldr	r1, [pc, #104]	; (8001fe8 <main+0xe28>)
 8001f80:	4817      	ldr	r0, [pc, #92]	; (8001fe0 <main+0xe20>)
 8001f82:	f00a fbab 	bl	800c6dc <siprintf>
				lcdSetTextColor(COLOR_BLACK,COLOR_GRAY_225);
 8001f86:	f24e 711c 	movw	r1, #59164	; 0xe71c
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f008 f8c8 	bl	800a120 <lcdSetTextColor>
				lcdSetCursor(216, 45);
 8001f90:	212d      	movs	r1, #45	; 0x2d
 8001f92:	20d8      	movs	r0, #216	; 0xd8
 8001f94:	f008 f948 	bl	800a228 <lcdSetCursor>
				lcdPrintf(DHT_11_print);
 8001f98:	4811      	ldr	r0, [pc, #68]	; (8001fe0 <main+0xe20>)
 8001f9a:	f008 f825 	bl	8009fe8 <lcdPrintf>
			}
#endif
			break;
 8001f9e:	e008      	b.n	8001fb2 <main+0xdf2>
			break;
 8001fa0:	bf00      	nop
 8001fa2:	f7ff bb21 	b.w	80015e8 <main+0x428>
			break;
 8001fa6:	bf00      	nop
 8001fa8:	f7ff bb1e 	b.w	80015e8 <main+0x428>
			break;
 8001fac:	bf00      	nop
 8001fae:	f7ff bb1b 	b.w	80015e8 <main+0x428>
			break;
 8001fb2:	bf00      	nop
		F_active=0;
 8001fb4:	f7ff bb18 	b.w	80015e8 <main+0x428>
 8001fb8:	2000046c 	.word	0x2000046c
 8001fbc:	20000274 	.word	0x20000274
 8001fc0:	20000281 	.word	0x20000281
 8001fc4:	40021400 	.word	0x40021400
 8001fc8:	40020800 	.word	0x40020800
 8001fcc:	20000b50 	.word	0x20000b50
 8001fd0:	20000012 	.word	0x20000012
 8001fd4:	20000271 	.word	0x20000271
 8001fd8:	2000025c 	.word	0x2000025c
 8001fdc:	080107fc 	.word	0x080107fc
 8001fe0:	200006c8 	.word	0x200006c8
 8001fe4:	20000260 	.word	0x20000260
 8001fe8:	08010804 	.word	0x08010804

08001fec <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b094      	sub	sp, #80	; 0x50
 8001ff0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ff2:	f107 0320 	add.w	r3, r7, #32
 8001ff6:	2230      	movs	r2, #48	; 0x30
 8001ff8:	2100      	movs	r1, #0
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f009 fc58 	bl	800b8b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002000:	f107 030c 	add.w	r3, r7, #12
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <SystemClock_Config+0xcc>)
 8002016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002018:	4a27      	ldr	r2, [pc, #156]	; (80020b8 <SystemClock_Config+0xcc>)
 800201a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201e:	6413      	str	r3, [r2, #64]	; 0x40
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <SystemClock_Config+0xcc>)
 8002022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800202c:	2300      	movs	r3, #0
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <SystemClock_Config+0xd0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a21      	ldr	r2, [pc, #132]	; (80020bc <SystemClock_Config+0xd0>)
 8002036:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <SystemClock_Config+0xd0>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002044:	607b      	str	r3, [r7, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002048:	2301      	movs	r3, #1
 800204a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800204c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002050:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002052:	2302      	movs	r3, #2
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002056:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800205a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800205c:	2304      	movs	r3, #4
 800205e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8002060:	23a8      	movs	r3, #168	; 0xa8
 8002062:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002064:	2302      	movs	r3, #2
 8002066:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002068:	2304      	movs	r3, #4
 800206a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800206c:	f107 0320 	add.w	r3, r7, #32
 8002070:	4618      	mov	r0, r3
 8002072:	f004 fec7 	bl	8006e04 <HAL_RCC_OscConfig>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <SystemClock_Config+0x94>
	{
		Error_Handler();
 800207c:	f001 fe66 	bl	8003d4c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002080:	230f      	movs	r3, #15
 8002082:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002084:	2302      	movs	r3, #2
 8002086:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002088:	2300      	movs	r3, #0
 800208a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800208c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002090:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002092:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002096:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002098:	f107 030c 	add.w	r3, r7, #12
 800209c:	2105      	movs	r1, #5
 800209e:	4618      	mov	r0, r3
 80020a0:	f005 f928 	bl	80072f4 <HAL_RCC_ClockConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80020aa:	f001 fe4f 	bl	8003d4c <Error_Handler>
	}
}
 80020ae:	bf00      	nop
 80020b0:	3750      	adds	r7, #80	; 0x50
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40007000 	.word	0x40007000

080020c0 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80020c6:	463b      	mov	r3, r7
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
 80020ce:	609a      	str	r2, [r3, #8]
 80020d0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80020d2:	4b21      	ldr	r3, [pc, #132]	; (8002158 <MX_ADC1_Init+0x98>)
 80020d4:	4a21      	ldr	r2, [pc, #132]	; (800215c <MX_ADC1_Init+0x9c>)
 80020d6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020d8:	4b1f      	ldr	r3, [pc, #124]	; (8002158 <MX_ADC1_Init+0x98>)
 80020da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80020de:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020e0:	4b1d      	ldr	r3, [pc, #116]	; (8002158 <MX_ADC1_Init+0x98>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 80020e6:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <MX_ADC1_Init+0x98>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80020ec:	4b1a      	ldr	r3, [pc, #104]	; (8002158 <MX_ADC1_Init+0x98>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020f2:	4b19      	ldr	r3, [pc, #100]	; (8002158 <MX_ADC1_Init+0x98>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020fa:	4b17      	ldr	r3, [pc, #92]	; (8002158 <MX_ADC1_Init+0x98>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002100:	4b15      	ldr	r3, [pc, #84]	; (8002158 <MX_ADC1_Init+0x98>)
 8002102:	4a17      	ldr	r2, [pc, #92]	; (8002160 <MX_ADC1_Init+0xa0>)
 8002104:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002106:	4b14      	ldr	r3, [pc, #80]	; (8002158 <MX_ADC1_Init+0x98>)
 8002108:	2200      	movs	r2, #0
 800210a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 800210c:	4b12      	ldr	r3, [pc, #72]	; (8002158 <MX_ADC1_Init+0x98>)
 800210e:	2201      	movs	r2, #1
 8002110:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002112:	4b11      	ldr	r3, [pc, #68]	; (8002158 <MX_ADC1_Init+0x98>)
 8002114:	2200      	movs	r2, #0
 8002116:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <MX_ADC1_Init+0x98>)
 800211c:	2201      	movs	r2, #1
 800211e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002120:	480d      	ldr	r0, [pc, #52]	; (8002158 <MX_ADC1_Init+0x98>)
 8002122:	f002 fc47 	bl	80049b4 <HAL_ADC_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 800212c:	f001 fe0e 	bl	8003d4c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8002130:	2307      	movs	r3, #7
 8002132:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8002134:	2301      	movs	r3, #1
 8002136:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002138:	2300      	movs	r3, #0
 800213a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800213c:	463b      	mov	r3, r7
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_ADC1_Init+0x98>)
 8002142:	f002 ff45 	bl	8004fd0 <HAL_ADC_ConfigChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 800214c:	f001 fdfe 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000638 	.word	0x20000638
 800215c:	40012000 	.word	0x40012000
 8002160:	0f000001 	.word	0x0f000001

08002164 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800216a:	463b      	mov	r3, r7
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <MX_ADC2_Init+0x98>)
 8002178:	4a21      	ldr	r2, [pc, #132]	; (8002200 <MX_ADC2_Init+0x9c>)
 800217a:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <MX_ADC2_Init+0x98>)
 800217e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002182:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002184:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <MX_ADC2_Init+0x98>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 800218a:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <MX_ADC2_Init+0x98>)
 800218c:	2200      	movs	r2, #0
 800218e:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8002190:	4b1a      	ldr	r3, [pc, #104]	; (80021fc <MX_ADC2_Init+0x98>)
 8002192:	2200      	movs	r2, #0
 8002194:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002196:	4b19      	ldr	r3, [pc, #100]	; (80021fc <MX_ADC2_Init+0x98>)
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800219e:	4b17      	ldr	r3, [pc, #92]	; (80021fc <MX_ADC2_Init+0x98>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021a4:	4b15      	ldr	r3, [pc, #84]	; (80021fc <MX_ADC2_Init+0x98>)
 80021a6:	4a17      	ldr	r2, [pc, #92]	; (8002204 <MX_ADC2_Init+0xa0>)
 80021a8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021aa:	4b14      	ldr	r3, [pc, #80]	; (80021fc <MX_ADC2_Init+0x98>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <MX_ADC2_Init+0x98>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80021b6:	4b11      	ldr	r3, [pc, #68]	; (80021fc <MX_ADC2_Init+0x98>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021be:	4b0f      	ldr	r3, [pc, #60]	; (80021fc <MX_ADC2_Init+0x98>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80021c4:	480d      	ldr	r0, [pc, #52]	; (80021fc <MX_ADC2_Init+0x98>)
 80021c6:	f002 fbf5 	bl	80049b4 <HAL_ADC_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_ADC2_Init+0x70>
	{
		Error_Handler();
 80021d0:	f001 fdbc 	bl	8003d4c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 80021d4:	2309      	movs	r3, #9
 80021d6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 80021d8:	2301      	movs	r3, #1
 80021da:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80021dc:	2300      	movs	r3, #0
 80021de:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80021e0:	463b      	mov	r3, r7
 80021e2:	4619      	mov	r1, r3
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_ADC2_Init+0x98>)
 80021e6:	f002 fef3 	bl	8004fd0 <HAL_ADC_ConfigChannel>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_ADC2_Init+0x90>
	{
		Error_Handler();
 80021f0:	f001 fdac 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 80021f4:	bf00      	nop
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	2000046c 	.word	0x2000046c
 8002200:	40012100 	.word	0x40012100
 8002204:	0f000001 	.word	0x0f000001

08002208 <MX_ADC3_Init>:
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800220e:	463b      	mov	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC3_Init 1 */

	/* USER CODE END ADC3_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc3.Instance = ADC3;
 800221a:	4b21      	ldr	r3, [pc, #132]	; (80022a0 <MX_ADC3_Init+0x98>)
 800221c:	4a21      	ldr	r2, [pc, #132]	; (80022a4 <MX_ADC3_Init+0x9c>)
 800221e:	601a      	str	r2, [r3, #0]
	hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002220:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <MX_ADC3_Init+0x98>)
 8002222:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002226:	605a      	str	r2, [r3, #4]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <MX_ADC3_Init+0x98>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = DISABLE;
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <MX_ADC3_Init+0x98>)
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]
	hadc3.Init.ContinuousConvMode = DISABLE;
 8002234:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <MX_ADC3_Init+0x98>)
 8002236:	2200      	movs	r2, #0
 8002238:	761a      	strb	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 800223a:	4b19      	ldr	r3, [pc, #100]	; (80022a0 <MX_ADC3_Init+0x98>)
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002242:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <MX_ADC3_Init+0x98>)
 8002244:	2200      	movs	r2, #0
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002248:	4b15      	ldr	r3, [pc, #84]	; (80022a0 <MX_ADC3_Init+0x98>)
 800224a:	4a17      	ldr	r2, [pc, #92]	; (80022a8 <MX_ADC3_Init+0xa0>)
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <MX_ADC3_Init+0x98>)
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
	hadc3.Init.NbrOfConversion = 1;
 8002254:	4b12      	ldr	r3, [pc, #72]	; (80022a0 <MX_ADC3_Init+0x98>)
 8002256:	2201      	movs	r2, #1
 8002258:	61da      	str	r2, [r3, #28]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 800225a:	4b11      	ldr	r3, [pc, #68]	; (80022a0 <MX_ADC3_Init+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002262:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <MX_ADC3_Init+0x98>)
 8002264:	2201      	movs	r2, #1
 8002266:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002268:	480d      	ldr	r0, [pc, #52]	; (80022a0 <MX_ADC3_Init+0x98>)
 800226a:	f002 fba3 	bl	80049b4 <HAL_ADC_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_ADC3_Init+0x70>
	{
		Error_Handler();
 8002274:	f001 fd6a 	bl	8003d4c <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 8002278:	230e      	movs	r3, #14
 800227a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800227c:	2301      	movs	r3, #1
 800227e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002280:	2300      	movs	r3, #0
 8002282:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002284:	463b      	mov	r3, r7
 8002286:	4619      	mov	r1, r3
 8002288:	4805      	ldr	r0, [pc, #20]	; (80022a0 <MX_ADC3_Init+0x98>)
 800228a:	f002 fea1 	bl	8004fd0 <HAL_ADC_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_ADC3_Init+0x90>
	{
		Error_Handler();
 8002294:	f001 fd5a 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000680 	.word	0x20000680
 80022a4:	40012200 	.word	0x40012200
 80022a8:	0f000001 	.word	0x0f000001

080022ac <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <MX_I2C1_Init+0x74>)
 80022b2:	4a1c      	ldr	r2, [pc, #112]	; (8002324 <MX_I2C1_Init+0x78>)
 80022b4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <MX_I2C1_Init+0x74>)
 80022b8:	4a1b      	ldr	r2, [pc, #108]	; (8002328 <MX_I2C1_Init+0x7c>)
 80022ba:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <MX_I2C1_Init+0x74>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80022c2:	4b17      	ldr	r3, [pc, #92]	; (8002320 <MX_I2C1_Init+0x74>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022c8:	4b15      	ldr	r3, [pc, #84]	; (8002320 <MX_I2C1_Init+0x74>)
 80022ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022ce:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80022d0:	4b13      	ldr	r3, [pc, #76]	; (8002320 <MX_I2C1_Init+0x74>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <MX_I2C1_Init+0x74>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80022dc:	4b10      	ldr	r3, [pc, #64]	; (8002320 <MX_I2C1_Init+0x74>)
 80022de:	2200      	movs	r2, #0
 80022e0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80022e2:	4b0f      	ldr	r3, [pc, #60]	; (8002320 <MX_I2C1_Init+0x74>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80022e8:	480d      	ldr	r0, [pc, #52]	; (8002320 <MX_I2C1_Init+0x74>)
 80022ea:	f003 fc07 	bl	8005afc <HAL_I2C_Init>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 80022f4:	f001 fd2a 	bl	8003d4c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80022f8:	2100      	movs	r1, #0
 80022fa:	4809      	ldr	r0, [pc, #36]	; (8002320 <MX_I2C1_Init+0x74>)
 80022fc:	f004 fceb 	bl	8006cd6 <HAL_I2CEx_ConfigAnalogFilter>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d001      	beq.n	800230a <MX_I2C1_Init+0x5e>
	{
		Error_Handler();
 8002306:	f001 fd21 	bl	8003d4c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800230a:	2100      	movs	r1, #0
 800230c:	4804      	ldr	r0, [pc, #16]	; (8002320 <MX_I2C1_Init+0x74>)
 800230e:	f004 fd1e 	bl	8006d4e <HAL_I2CEx_ConfigDigitalFilter>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_I2C1_Init+0x70>
	{
		Error_Handler();
 8002318:	f001 fd18 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}
 8002320:	200004b4 	.word	0x200004b4
 8002324:	40005400 	.word	0x40005400
 8002328:	00061a80 	.word	0x00061a80

0800232c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002330:	4b1b      	ldr	r3, [pc, #108]	; (80023a0 <MX_I2C2_Init+0x74>)
 8002332:	4a1c      	ldr	r2, [pc, #112]	; (80023a4 <MX_I2C2_Init+0x78>)
 8002334:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 400000;
 8002336:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <MX_I2C2_Init+0x74>)
 8002338:	4a1b      	ldr	r2, [pc, #108]	; (80023a8 <MX_I2C2_Init+0x7c>)
 800233a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800233c:	4b18      	ldr	r3, [pc, #96]	; (80023a0 <MX_I2C2_Init+0x74>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8002342:	4b17      	ldr	r3, [pc, #92]	; (80023a0 <MX_I2C2_Init+0x74>)
 8002344:	2200      	movs	r2, #0
 8002346:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002348:	4b15      	ldr	r3, [pc, #84]	; (80023a0 <MX_I2C2_Init+0x74>)
 800234a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800234e:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002350:	4b13      	ldr	r3, [pc, #76]	; (80023a0 <MX_I2C2_Init+0x74>)
 8002352:	2200      	movs	r2, #0
 8002354:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002356:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <MX_I2C2_Init+0x74>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <MX_I2C2_Init+0x74>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002362:	4b0f      	ldr	r3, [pc, #60]	; (80023a0 <MX_I2C2_Init+0x74>)
 8002364:	2200      	movs	r2, #0
 8002366:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002368:	480d      	ldr	r0, [pc, #52]	; (80023a0 <MX_I2C2_Init+0x74>)
 800236a:	f003 fbc7 	bl	8005afc <HAL_I2C_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 8002374:	f001 fcea 	bl	8003d4c <Error_Handler>
	}
	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002378:	2100      	movs	r1, #0
 800237a:	4809      	ldr	r0, [pc, #36]	; (80023a0 <MX_I2C2_Init+0x74>)
 800237c:	f004 fcab 	bl	8006cd6 <HAL_I2CEx_ConfigAnalogFilter>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <MX_I2C2_Init+0x5e>
	{
		Error_Handler();
 8002386:	f001 fce1 	bl	8003d4c <Error_Handler>
	}
	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800238a:	2100      	movs	r1, #0
 800238c:	4804      	ldr	r0, [pc, #16]	; (80023a0 <MX_I2C2_Init+0x74>)
 800238e:	f004 fcde 	bl	8006d4e <HAL_I2CEx_ConfigDigitalFilter>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_I2C2_Init+0x70>
	{
		Error_Handler();
 8002398:	f001 fcd8 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	200003ac 	.word	0x200003ac
 80023a4:	40005800 	.word	0x40005800
 80023a8:	00061a80 	.word	0x00061a80

080023ac <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 80023b0:	4b17      	ldr	r3, [pc, #92]	; (8002410 <MX_SPI1_Init+0x64>)
 80023b2:	4a18      	ldr	r2, [pc, #96]	; (8002414 <MX_SPI1_Init+0x68>)
 80023b4:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 80023b6:	4b16      	ldr	r3, [pc, #88]	; (8002410 <MX_SPI1_Init+0x64>)
 80023b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80023bc:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <MX_SPI1_Init+0x64>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80023c4:	4b12      	ldr	r3, [pc, #72]	; (8002410 <MX_SPI1_Init+0x64>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80023ca:	4b11      	ldr	r3, [pc, #68]	; (8002410 <MX_SPI1_Init+0x64>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80023d0:	4b0f      	ldr	r3, [pc, #60]	; (8002410 <MX_SPI1_Init+0x64>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80023d6:	4b0e      	ldr	r3, [pc, #56]	; (8002410 <MX_SPI1_Init+0x64>)
 80023d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023dc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <MX_SPI1_Init+0x64>)
 80023e0:	2230      	movs	r2, #48	; 0x30
 80023e2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023e4:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <MX_SPI1_Init+0x64>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023ea:	4b09      	ldr	r3, [pc, #36]	; (8002410 <MX_SPI1_Init+0x64>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <MX_SPI1_Init+0x64>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80023f6:	4b06      	ldr	r3, [pc, #24]	; (8002410 <MX_SPI1_Init+0x64>)
 80023f8:	220a      	movs	r2, #10
 80023fa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023fc:	4804      	ldr	r0, [pc, #16]	; (8002410 <MX_SPI1_Init+0x64>)
 80023fe:	f005 f975 	bl	80076ec <HAL_SPI_Init>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8002408:	f001 fca0 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800240c:	bf00      	nop
 800240e:	bd80      	pop	{r7, pc}
 8002410:	200007ec 	.word	0x200007ec
 8002414:	40013000 	.word	0x40013000

08002418 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 800241c:	4b17      	ldr	r3, [pc, #92]	; (800247c <MX_SPI2_Init+0x64>)
 800241e:	4a18      	ldr	r2, [pc, #96]	; (8002480 <MX_SPI2_Init+0x68>)
 8002420:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <MX_SPI2_Init+0x64>)
 8002424:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002428:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800242a:	4b14      	ldr	r3, [pc, #80]	; (800247c <MX_SPI2_Init+0x64>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002430:	4b12      	ldr	r3, [pc, #72]	; (800247c <MX_SPI2_Init+0x64>)
 8002432:	2200      	movs	r2, #0
 8002434:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <MX_SPI2_Init+0x64>)
 8002438:	2200      	movs	r2, #0
 800243a:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <MX_SPI2_Init+0x64>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002442:	4b0e      	ldr	r3, [pc, #56]	; (800247c <MX_SPI2_Init+0x64>)
 8002444:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002448:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <MX_SPI2_Init+0x64>)
 800244c:	2210      	movs	r2, #16
 800244e:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002450:	4b0a      	ldr	r3, [pc, #40]	; (800247c <MX_SPI2_Init+0x64>)
 8002452:	2200      	movs	r2, #0
 8002454:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <MX_SPI2_Init+0x64>)
 8002458:	2200      	movs	r2, #0
 800245a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800245c:	4b07      	ldr	r3, [pc, #28]	; (800247c <MX_SPI2_Init+0x64>)
 800245e:	2200      	movs	r2, #0
 8002460:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <MX_SPI2_Init+0x64>)
 8002464:	220a      	movs	r2, #10
 8002466:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002468:	4804      	ldr	r0, [pc, #16]	; (800247c <MX_SPI2_Init+0x64>)
 800246a:	f005 f93f 	bl	80076ec <HAL_SPI_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_SPI2_Init+0x60>
	{
		Error_Handler();
 8002474:	f001 fc6a 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000414 	.word	0x20000414
 8002480:	40003800 	.word	0x40003800

08002484 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248a:	f107 0308 	add.w	r3, r7, #8
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002498:	463b      	mov	r3, r7
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80024a0:	4b1d      	ldr	r3, [pc, #116]	; (8002518 <MX_TIM2_Init+0x94>)
 80024a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024a6:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 8400-1;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	; (8002518 <MX_TIM2_Init+0x94>)
 80024aa:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80024ae:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024b0:	4b19      	ldr	r3, [pc, #100]	; (8002518 <MX_TIM2_Init+0x94>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10-1;
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <MX_TIM2_Init+0x94>)
 80024b8:	2209      	movs	r2, #9
 80024ba:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024bc:	4b16      	ldr	r3, [pc, #88]	; (8002518 <MX_TIM2_Init+0x94>)
 80024be:	2200      	movs	r2, #0
 80024c0:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <MX_TIM2_Init+0x94>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024c8:	4813      	ldr	r0, [pc, #76]	; (8002518 <MX_TIM2_Init+0x94>)
 80024ca:	f006 f819 	bl	8008500 <HAL_TIM_Base_Init>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 80024d4:	f001 fc3a 	bl	8003d4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024dc:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024de:	f107 0308 	add.w	r3, r7, #8
 80024e2:	4619      	mov	r1, r3
 80024e4:	480c      	ldr	r0, [pc, #48]	; (8002518 <MX_TIM2_Init+0x94>)
 80024e6:	f006 fa92 	bl	8008a0e <HAL_TIM_ConfigClockSource>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 80024f0:	f001 fc2c 	bl	8003d4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024fc:	463b      	mov	r3, r7
 80024fe:	4619      	mov	r1, r3
 8002500:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_TIM2_Init+0x94>)
 8002502:	f006 fcad 	bl	8008e60 <HAL_TIMEx_MasterConfigSynchronization>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 800250c:	f001 fc1e 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8002510:	bf00      	nop
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000844 	.word	0x20000844

0800251c <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002522:	f107 0308 	add.w	r3, r7, #8
 8002526:	2200      	movs	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	605a      	str	r2, [r3, #4]
 800252c:	609a      	str	r2, [r3, #8]
 800252e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002530:	463b      	mov	r3, r7
 8002532:	2200      	movs	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002538:	4b1d      	ldr	r3, [pc, #116]	; (80025b0 <MX_TIM3_Init+0x94>)
 800253a:	4a1e      	ldr	r2, [pc, #120]	; (80025b4 <MX_TIM3_Init+0x98>)
 800253c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84-1;
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <MX_TIM3_Init+0x94>)
 8002540:	2253      	movs	r2, #83	; 0x53
 8002542:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002544:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <MX_TIM3_Init+0x94>)
 8002546:	2200      	movs	r2, #0
 8002548:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535-1;
 800254a:	4b19      	ldr	r3, [pc, #100]	; (80025b0 <MX_TIM3_Init+0x94>)
 800254c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002550:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002552:	4b17      	ldr	r3, [pc, #92]	; (80025b0 <MX_TIM3_Init+0x94>)
 8002554:	2200      	movs	r2, #0
 8002556:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002558:	4b15      	ldr	r3, [pc, #84]	; (80025b0 <MX_TIM3_Init+0x94>)
 800255a:	2200      	movs	r2, #0
 800255c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800255e:	4814      	ldr	r0, [pc, #80]	; (80025b0 <MX_TIM3_Init+0x94>)
 8002560:	f005 ffce 	bl	8008500 <HAL_TIM_Base_Init>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <MX_TIM3_Init+0x52>
	{
		Error_Handler();
 800256a:	f001 fbef 	bl	8003d4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800256e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002572:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002574:	f107 0308 	add.w	r3, r7, #8
 8002578:	4619      	mov	r1, r3
 800257a:	480d      	ldr	r0, [pc, #52]	; (80025b0 <MX_TIM3_Init+0x94>)
 800257c:	f006 fa47 	bl	8008a0e <HAL_TIM_ConfigClockSource>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM3_Init+0x6e>
	{
		Error_Handler();
 8002586:	f001 fbe1 	bl	8003d4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258e:	2300      	movs	r3, #0
 8002590:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002592:	463b      	mov	r3, r7
 8002594:	4619      	mov	r1, r3
 8002596:	4806      	ldr	r0, [pc, #24]	; (80025b0 <MX_TIM3_Init+0x94>)
 8002598:	f006 fc62 	bl	8008e60 <HAL_TIMEx_MasterConfigSynchronization>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM3_Init+0x8a>
	{
		Error_Handler();
 80025a2:	f001 fbd3 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80025a6:	bf00      	nop
 80025a8:	3718      	adds	r7, #24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200005a8 	.word	0x200005a8
 80025b4:	40000400 	.word	0x40000400

080025b8 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025be:	463b      	mov	r3, r7
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
 80025c4:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80025c6:	4b15      	ldr	r3, [pc, #84]	; (800261c <MX_TIM6_Init+0x64>)
 80025c8:	4a15      	ldr	r2, [pc, #84]	; (8002620 <MX_TIM6_Init+0x68>)
 80025ca:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 84-1;
 80025cc:	4b13      	ldr	r3, [pc, #76]	; (800261c <MX_TIM6_Init+0x64>)
 80025ce:	2253      	movs	r2, #83	; 0x53
 80025d0:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025d2:	4b12      	ldr	r3, [pc, #72]	; (800261c <MX_TIM6_Init+0x64>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 65535-1;
 80025d8:	4b10      	ldr	r3, [pc, #64]	; (800261c <MX_TIM6_Init+0x64>)
 80025da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80025de:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e0:	4b0e      	ldr	r3, [pc, #56]	; (800261c <MX_TIM6_Init+0x64>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80025e6:	480d      	ldr	r0, [pc, #52]	; (800261c <MX_TIM6_Init+0x64>)
 80025e8:	f005 ff8a 	bl	8008500 <HAL_TIM_Base_Init>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d001      	beq.n	80025f6 <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 80025f2:	f001 fbab 	bl	8003d4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80025fe:	463b      	mov	r3, r7
 8002600:	4619      	mov	r1, r3
 8002602:	4806      	ldr	r0, [pc, #24]	; (800261c <MX_TIM6_Init+0x64>)
 8002604:	f006 fc2c 	bl	8008e60 <HAL_TIMEx_MasterConfigSynchronization>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 800260e:	f001 fb9d 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8002612:	bf00      	nop
 8002614:	3708      	adds	r7, #8
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	20000744 	.word	0x20000744
 8002620:	40001000 	.word	0x40001000

08002624 <MX_TIM7_Init>:
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262a:	463b      	mov	r3, r7
 800262c:	2200      	movs	r2, #0
 800262e:	601a      	str	r2, [r3, #0]
 8002630:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8002632:	4b15      	ldr	r3, [pc, #84]	; (8002688 <MX_TIM7_Init+0x64>)
 8002634:	4a15      	ldr	r2, [pc, #84]	; (800268c <MX_TIM7_Init+0x68>)
 8002636:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 8400-1;
 8002638:	4b13      	ldr	r3, [pc, #76]	; (8002688 <MX_TIM7_Init+0x64>)
 800263a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800263e:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002640:	4b11      	ldr	r3, [pc, #68]	; (8002688 <MX_TIM7_Init+0x64>)
 8002642:	2200      	movs	r2, #0
 8002644:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 5000-1;
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <MX_TIM7_Init+0x64>)
 8002648:	f241 3287 	movw	r2, #4999	; 0x1387
 800264c:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800264e:	4b0e      	ldr	r3, [pc, #56]	; (8002688 <MX_TIM7_Init+0x64>)
 8002650:	2200      	movs	r2, #0
 8002652:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002654:	480c      	ldr	r0, [pc, #48]	; (8002688 <MX_TIM7_Init+0x64>)
 8002656:	f005 ff53 	bl	8008500 <HAL_TIM_Base_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <MX_TIM7_Init+0x40>
	{
		Error_Handler();
 8002660:	f001 fb74 	bl	8003d4c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800266c:	463b      	mov	r3, r7
 800266e:	4619      	mov	r1, r3
 8002670:	4805      	ldr	r0, [pc, #20]	; (8002688 <MX_TIM7_Init+0x64>)
 8002672:	f006 fbf5 	bl	8008e60 <HAL_TIMEx_MasterConfigSynchronization>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM7_Init+0x5c>
	{
		Error_Handler();
 800267c:	f001 fb66 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8002680:	bf00      	nop
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	20000940 	.word	0x20000940
 800268c:	40001400 	.word	0x40001400

08002690 <MX_TIM9_Init>:
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002696:	463b      	mov	r3, r7
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <MX_TIM9_Init+0x6c>)
 80026a4:	4a16      	ldr	r2, [pc, #88]	; (8002700 <MX_TIM9_Init+0x70>)
 80026a6:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 16800-1;
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <MX_TIM9_Init+0x6c>)
 80026aa:	f244 129f 	movw	r2, #16799	; 0x419f
 80026ae:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026b0:	4b12      	ldr	r3, [pc, #72]	; (80026fc <MX_TIM9_Init+0x6c>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 10000-1;
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <MX_TIM9_Init+0x6c>)
 80026b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80026bc:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <MX_TIM9_Init+0x6c>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026c4:	4b0d      	ldr	r3, [pc, #52]	; (80026fc <MX_TIM9_Init+0x6c>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80026ca:	480c      	ldr	r0, [pc, #48]	; (80026fc <MX_TIM9_Init+0x6c>)
 80026cc:	f005 ff18 	bl	8008500 <HAL_TIM_Base_Init>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <MX_TIM9_Init+0x4a>
	{
		Error_Handler();
 80026d6:	f001 fb39 	bl	8003d4c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026de:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80026e0:	463b      	mov	r3, r7
 80026e2:	4619      	mov	r1, r3
 80026e4:	4805      	ldr	r0, [pc, #20]	; (80026fc <MX_TIM9_Init+0x6c>)
 80026e6:	f006 f992 	bl	8008a0e <HAL_TIM_ConfigClockSource>
 80026ea:	4603      	mov	r3, r0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d001      	beq.n	80026f4 <MX_TIM9_Init+0x64>
	{
		Error_Handler();
 80026f0:	f001 fb2c 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */

}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000790 	.word	0x20000790
 8002700:	40014000 	.word	0x40014000

08002704 <MX_TIM10_Init>:
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
	/* USER CODE END TIM10_Init 0 */

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8002708:	4b0e      	ldr	r3, [pc, #56]	; (8002744 <MX_TIM10_Init+0x40>)
 800270a:	4a0f      	ldr	r2, [pc, #60]	; (8002748 <MX_TIM10_Init+0x44>)
 800270c:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 16800-1;
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <MX_TIM10_Init+0x40>)
 8002710:	f244 129f 	movw	r2, #16799	; 0x419f
 8002714:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <MX_TIM10_Init+0x40>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 10000-1;
 800271c:	4b09      	ldr	r3, [pc, #36]	; (8002744 <MX_TIM10_Init+0x40>)
 800271e:	f242 720f 	movw	r2, #9999	; 0x270f
 8002722:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002724:	4b07      	ldr	r3, [pc, #28]	; (8002744 <MX_TIM10_Init+0x40>)
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800272a:	4b06      	ldr	r3, [pc, #24]	; (8002744 <MX_TIM10_Init+0x40>)
 800272c:	2280      	movs	r2, #128	; 0x80
 800272e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002730:	4804      	ldr	r0, [pc, #16]	; (8002744 <MX_TIM10_Init+0x40>)
 8002732:	f005 fee5 	bl	8008500 <HAL_TIM_Base_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM10_Init+0x3c>
	{
		Error_Handler();
 800273c:	f001 fb06 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */

}
 8002740:	bf00      	nop
 8002742:	bd80      	pop	{r7, pc}
 8002744:	2000050c 	.word	0x2000050c
 8002748:	40014400 	.word	0x40014400

0800274c <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	af00      	add	r7, sp, #0
	/* USER CODE END TIM11_Init 0 */

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8002750:	4b0e      	ldr	r3, [pc, #56]	; (800278c <MX_TIM11_Init+0x40>)
 8002752:	4a0f      	ldr	r2, [pc, #60]	; (8002790 <MX_TIM11_Init+0x44>)
 8002754:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 16800-1;
 8002756:	4b0d      	ldr	r3, [pc, #52]	; (800278c <MX_TIM11_Init+0x40>)
 8002758:	f244 129f 	movw	r2, #16799	; 0x419f
 800275c:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800275e:	4b0b      	ldr	r3, [pc, #44]	; (800278c <MX_TIM11_Init+0x40>)
 8002760:	2200      	movs	r2, #0
 8002762:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 1000-1;
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <MX_TIM11_Init+0x40>)
 8002766:	f240 32e7 	movw	r2, #999	; 0x3e7
 800276a:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <MX_TIM11_Init+0x40>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <MX_TIM11_Init+0x40>)
 8002774:	2200      	movs	r2, #0
 8002776:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002778:	4804      	ldr	r0, [pc, #16]	; (800278c <MX_TIM11_Init+0x40>)
 800277a:	f005 fec1 	bl	8008500 <HAL_TIM_Base_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_TIM11_Init+0x3c>
	{
		Error_Handler();
 8002784:	f001 fae2 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */

}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200006e0 	.word	0x200006e0
 8002790:	40014800 	.word	0x40014800

08002794 <MX_TIM14_Init>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
	/* USER CODE END TIM14_Init 0 */

	/* USER CODE BEGIN TIM14_Init 1 */

	/* USER CODE END TIM14_Init 1 */
	htim14.Instance = TIM14;
 8002798:	4b0e      	ldr	r3, [pc, #56]	; (80027d4 <MX_TIM14_Init+0x40>)
 800279a:	4a0f      	ldr	r2, [pc, #60]	; (80027d8 <MX_TIM14_Init+0x44>)
 800279c:	601a      	str	r2, [r3, #0]
	htim14.Init.Prescaler = 8400-1;
 800279e:	4b0d      	ldr	r3, [pc, #52]	; (80027d4 <MX_TIM14_Init+0x40>)
 80027a0:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80027a4:	605a      	str	r2, [r3, #4]
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <MX_TIM14_Init+0x40>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	609a      	str	r2, [r3, #8]
	htim14.Init.Period = 10000-1;
 80027ac:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <MX_TIM14_Init+0x40>)
 80027ae:	f242 720f 	movw	r2, #9999	; 0x270f
 80027b2:	60da      	str	r2, [r3, #12]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <MX_TIM14_Init+0x40>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <MX_TIM14_Init+0x40>)
 80027bc:	2200      	movs	r2, #0
 80027be:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80027c0:	4804      	ldr	r0, [pc, #16]	; (80027d4 <MX_TIM14_Init+0x40>)
 80027c2:	f005 fe9d 	bl	8008500 <HAL_TIM_Base_Init>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <MX_TIM14_Init+0x3c>
	{
		Error_Handler();
 80027cc:	f001 fabe 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN TIM14_Init 2 */

	/* USER CODE END TIM14_Init 2 */

}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	200008f0 	.word	0x200008f0
 80027d8:	40002000 	.word	0x40002000

080027dc <MX_UART5_Init>:
 * @brief UART5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART5_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	/* USER CODE END UART5_Init 0 */

	/* USER CODE BEGIN UART5_Init 1 */

	/* USER CODE END UART5_Init 1 */
	huart5.Instance = UART5;
 80027e0:	4b11      	ldr	r3, [pc, #68]	; (8002828 <MX_UART5_Init+0x4c>)
 80027e2:	4a12      	ldr	r2, [pc, #72]	; (800282c <MX_UART5_Init+0x50>)
 80027e4:	601a      	str	r2, [r3, #0]
	huart5.Init.BaudRate = 115200;
 80027e6:	4b10      	ldr	r3, [pc, #64]	; (8002828 <MX_UART5_Init+0x4c>)
 80027e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027ec:	605a      	str	r2, [r3, #4]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_UART5_Init+0x4c>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	609a      	str	r2, [r3, #8]
	huart5.Init.StopBits = UART_STOPBITS_1;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <MX_UART5_Init+0x4c>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
	huart5.Init.Parity = UART_PARITY_NONE;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <MX_UART5_Init+0x4c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	611a      	str	r2, [r3, #16]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <MX_UART5_Init+0x4c>)
 8002802:	220c      	movs	r2, #12
 8002804:	615a      	str	r2, [r3, #20]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <MX_UART5_Init+0x4c>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <MX_UART5_Init+0x4c>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart5) != HAL_OK)
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_UART5_Init+0x4c>)
 8002814:	f006 fbb4 	bl	8008f80 <HAL_UART_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_UART5_Init+0x46>
	{
		Error_Handler();
 800281e:	f001 fa95 	bl	8003d4c <Error_Handler>
	}
	/* USER CODE BEGIN UART5_Init 2 */

	/* USER CODE END UART5_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200005f4 	.word	0x200005f4
 800282c:	40005000 	.word	0x40005000

08002830 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 8002836:	1d3b      	adds	r3, r7, #4
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
 8002844:	615a      	str	r2, [r3, #20]
 8002846:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002848:	4b28      	ldr	r3, [pc, #160]	; (80028ec <MX_FMC_Init+0xbc>)
 800284a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800284e:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8002850:	4b26      	ldr	r3, [pc, #152]	; (80028ec <MX_FMC_Init+0xbc>)
 8002852:	4a27      	ldr	r2, [pc, #156]	; (80028f0 <MX_FMC_Init+0xc0>)
 8002854:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8002856:	4b25      	ldr	r3, [pc, #148]	; (80028ec <MX_FMC_Init+0xbc>)
 8002858:	2200      	movs	r2, #0
 800285a:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800285c:	4b23      	ldr	r3, [pc, #140]	; (80028ec <MX_FMC_Init+0xbc>)
 800285e:	2200      	movs	r2, #0
 8002860:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8002862:	4b22      	ldr	r3, [pc, #136]	; (80028ec <MX_FMC_Init+0xbc>)
 8002864:	2200      	movs	r2, #0
 8002866:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <MX_FMC_Init+0xbc>)
 800286a:	2210      	movs	r2, #16
 800286c:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800286e:	4b1f      	ldr	r3, [pc, #124]	; (80028ec <MX_FMC_Init+0xbc>)
 8002870:	2200      	movs	r2, #0
 8002872:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <MX_FMC_Init+0xbc>)
 8002876:	2200      	movs	r2, #0
 8002878:	61da      	str	r2, [r3, #28]
	hsram1.Init.WrapMode = FMC_WRAP_MODE_DISABLE;
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <MX_FMC_Init+0xbc>)
 800287c:	2200      	movs	r2, #0
 800287e:	621a      	str	r2, [r3, #32]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <MX_FMC_Init+0xbc>)
 8002882:	2200      	movs	r2, #0
 8002884:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8002886:	4b19      	ldr	r3, [pc, #100]	; (80028ec <MX_FMC_Init+0xbc>)
 8002888:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800288c:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800288e:	4b17      	ldr	r3, [pc, #92]	; (80028ec <MX_FMC_Init+0xbc>)
 8002890:	2200      	movs	r2, #0
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8002894:	4b15      	ldr	r3, [pc, #84]	; (80028ec <MX_FMC_Init+0xbc>)
 8002896:	2200      	movs	r2, #0
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800289a:	4b14      	ldr	r3, [pc, #80]	; (80028ec <MX_FMC_Init+0xbc>)
 800289c:	2200      	movs	r2, #0
 800289e:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80028a0:	4b12      	ldr	r3, [pc, #72]	; (80028ec <MX_FMC_Init+0xbc>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <MX_FMC_Init+0xbc>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <MX_FMC_Init+0xbc>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
	/* Timing */
	Timing.AddressSetupTime = 15;
 80028b2:	230f      	movs	r3, #15
 80028b4:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 80028b6:	230f      	movs	r3, #15
 80028b8:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 255;
 80028ba:	23ff      	movs	r3, #255	; 0xff
 80028bc:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 15;
 80028be:	230f      	movs	r3, #15
 80028c0:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 80028c2:	2310      	movs	r3, #16
 80028c4:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 80028c6:	2311      	movs	r3, #17
 80028c8:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	2200      	movs	r2, #0
 80028d2:	4619      	mov	r1, r3
 80028d4:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_FMC_Init+0xbc>)
 80028d6:	f005 fdcf 	bl	8008478 <HAL_SRAM_Init>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_FMC_Init+0xb4>
	{
		Error_Handler( );
 80028e0:	f001 fa34 	bl	8003d4c <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 80028e4:	bf00      	nop
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20000558 	.word	0x20000558
 80028f0:	a0000104 	.word	0xa0000104

080028f4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08e      	sub	sp, #56	; 0x38
 80028f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	605a      	str	r2, [r3, #4]
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	60da      	str	r2, [r3, #12]
 8002908:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
 800290e:	4bb4      	ldr	r3, [pc, #720]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4ab3      	ldr	r2, [pc, #716]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 8002914:	f043 0310 	orr.w	r3, r3, #16
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4bb1      	ldr	r3, [pc, #708]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0310 	and.w	r3, r3, #16
 8002922:	623b      	str	r3, [r7, #32]
 8002924:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	4bad      	ldr	r3, [pc, #692]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 800292c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292e:	4aac      	ldr	r2, [pc, #688]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 8002930:	f043 0304 	orr.w	r3, r3, #4
 8002934:	6313      	str	r3, [r2, #48]	; 0x30
 8002936:	4baa      	ldr	r3, [pc, #680]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293a:	f003 0304 	and.w	r3, r3, #4
 800293e:	61fb      	str	r3, [r7, #28]
 8002940:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	61bb      	str	r3, [r7, #24]
 8002946:	4ba6      	ldr	r3, [pc, #664]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	4aa5      	ldr	r2, [pc, #660]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 800294c:	f043 0320 	orr.w	r3, r3, #32
 8002950:	6313      	str	r3, [r2, #48]	; 0x30
 8002952:	4ba3      	ldr	r3, [pc, #652]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 8002954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002956:	f003 0320 	and.w	r3, r3, #32
 800295a:	61bb      	str	r3, [r7, #24]
 800295c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	4b9f      	ldr	r3, [pc, #636]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a9e      	ldr	r2, [pc, #632]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 8002968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b9c      	ldr	r3, [pc, #624]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b98      	ldr	r3, [pc, #608]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a97      	ldr	r2, [pc, #604]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b95      	ldr	r3, [pc, #596]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60fb      	str	r3, [r7, #12]
 800299a:	4b91      	ldr	r3, [pc, #580]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	4a90      	ldr	r2, [pc, #576]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 80029a0:	f043 0302 	orr.w	r3, r3, #2
 80029a4:	6313      	str	r3, [r2, #48]	; 0x30
 80029a6:	4b8e      	ldr	r3, [pc, #568]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
 80029b6:	4b8a      	ldr	r3, [pc, #552]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ba:	4a89      	ldr	r2, [pc, #548]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 80029bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029c0:	6313      	str	r3, [r2, #48]	; 0x30
 80029c2:	4b87      	ldr	r3, [pc, #540]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	60bb      	str	r3, [r7, #8]
 80029cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
 80029d2:	4b83      	ldr	r3, [pc, #524]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a82      	ldr	r2, [pc, #520]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 80029d8:	f043 0308 	orr.w	r3, r3, #8
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b80      	ldr	r3, [pc, #512]	; (8002be0 <MX_GPIO_Init+0x2ec>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	607b      	str	r3, [r7, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, DHT11_data_Pin|share_seat_out_Pin|Relay_Front_Light_Pin|share_stand_output_Pin, GPIO_PIN_RESET);
 80029ea:	2200      	movs	r2, #0
 80029ec:	f241 3101 	movw	r1, #4865	; 0x1301
 80029f0:	487c      	ldr	r0, [pc, #496]	; (8002be4 <MX_GPIO_Init+0x2f0>)
 80029f2:	f003 f837 	bl	8005a64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOF, LCD_BL_Pin|T_CS_Pin, GPIO_PIN_SET);
 80029f6:	2201      	movs	r2, #1
 80029f8:	2106      	movs	r1, #6
 80029fa:	487a      	ldr	r0, [pc, #488]	; (8002be4 <MX_GPIO_Init+0x2f0>)
 80029fc:	f003 f832 	bl	8005a64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, ultra3_Trig_Pin|ultra2_Trig_Pin, GPIO_PIN_RESET);
 8002a00:	2200      	movs	r2, #0
 8002a02:	f248 0110 	movw	r1, #32784	; 0x8010
 8002a06:	4878      	ldr	r0, [pc, #480]	; (8002be8 <MX_GPIO_Init+0x2f4>)
 8002a08:	f003 f82c 	bl	8005a64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|ultra1_Trig_Pin|rc522_sel_Pin
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	f24c 0189 	movw	r1, #49289	; 0xc089
 8002a12:	4876      	ldr	r0, [pc, #472]	; (8002bec <MX_GPIO_Init+0x2f8>)
 8002a14:	f003 f826 	bl	8005a64 <HAL_GPIO_WritePin>
			|LD2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, Buzzer_Pin|WP_Pin|share_default_set_Pin, GPIO_PIN_RESET);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	210b      	movs	r1, #11
 8002a1c:	4874      	ldr	r0, [pc, #464]	; (8002bf0 <MX_GPIO_Init+0x2fc>)
 8002a1e:	f003 f821 	bl	8005a64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, Alarm_Pin|Relay_Back_Light_Pin|Relay_Left_Light_Pin|Relay_Right_Light_Pin, GPIO_PIN_RESET);
 8002a22:	2200      	movs	r2, #0
 8002a24:	f44f 61e8 	mov.w	r1, #1856	; 0x740
 8002a28:	4872      	ldr	r0, [pc, #456]	; (8002bf4 <MX_GPIO_Init+0x300>)
 8002a2a:	f003 f81b 	bl	8005a64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(state_ThisBoard_GPIO_Port, state_ThisBoard_Pin, GPIO_PIN_RESET);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2140      	movs	r1, #64	; 0x40
 8002a32:	4871      	ldr	r0, [pc, #452]	; (8002bf8 <MX_GPIO_Init+0x304>)
 8002a34:	f003 f816 	bl	8005a64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : share_seat_joy_in_Pin */
	GPIO_InitStruct.Pin = share_seat_joy_in_Pin;
 8002a38:	2308      	movs	r3, #8
 8002a3a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(share_seat_joy_in_GPIO_Port, &GPIO_InitStruct);
 8002a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a48:	4619      	mov	r1, r3
 8002a4a:	486c      	ldr	r0, [pc, #432]	; (8002bfc <MX_GPIO_Init+0x308>)
 8002a4c:	f002 fe46 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pins : DHT11_data_Pin LCD_BL_Pin share_seat_out_Pin Relay_Front_Light_Pin
                           share_stand_output_Pin */
	GPIO_InitStruct.Pin = DHT11_data_Pin|LCD_BL_Pin|share_seat_out_Pin|Relay_Front_Light_Pin
 8002a50:	f241 3303 	movw	r3, #4867	; 0x1303
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
			|share_stand_output_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a56:	2301      	movs	r3, #1
 8002a58:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a66:	4619      	mov	r1, r3
 8002a68:	485e      	ldr	r0, [pc, #376]	; (8002be4 <MX_GPIO_Init+0x2f0>)
 8002a6a:	f002 fe37 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pin : T_CS_Pin */
	GPIO_InitStruct.Pin = T_CS_Pin;
 8002a6e:	2304      	movs	r3, #4
 8002a70:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a72:	2301      	movs	r3, #1
 8002a74:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a76:	2301      	movs	r3, #1
 8002a78:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(T_CS_GPIO_Port, &GPIO_InitStruct);
 8002a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a82:	4619      	mov	r1, r3
 8002a84:	4857      	ldr	r0, [pc, #348]	; (8002be4 <MX_GPIO_Init+0x2f0>)
 8002a86:	f002 fe29 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pins : share_Back_in_Pin share_speed_in_Pin share_speed_in_1_Pin */
	GPIO_InitStruct.Pin = share_Back_in_Pin|share_speed_in_Pin|share_speed_in_1_Pin;
 8002a8a:	f242 0388 	movw	r3, #8328	; 0x2088
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4851      	ldr	r0, [pc, #324]	; (8002be4 <MX_GPIO_Init+0x2f0>)
 8002aa0:	f002 fe1c 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pin : T_PEN_Pin */
	GPIO_InitStruct.Pin = T_PEN_Pin;
 8002aa4:	2320      	movs	r3, #32
 8002aa6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002aa8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002aac:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(T_PEN_GPIO_Port, &GPIO_InitStruct);
 8002ab2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	484a      	ldr	r0, [pc, #296]	; (8002be4 <MX_GPIO_Init+0x2f0>)
 8002aba:	f002 fe0f 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pins : share_Right_in_Pin ultra2_ECHO_Pin share_standing_complete_Pin */
	GPIO_InitStruct.Pin = share_Right_in_Pin|ultra2_ECHO_Pin|share_standing_complete_Pin;
 8002abe:	f640 0381 	movw	r3, #2177	; 0x881
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	4848      	ldr	r0, [pc, #288]	; (8002bf4 <MX_GPIO_Init+0x300>)
 8002ad4:	f002 fe02 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pin : share_Left_in_Pin */
	GPIO_InitStruct.Pin = share_Left_in_Pin;
 8002ad8:	2308      	movs	r3, #8
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(share_Left_in_GPIO_Port, &GPIO_InitStruct);
 8002ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ae8:	4619      	mov	r1, r3
 8002aea:	483f      	ldr	r0, [pc, #252]	; (8002be8 <MX_GPIO_Init+0x2f4>)
 8002aec:	f002 fdf6 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pins : ultra3_Trig_Pin ultra2_Trig_Pin */
	GPIO_InitStruct.Pin = ultra3_Trig_Pin|ultra2_Trig_Pin;
 8002af0:	f248 0310 	movw	r3, #32784	; 0x8010
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af6:	2301      	movs	r3, #1
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afe:	2303      	movs	r3, #3
 8002b00:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b06:	4619      	mov	r1, r3
 8002b08:	4837      	ldr	r0, [pc, #220]	; (8002be8 <MX_GPIO_Init+0x2f4>)
 8002b0a:	f002 fde7 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD1_Pin LD3_Pin ultra1_Trig_Pin rc522_sel_Pin
                           LD2_Pin */
	GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|ultra1_Trig_Pin|rc522_sel_Pin
 8002b0e:	f24c 0389 	movw	r3, #49289	; 0xc089
 8002b12:	627b      	str	r3, [r7, #36]	; 0x24
			|LD2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b14:	2301      	movs	r3, #1
 8002b16:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b24:	4619      	mov	r1, r3
 8002b26:	4831      	ldr	r0, [pc, #196]	; (8002bec <MX_GPIO_Init+0x2f8>)
 8002b28:	f002 fdd8 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pins : Buzzer_Pin WP_Pin share_default_set_Pin */
	GPIO_InitStruct.Pin = Buzzer_Pin|WP_Pin|share_default_set_Pin;
 8002b2c:	230b      	movs	r3, #11
 8002b2e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b30:	2301      	movs	r3, #1
 8002b32:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b40:	4619      	mov	r1, r3
 8002b42:	482b      	ldr	r0, [pc, #172]	; (8002bf0 <MX_GPIO_Init+0x2fc>)
 8002b44:	f002 fdca 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pins : ultra1_ECHO_Pin ultra3_ECHO_Pin share_stop_in_Pin */
	GPIO_InitStruct.Pin = ultra1_ECHO_Pin|ultra3_ECHO_Pin|share_stop_in_Pin;
 8002b48:	f241 1310 	movw	r3, #4368	; 0x1110
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4823      	ldr	r0, [pc, #140]	; (8002bec <MX_GPIO_Init+0x2f8>)
 8002b5e:	f002 fdbd 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pin : share_default_state_Pin */
	GPIO_InitStruct.Pin = share_default_state_Pin;
 8002b62:	2304      	movs	r3, #4
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b66:	2300      	movs	r3, #0
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(share_default_state_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b72:	4619      	mov	r1, r3
 8002b74:	481e      	ldr	r0, [pc, #120]	; (8002bf0 <MX_GPIO_Init+0x2fc>)
 8002b76:	f002 fdb1 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pins : Alarm_Pin Relay_Back_Light_Pin Relay_Left_Light_Pin Relay_Right_Light_Pin */
	GPIO_InitStruct.Pin = Alarm_Pin|Relay_Back_Light_Pin|Relay_Left_Light_Pin|Relay_Right_Light_Pin;
 8002b7a:	f44f 63e8 	mov.w	r3, #1856	; 0x740
 8002b7e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b80:	2301      	movs	r3, #1
 8002b82:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b90:	4619      	mov	r1, r3
 8002b92:	4818      	ldr	r0, [pc, #96]	; (8002bf4 <MX_GPIO_Init+0x300>)
 8002b94:	f002 fda2 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pin : state_ThisBoard_Pin */
	GPIO_InitStruct.Pin = state_ThisBoard_Pin;
 8002b98:	2340      	movs	r3, #64	; 0x40
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(state_ThisBoard_GPIO_Port, &GPIO_InitStruct);
 8002ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bac:	4619      	mov	r1, r3
 8002bae:	4812      	ldr	r0, [pc, #72]	; (8002bf8 <MX_GPIO_Init+0x304>)
 8002bb0:	f002 fd94 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pin : SW_standing_method_Pin */
	GPIO_InitStruct.Pin = SW_standing_method_Pin;
 8002bb4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(SW_standing_method_GPIO_Port, &GPIO_InitStruct);
 8002bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4809      	ldr	r0, [pc, #36]	; (8002bf0 <MX_GPIO_Init+0x2fc>)
 8002bca:	f002 fd87 	bl	80056dc <HAL_GPIO_Init>

	/*Configure GPIO pin : PIR_sensor_Pin */
	GPIO_InitStruct.Pin = PIR_sensor_Pin;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002bdc:	e010      	b.n	8002c00 <MX_GPIO_Init+0x30c>
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40021400 	.word	0x40021400
 8002be8:	40020000 	.word	0x40020000
 8002bec:	40020400 	.word	0x40020400
 8002bf0:	40021800 	.word	0x40021800
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020c00 	.word	0x40020c00
 8002bfc:	40021000 	.word	0x40021000
	HAL_GPIO_Init(PIR_sensor_GPIO_Port, &GPIO_InitStruct);
 8002c00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c04:	4619      	mov	r1, r3
 8002c06:	480b      	ldr	r0, [pc, #44]	; (8002c34 <MX_GPIO_Init+0x340>)
 8002c08:	f002 fd68 	bl	80056dc <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	2100      	movs	r1, #0
 8002c10:	2006      	movs	r0, #6
 8002c12:	f002 fd06 	bl	8005622 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c16:	2006      	movs	r0, #6
 8002c18:	f002 fd1f 	bl	800565a <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	2017      	movs	r0, #23
 8002c22:	f002 fcfe 	bl	8005622 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002c26:	2017      	movs	r0, #23
 8002c28:	f002 fd17 	bl	800565a <HAL_NVIC_EnableIRQ>

}
 8002c2c:	bf00      	nop
 8002c2e:	3738      	adds	r7, #56	; 0x38
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	40021000 	.word	0x40021000

08002c38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
volatile uint32_t touch_delay_count=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == T_PEN_Pin){
 8002c42:	88fb      	ldrh	r3, [r7, #6]
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d108      	bne.n	8002c5a <HAL_GPIO_EXTI_Callback+0x22>
		if(XPT2046_TouchPressed())
 8002c48:	f008 fd44 	bl	800b6d4 <XPT2046_TouchPressed>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <HAL_GPIO_EXTI_Callback+0x22>
		{
			if(XPT2046_TouchGetCoordinates(&x, &y))
 8002c52:	4907      	ldr	r1, [pc, #28]	; (8002c70 <HAL_GPIO_EXTI_Callback+0x38>)
 8002c54:	4807      	ldr	r0, [pc, #28]	; (8002c74 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002c56:	f008 fd4d 	bl	800b6f4 <XPT2046_TouchGetCoordinates>
			{

			}
		}
	}
	if(GPIO_Pin == PIR_sensor_Pin){
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d102      	bne.n	8002c66 <HAL_GPIO_EXTI_Callback+0x2e>
		PIR_flag=1;
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_GPIO_EXTI_Callback+0x40>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
	}

}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	20000258 	.word	0x20000258
 8002c74:	20000256 	.word	0x20000256
 8002c78:	2000025a 	.word	0x2000025a

08002c7c <HAL_TIM_PeriodElapsedCallback>:


uint8_t preBeepForUltra=8;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c8c:	d11e      	bne.n	8002ccc <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if(Angle_on){
 8002c8e:	4b8e      	ldr	r3, [pc, #568]	; (8002ec8 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01a      	beq.n	8002ccc <HAL_TIM_PeriodElapsedCallback+0x50>
			if(MPU_milliseconds < 65531 && flag_for_MPU_RESET == 1){
 8002c96:	4b8d      	ldr	r3, [pc, #564]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	f64f 72fa 	movw	r2, #65530	; 0xfffa
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d80b      	bhi.n	8002cbc <HAL_TIM_PeriodElapsedCallback+0x40>
 8002ca4:	4b8a      	ldr	r3, [pc, #552]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d107      	bne.n	8002cbc <HAL_TIM_PeriodElapsedCallback+0x40>
				MPU_milliseconds+=1;
 8002cac:	4b87      	ldr	r3, [pc, #540]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002cae:	881b      	ldrh	r3, [r3, #0]
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	4b85      	ldr	r3, [pc, #532]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002cb8:	801a      	strh	r2, [r3, #0]
 8002cba:	e007      	b.n	8002ccc <HAL_TIM_PeriodElapsedCallback+0x50>
			}
			else{
				MPU_milliseconds=0;
 8002cbc:	4b83      	ldr	r3, [pc, #524]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	801a      	strh	r2, [r3, #0]
				MPU6050_reset();
 8002cc2:	f008 fb29 	bl	800b318 <MPU6050_reset>
				flag_for_MPU_RESET=1;
 8002cc6:	4b82      	ldr	r3, [pc, #520]	; (8002ed0 <HAL_TIM_PeriodElapsedCallback+0x254>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	if(htim->Instance==TIM14)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a80      	ldr	r2, [pc, #512]	; (8002ed4 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d105      	bne.n	8002ce2 <HAL_TIM_PeriodElapsedCallback+0x66>
	{
		main_loop_counter_flag+=1;
 8002cd6:	4b80      	ldr	r3, [pc, #512]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4b7e      	ldr	r3, [pc, #504]	; (8002ed8 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8002ce0:	701a      	strb	r2, [r3, #0]
	}

	//방향?��(Direction Light)_0.5sec int
	if(htim-> Instance ==TIM7){
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a7d      	ldr	r2, [pc, #500]	; (8002edc <HAL_TIM_PeriodElapsedCallback+0x260>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d12e      	bne.n	8002d4a <HAL_TIM_PeriodElapsedCallback+0xce>
		if(flag_motor_B_F==1){
 8002cec:	4b7c      	ldr	r3, [pc, #496]	; (8002ee0 <HAL_TIM_PeriodElapsedCallback+0x264>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d10a      	bne.n	8002d0a <HAL_TIM_PeriodElapsedCallback+0x8e>
			HAL_GPIO_TogglePin(Relay_Left_Light_GPIO_Port, Relay_Left_Light_Pin);
 8002cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cf8:	487a      	ldr	r0, [pc, #488]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002cfa:	f002 fecc 	bl	8005a96 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(Relay_Right_Light_GPIO_Port, Relay_Right_Light_Pin);
 8002cfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d02:	4878      	ldr	r0, [pc, #480]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002d04:	f002 fec7 	bl	8005a96 <HAL_GPIO_TogglePin>
 8002d08:	e01f      	b.n	8002d4a <HAL_TIM_PeriodElapsedCallback+0xce>
		}

		else{
			if(flag_motor_Right==1){
 8002d0a:	4b77      	ldr	r3, [pc, #476]	; (8002ee8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d105      	bne.n	8002d1e <HAL_TIM_PeriodElapsedCallback+0xa2>
				HAL_GPIO_TogglePin(Relay_Right_Light_GPIO_Port, Relay_Right_Light_Pin);
 8002d12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d16:	4873      	ldr	r0, [pc, #460]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002d18:	f002 febd 	bl	8005a96 <HAL_GPIO_TogglePin>
 8002d1c:	e015      	b.n	8002d4a <HAL_TIM_PeriodElapsedCallback+0xce>
			}
			else if(flag_motor_Left==1){
 8002d1e:	4b73      	ldr	r3, [pc, #460]	; (8002eec <HAL_TIM_PeriodElapsedCallback+0x270>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d105      	bne.n	8002d32 <HAL_TIM_PeriodElapsedCallback+0xb6>
				HAL_GPIO_TogglePin(Relay_Left_Light_GPIO_Port, Relay_Left_Light_Pin);
 8002d26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d2a:	486e      	ldr	r0, [pc, #440]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002d2c:	f002 feb3 	bl	8005a96 <HAL_GPIO_TogglePin>
 8002d30:	e00b      	b.n	8002d4a <HAL_TIM_PeriodElapsedCallback+0xce>
			}
			else{
				HAL_GPIO_WritePin(Relay_Right_Light_GPIO_Port, Relay_Right_Light_Pin,RESET);
 8002d32:	2200      	movs	r2, #0
 8002d34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d38:	486a      	ldr	r0, [pc, #424]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002d3a:	f002 fe93 	bl	8005a64 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Relay_Left_Light_GPIO_Port, Relay_Left_Light_Pin,RESET);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d44:	4867      	ldr	r0, [pc, #412]	; (8002ee4 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8002d46:	f002 fe8d 	bl	8005a64 <HAL_GPIO_WritePin>

			}
		}
	}
	if(htim->Instance == TIM9){
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a68      	ldr	r2, [pc, #416]	; (8002ef0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d105      	bne.n	8002d60 <HAL_TIM_PeriodElapsedCallback+0xe4>
		MPU6050_load_Angle(MPU_milliseconds);
 8002d54:	4b5d      	ldr	r3, [pc, #372]	; (8002ecc <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002d56:	881b      	ldrh	r3, [r3, #0]
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f008 faf0 	bl	800b340 <MPU6050_load_Angle>
	}

	//default ARR = 10000 -> 1sec
	if(htim ->Instance == TIM10){
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a63      	ldr	r2, [pc, #396]	; (8002ef4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	f040 8092 	bne.w	8002e90 <HAL_TIM_PeriodElapsedCallback+0x214>

		switch(beepforultra){
 8002d6c:	4b62      	ldr	r3, [pc, #392]	; (8002ef8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d876      	bhi.n	8002e64 <HAL_TIM_PeriodElapsedCallback+0x1e8>
 8002d76:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7c:	08002d91 	.word	0x08002d91
 8002d80:	08002dbb 	.word	0x08002dbb
 8002d84:	08002de5 	.word	0x08002de5
 8002d88:	08002e0f 	.word	0x08002e0f
 8002d8c:	08002e39 	.word	0x08002e39
		case 1:
			if(preBeepForUltra!=1)
 8002d90:	4b5a      	ldr	r3, [pc, #360]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002d92:	781b      	ldrb	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d008      	beq.n	8002daa <HAL_TIM_PeriodElapsedCallback+0x12e>
				__HAL_TIM_SET_AUTORELOAD(&htim10,1000*10);
 8002d98:	4b59      	ldr	r3, [pc, #356]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002da2:	4b57      	ldr	r3, [pc, #348]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002da4:	f242 7210 	movw	r2, #10000	; 0x2710
 8002da8:	60da      	str	r2, [r3, #12]
			HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8002daa:	2101      	movs	r1, #1
 8002dac:	4855      	ldr	r0, [pc, #340]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002dae:	f002 fe72 	bl	8005a96 <HAL_GPIO_TogglePin>
			preBeepForUltra=1;
 8002db2:	4b52      	ldr	r3, [pc, #328]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	701a      	strb	r2, [r3, #0]
			break;
 8002db8:	e06b      	b.n	8002e92 <HAL_TIM_PeriodElapsedCallback+0x216>
		case 2:
			if(preBeepForUltra!=2)
 8002dba:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d008      	beq.n	8002dd4 <HAL_TIM_PeriodElapsedCallback+0x158>
				__HAL_TIM_SET_AUTORELOAD(&htim10,1000*5);
 8002dc2:	4b4f      	ldr	r3, [pc, #316]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dca:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dcc:	4b4c      	ldr	r3, [pc, #304]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd2:	60da      	str	r2, [r3, #12]
			HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	484b      	ldr	r0, [pc, #300]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002dd8:	f002 fe5d 	bl	8005a96 <HAL_GPIO_TogglePin>
			preBeepForUltra=2;
 8002ddc:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002dde:	2202      	movs	r2, #2
 8002de0:	701a      	strb	r2, [r3, #0]
			break;
 8002de2:	e056      	b.n	8002e92 <HAL_TIM_PeriodElapsedCallback+0x216>
		case 3:
			if(preBeepForUltra!=3)
 8002de4:	4b45      	ldr	r3, [pc, #276]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d008      	beq.n	8002dfe <HAL_TIM_PeriodElapsedCallback+0x182>
				__HAL_TIM_SET_AUTORELOAD(&htim10,1000*3);
 8002dec:	4b44      	ldr	r3, [pc, #272]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002df4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002df6:	4b42      	ldr	r3, [pc, #264]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002df8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002dfc:	60da      	str	r2, [r3, #12]
			HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8002dfe:	2101      	movs	r1, #1
 8002e00:	4840      	ldr	r0, [pc, #256]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002e02:	f002 fe48 	bl	8005a96 <HAL_GPIO_TogglePin>
			preBeepForUltra=3;
 8002e06:	4b3d      	ldr	r3, [pc, #244]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002e08:	2203      	movs	r2, #3
 8002e0a:	701a      	strb	r2, [r3, #0]
			break;
 8002e0c:	e041      	b.n	8002e92 <HAL_TIM_PeriodElapsedCallback+0x216>
		case 4:
			if(preBeepForUltra!=4)
 8002e0e:	4b3b      	ldr	r3, [pc, #236]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b04      	cmp	r3, #4
 8002e14:	d008      	beq.n	8002e28 <HAL_TIM_PeriodElapsedCallback+0x1ac>
				__HAL_TIM_SET_AUTORELOAD(&htim10,1000*2);
 8002e16:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002e1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e20:	4b37      	ldr	r3, [pc, #220]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002e22:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002e26:	60da      	str	r2, [r3, #12]
			HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
 8002e28:	2101      	movs	r1, #1
 8002e2a:	4836      	ldr	r0, [pc, #216]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002e2c:	f002 fe33 	bl	8005a96 <HAL_GPIO_TogglePin>
			preBeepForUltra=4;
 8002e30:	4b32      	ldr	r3, [pc, #200]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002e32:	2204      	movs	r2, #4
 8002e34:	701a      	strb	r2, [r3, #0]
			break;
 8002e36:	e02c      	b.n	8002e92 <HAL_TIM_PeriodElapsedCallback+0x216>
		case 5:
			if(preBeepForUltra!=5)
 8002e38:	4b30      	ldr	r3, [pc, #192]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b05      	cmp	r3, #5
 8002e3e:	d008      	beq.n	8002e52 <HAL_TIM_PeriodElapsedCallback+0x1d6>
				__HAL_TIM_SET_AUTORELOAD(&htim10,500);
 8002e40:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e48:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e4a:	4b2d      	ldr	r3, [pc, #180]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002e4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e50:	60da      	str	r2, [r3, #12]
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin,SET);
 8002e52:	2201      	movs	r2, #1
 8002e54:	2101      	movs	r1, #1
 8002e56:	482b      	ldr	r0, [pc, #172]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002e58:	f002 fe04 	bl	8005a64 <HAL_GPIO_WritePin>
			preBeepForUltra=5;
 8002e5c:	4b27      	ldr	r3, [pc, #156]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002e5e:	2205      	movs	r2, #5
 8002e60:	701a      	strb	r2, [r3, #0]
			break;
 8002e62:	e016      	b.n	8002e92 <HAL_TIM_PeriodElapsedCallback+0x216>
		default:
			HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, RESET);
 8002e64:	2200      	movs	r2, #0
 8002e66:	2101      	movs	r1, #1
 8002e68:	4826      	ldr	r0, [pc, #152]	; (8002f04 <HAL_TIM_PeriodElapsedCallback+0x288>)
 8002e6a:	f002 fdfb 	bl	8005a64 <HAL_GPIO_WritePin>
			if(preBeepForUltra!=8)
 8002e6e:	4b23      	ldr	r3, [pc, #140]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d008      	beq.n	8002e88 <HAL_TIM_PeriodElapsedCallback+0x20c>
				__HAL_TIM_SET_AUTORELOAD(&htim10,1000*10);
 8002e76:	4b22      	ldr	r3, [pc, #136]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e7e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e80:	4b1f      	ldr	r3, [pc, #124]	; (8002f00 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8002e82:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e86:	60da      	str	r2, [r3, #12]
			preBeepForUltra=8;
 8002e88:	4b1c      	ldr	r3, [pc, #112]	; (8002efc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8002e8a:	2208      	movs	r2, #8
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e000      	b.n	8002e92 <HAL_TIM_PeriodElapsedCallback+0x216>
		}

	}
 8002e90:	bf00      	nop
	if(htim -> Instance ==TIM11){
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d111      	bne.n	8002ec0 <HAL_TIM_PeriodElapsedCallback+0x244>
		loopForMain++;
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	b29a      	uxth	r2, r3
 8002ea4:	4b19      	ldr	r3, [pc, #100]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002ea6:	801a      	strh	r2, [r3, #0]
		if(loopForMain==610){
 8002ea8:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002eaa:	881b      	ldrh	r3, [r3, #0]
 8002eac:	f240 2262 	movw	r2, #610	; 0x262
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d102      	bne.n	8002eba <HAL_TIM_PeriodElapsedCallback+0x23e>
			loopForMain=1;
 8002eb4:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0x290>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	801a      	strh	r2, [r3, #0]
		}
		main_loop_control(1);
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f000 f828 	bl	8002f10 <main_loop_control>


	}
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000938 	.word	0x20000938
 8002ecc:	20000264 	.word	0x20000264
 8002ed0:	2000000e 	.word	0x2000000e
 8002ed4:	40002000 	.word	0x40002000
 8002ed8:	20000269 	.word	0x20000269
 8002edc:	40001400 	.word	0x40001400
 8002ee0:	20000287 	.word	0x20000287
 8002ee4:	40020800 	.word	0x40020800
 8002ee8:	20000286 	.word	0x20000286
 8002eec:	20000285 	.word	0x20000285
 8002ef0:	40014000 	.word	0x40014000
 8002ef4:	40014400 	.word	0x40014400
 8002ef8:	2000026d 	.word	0x2000026d
 8002efc:	2000001b 	.word	0x2000001b
 8002f00:	2000050c 	.word	0x2000050c
 8002f04:	40021800 	.word	0x40021800
 8002f08:	40014800 	.word	0x40014800
 8002f0c:	20000018 	.word	0x20000018

08002f10 <main_loop_control>:

uint8_t act_m_ct=0;
void main_loop_control(uint8_t mode){
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	4603      	mov	r3, r0
 8002f18:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d003      	beq.n	8002f28 <main_loop_control+0x18>
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	f000 808b 	beq.w	800303c <main_loop_control+0x12c>
									// ?��?��?��
								}
		}
		break;
	}
}
 8002f26:	e1ef      	b.n	8003308 <main_loop_control+0x3f8>
		if(loopForMain%5 == 0){
 8002f28:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <main_loop_control+0x110>)
 8002f2a:	881a      	ldrh	r2, [r3, #0]
 8002f2c:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <main_loop_control+0x114>)
 8002f2e:	fba3 1302 	umull	r1, r3, r3, r2
 8002f32:	0899      	lsrs	r1, r3, #2
 8002f34:	460b      	mov	r3, r1
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	440b      	add	r3, r1
 8002f3a:	1ad3      	subs	r3, r2, r3
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d105      	bne.n	8002f4e <main_loop_control+0x3e>
			F_mainLoop.flag_FSR++;
 8002f42:	4b39      	ldr	r3, [pc, #228]	; (8003028 <main_loop_control+0x118>)
 8002f44:	895b      	ldrh	r3, [r3, #10]
 8002f46:	3301      	adds	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	4b37      	ldr	r3, [pc, #220]	; (8003028 <main_loop_control+0x118>)
 8002f4c:	815a      	strh	r2, [r3, #10]
		if(loopForMain%8 == 0){
 8002f4e:	4b34      	ldr	r3, [pc, #208]	; (8003020 <main_loop_control+0x110>)
 8002f50:	881b      	ldrh	r3, [r3, #0]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <main_loop_control+0x58>
			F_mainLoop.flag_MPU6050++;
 8002f5c:	4b32      	ldr	r3, [pc, #200]	; (8003028 <main_loop_control+0x118>)
 8002f5e:	885b      	ldrh	r3, [r3, #2]
 8002f60:	3301      	adds	r3, #1
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	4b30      	ldr	r3, [pc, #192]	; (8003028 <main_loop_control+0x118>)
 8002f66:	805a      	strh	r2, [r3, #2]
		if(loopForMain%8 == 0){
 8002f68:	4b2d      	ldr	r3, [pc, #180]	; (8003020 <main_loop_control+0x110>)
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <main_loop_control+0x72>
			F_mainLoop.flag_GPIO++;
 8002f76:	4b2c      	ldr	r3, [pc, #176]	; (8003028 <main_loop_control+0x118>)
 8002f78:	899b      	ldrh	r3, [r3, #12]
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	4b2a      	ldr	r3, [pc, #168]	; (8003028 <main_loop_control+0x118>)
 8002f80:	819a      	strh	r2, [r3, #12]
		if(loopForMain%8 == 0){
 8002f82:	4b27      	ldr	r3, [pc, #156]	; (8003020 <main_loop_control+0x110>)
 8002f84:	881b      	ldrh	r3, [r3, #0]
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d105      	bne.n	8002f9c <main_loop_control+0x8c>
			F_mainLoop.flag_CDS++;
 8002f90:	4b25      	ldr	r3, [pc, #148]	; (8003028 <main_loop_control+0x118>)
 8002f92:	889b      	ldrh	r3, [r3, #4]
 8002f94:	3301      	adds	r3, #1
 8002f96:	b29a      	uxth	r2, r3
 8002f98:	4b23      	ldr	r3, [pc, #140]	; (8003028 <main_loop_control+0x118>)
 8002f9a:	809a      	strh	r2, [r3, #4]
		if(loopForMain%50 == 0){
 8002f9c:	4b20      	ldr	r3, [pc, #128]	; (8003020 <main_loop_control+0x110>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	4a22      	ldr	r2, [pc, #136]	; (800302c <main_loop_control+0x11c>)
 8002fa2:	fba2 1203 	umull	r1, r2, r2, r3
 8002fa6:	0912      	lsrs	r2, r2, #4
 8002fa8:	2132      	movs	r1, #50	; 0x32
 8002faa:	fb01 f202 	mul.w	r2, r1, r2
 8002fae:	1a9b      	subs	r3, r3, r2
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d105      	bne.n	8002fc2 <main_loop_control+0xb2>
			F_mainLoop.flag_BATTERY++;
 8002fb6:	4b1c      	ldr	r3, [pc, #112]	; (8003028 <main_loop_control+0x118>)
 8002fb8:	891b      	ldrh	r3, [r3, #8]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <main_loop_control+0x118>)
 8002fc0:	811a      	strh	r2, [r3, #8]
		if(loopForMain%30 == 0){
 8002fc2:	4b17      	ldr	r3, [pc, #92]	; (8003020 <main_loop_control+0x110>)
 8002fc4:	881a      	ldrh	r2, [r3, #0]
 8002fc6:	4b1a      	ldr	r3, [pc, #104]	; (8003030 <main_loop_control+0x120>)
 8002fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8002fcc:	0919      	lsrs	r1, r3, #4
 8002fce:	460b      	mov	r3, r1
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a5b      	subs	r3, r3, r1
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d105      	bne.n	8002fea <main_loop_control+0xda>
			F_mainLoop.flag_DHT11++;
 8002fde:	4b12      	ldr	r3, [pc, #72]	; (8003028 <main_loop_control+0x118>)
 8002fe0:	881b      	ldrh	r3, [r3, #0]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <main_loop_control+0x118>)
 8002fe8:	801a      	strh	r2, [r3, #0]
		if(flag_motor_B_F == 1){
 8002fea:	4b12      	ldr	r3, [pc, #72]	; (8003034 <main_loop_control+0x124>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d10e      	bne.n	8003010 <main_loop_control+0x100>
			if(loopForMain % 2 == 0){
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <main_loop_control+0x110>)
 8002ff4:	881b      	ldrh	r3, [r3, #0]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	f040 8180 	bne.w	8003302 <main_loop_control+0x3f2>
				F_mainLoop.flag_ULTRA+=4;
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <main_loop_control+0x118>)
 8003004:	88db      	ldrh	r3, [r3, #6]
 8003006:	3304      	adds	r3, #4
 8003008:	b29a      	uxth	r2, r3
 800300a:	4b07      	ldr	r3, [pc, #28]	; (8003028 <main_loop_control+0x118>)
 800300c:	80da      	strh	r2, [r3, #6]
		break;
 800300e:	e178      	b.n	8003302 <main_loop_control+0x3f2>
			F_mainLoop.flag_ULTRA=0;
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <main_loop_control+0x118>)
 8003012:	2200      	movs	r2, #0
 8003014:	80da      	strh	r2, [r3, #6]
			beepforultra=0;
 8003016:	4b08      	ldr	r3, [pc, #32]	; (8003038 <main_loop_control+0x128>)
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
		break;
 800301c:	e171      	b.n	8003302 <main_loop_control+0x3f2>
 800301e:	bf00      	nop
 8003020:	20000018 	.word	0x20000018
 8003024:	cccccccd 	.word	0xcccccccd
 8003028:	20000000 	.word	0x20000000
 800302c:	51eb851f 	.word	0x51eb851f
 8003030:	88888889 	.word	0x88888889
 8003034:	20000287 	.word	0x20000287
 8003038:	2000026d 	.word	0x2000026d
		act_m_ct=0;
 800303c:	4b90      	ldr	r3, [pc, #576]	; (8003280 <main_loop_control+0x370>)
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
		if(!act_m_ct){
 8003042:	4b8f      	ldr	r3, [pc, #572]	; (8003280 <main_loop_control+0x370>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d12c      	bne.n	80030a4 <main_loop_control+0x194>
			if(F_mainLoop.flag_BATTERY>=F_mainLoop.flag_CDS)
 800304a:	4b8e      	ldr	r3, [pc, #568]	; (8003284 <main_loop_control+0x374>)
 800304c:	891a      	ldrh	r2, [r3, #8]
 800304e:	4b8d      	ldr	r3, [pc, #564]	; (8003284 <main_loop_control+0x374>)
 8003050:	889b      	ldrh	r3, [r3, #4]
 8003052:	429a      	cmp	r2, r3
 8003054:	d326      	bcc.n	80030a4 <main_loop_control+0x194>
				if(F_mainLoop.flag_BATTERY>=F_mainLoop.flag_DHT11)
 8003056:	4b8b      	ldr	r3, [pc, #556]	; (8003284 <main_loop_control+0x374>)
 8003058:	891a      	ldrh	r2, [r3, #8]
 800305a:	4b8a      	ldr	r3, [pc, #552]	; (8003284 <main_loop_control+0x374>)
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d320      	bcc.n	80030a4 <main_loop_control+0x194>
					if(F_mainLoop.flag_BATTERY>=F_mainLoop.flag_FSR)
 8003062:	4b88      	ldr	r3, [pc, #544]	; (8003284 <main_loop_control+0x374>)
 8003064:	891a      	ldrh	r2, [r3, #8]
 8003066:	4b87      	ldr	r3, [pc, #540]	; (8003284 <main_loop_control+0x374>)
 8003068:	895b      	ldrh	r3, [r3, #10]
 800306a:	429a      	cmp	r2, r3
 800306c:	d31a      	bcc.n	80030a4 <main_loop_control+0x194>
						if(F_mainLoop.flag_BATTERY>=F_mainLoop.flag_GPIO)
 800306e:	4b85      	ldr	r3, [pc, #532]	; (8003284 <main_loop_control+0x374>)
 8003070:	891a      	ldrh	r2, [r3, #8]
 8003072:	4b84      	ldr	r3, [pc, #528]	; (8003284 <main_loop_control+0x374>)
 8003074:	899b      	ldrh	r3, [r3, #12]
 8003076:	429a      	cmp	r2, r3
 8003078:	d314      	bcc.n	80030a4 <main_loop_control+0x194>
							if(F_mainLoop.flag_BATTERY>=F_mainLoop.flag_MPU6050)
 800307a:	4b82      	ldr	r3, [pc, #520]	; (8003284 <main_loop_control+0x374>)
 800307c:	891a      	ldrh	r2, [r3, #8]
 800307e:	4b81      	ldr	r3, [pc, #516]	; (8003284 <main_loop_control+0x374>)
 8003080:	885b      	ldrh	r3, [r3, #2]
 8003082:	429a      	cmp	r2, r3
 8003084:	d30e      	bcc.n	80030a4 <main_loop_control+0x194>
								if(F_mainLoop.flag_BATTERY>=F_mainLoop.flag_ULTRA){
 8003086:	4b7f      	ldr	r3, [pc, #508]	; (8003284 <main_loop_control+0x374>)
 8003088:	891a      	ldrh	r2, [r3, #8]
 800308a:	4b7e      	ldr	r3, [pc, #504]	; (8003284 <main_loop_control+0x374>)
 800308c:	88db      	ldrh	r3, [r3, #6]
 800308e:	429a      	cmp	r2, r3
 8003090:	d308      	bcc.n	80030a4 <main_loop_control+0x194>
									F_mainLoop.flag_BATTERY=0;
 8003092:	4b7c      	ldr	r3, [pc, #496]	; (8003284 <main_loop_control+0x374>)
 8003094:	2200      	movs	r2, #0
 8003096:	811a      	strh	r2, [r3, #8]
									F_active=F_BATTERY;
 8003098:	4b7b      	ldr	r3, [pc, #492]	; (8003288 <main_loop_control+0x378>)
 800309a:	2205      	movs	r2, #5
 800309c:	701a      	strb	r2, [r3, #0]
									act_m_ct=1;
 800309e:	4b78      	ldr	r3, [pc, #480]	; (8003280 <main_loop_control+0x370>)
 80030a0:	2201      	movs	r2, #1
 80030a2:	701a      	strb	r2, [r3, #0]
		if(!act_m_ct){
 80030a4:	4b76      	ldr	r3, [pc, #472]	; (8003280 <main_loop_control+0x370>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d12c      	bne.n	8003106 <main_loop_control+0x1f6>
			if(F_mainLoop.flag_CDS>=F_mainLoop.flag_BATTERY)
 80030ac:	4b75      	ldr	r3, [pc, #468]	; (8003284 <main_loop_control+0x374>)
 80030ae:	889a      	ldrh	r2, [r3, #4]
 80030b0:	4b74      	ldr	r3, [pc, #464]	; (8003284 <main_loop_control+0x374>)
 80030b2:	891b      	ldrh	r3, [r3, #8]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d326      	bcc.n	8003106 <main_loop_control+0x1f6>
				if(F_mainLoop.flag_CDS>=F_mainLoop.flag_DHT11)
 80030b8:	4b72      	ldr	r3, [pc, #456]	; (8003284 <main_loop_control+0x374>)
 80030ba:	889a      	ldrh	r2, [r3, #4]
 80030bc:	4b71      	ldr	r3, [pc, #452]	; (8003284 <main_loop_control+0x374>)
 80030be:	881b      	ldrh	r3, [r3, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d320      	bcc.n	8003106 <main_loop_control+0x1f6>
					if(F_mainLoop.flag_CDS>=F_mainLoop.flag_FSR)
 80030c4:	4b6f      	ldr	r3, [pc, #444]	; (8003284 <main_loop_control+0x374>)
 80030c6:	889a      	ldrh	r2, [r3, #4]
 80030c8:	4b6e      	ldr	r3, [pc, #440]	; (8003284 <main_loop_control+0x374>)
 80030ca:	895b      	ldrh	r3, [r3, #10]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d31a      	bcc.n	8003106 <main_loop_control+0x1f6>
						if(F_mainLoop.flag_CDS>=F_mainLoop.flag_GPIO)
 80030d0:	4b6c      	ldr	r3, [pc, #432]	; (8003284 <main_loop_control+0x374>)
 80030d2:	889a      	ldrh	r2, [r3, #4]
 80030d4:	4b6b      	ldr	r3, [pc, #428]	; (8003284 <main_loop_control+0x374>)
 80030d6:	899b      	ldrh	r3, [r3, #12]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d314      	bcc.n	8003106 <main_loop_control+0x1f6>
							if(F_mainLoop.flag_CDS>=F_mainLoop.flag_MPU6050)
 80030dc:	4b69      	ldr	r3, [pc, #420]	; (8003284 <main_loop_control+0x374>)
 80030de:	889a      	ldrh	r2, [r3, #4]
 80030e0:	4b68      	ldr	r3, [pc, #416]	; (8003284 <main_loop_control+0x374>)
 80030e2:	885b      	ldrh	r3, [r3, #2]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d30e      	bcc.n	8003106 <main_loop_control+0x1f6>
								if(F_mainLoop.flag_CDS>=F_mainLoop.flag_ULTRA){
 80030e8:	4b66      	ldr	r3, [pc, #408]	; (8003284 <main_loop_control+0x374>)
 80030ea:	889a      	ldrh	r2, [r3, #4]
 80030ec:	4b65      	ldr	r3, [pc, #404]	; (8003284 <main_loop_control+0x374>)
 80030ee:	88db      	ldrh	r3, [r3, #6]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d308      	bcc.n	8003106 <main_loop_control+0x1f6>
									F_mainLoop.flag_CDS=0;
 80030f4:	4b63      	ldr	r3, [pc, #396]	; (8003284 <main_loop_control+0x374>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	809a      	strh	r2, [r3, #4]
									F_active=F_CDS;
 80030fa:	4b63      	ldr	r3, [pc, #396]	; (8003288 <main_loop_control+0x378>)
 80030fc:	2203      	movs	r2, #3
 80030fe:	701a      	strb	r2, [r3, #0]
									act_m_ct=1;
 8003100:	4b5f      	ldr	r3, [pc, #380]	; (8003280 <main_loop_control+0x370>)
 8003102:	2201      	movs	r2, #1
 8003104:	701a      	strb	r2, [r3, #0]
		if(!act_m_ct){
 8003106:	4b5e      	ldr	r3, [pc, #376]	; (8003280 <main_loop_control+0x370>)
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d12c      	bne.n	8003168 <main_loop_control+0x258>
			if(F_mainLoop.flag_DHT11>=F_mainLoop.flag_BATTERY)
 800310e:	4b5d      	ldr	r3, [pc, #372]	; (8003284 <main_loop_control+0x374>)
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	4b5c      	ldr	r3, [pc, #368]	; (8003284 <main_loop_control+0x374>)
 8003114:	891b      	ldrh	r3, [r3, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d326      	bcc.n	8003168 <main_loop_control+0x258>
				if(F_mainLoop.flag_DHT11>=F_mainLoop.flag_CDS)
 800311a:	4b5a      	ldr	r3, [pc, #360]	; (8003284 <main_loop_control+0x374>)
 800311c:	881a      	ldrh	r2, [r3, #0]
 800311e:	4b59      	ldr	r3, [pc, #356]	; (8003284 <main_loop_control+0x374>)
 8003120:	889b      	ldrh	r3, [r3, #4]
 8003122:	429a      	cmp	r2, r3
 8003124:	d320      	bcc.n	8003168 <main_loop_control+0x258>
					if(F_mainLoop.flag_DHT11>=F_mainLoop.flag_FSR)
 8003126:	4b57      	ldr	r3, [pc, #348]	; (8003284 <main_loop_control+0x374>)
 8003128:	881a      	ldrh	r2, [r3, #0]
 800312a:	4b56      	ldr	r3, [pc, #344]	; (8003284 <main_loop_control+0x374>)
 800312c:	895b      	ldrh	r3, [r3, #10]
 800312e:	429a      	cmp	r2, r3
 8003130:	d31a      	bcc.n	8003168 <main_loop_control+0x258>
						if(F_mainLoop.flag_DHT11>=F_mainLoop.flag_GPIO)
 8003132:	4b54      	ldr	r3, [pc, #336]	; (8003284 <main_loop_control+0x374>)
 8003134:	881a      	ldrh	r2, [r3, #0]
 8003136:	4b53      	ldr	r3, [pc, #332]	; (8003284 <main_loop_control+0x374>)
 8003138:	899b      	ldrh	r3, [r3, #12]
 800313a:	429a      	cmp	r2, r3
 800313c:	d314      	bcc.n	8003168 <main_loop_control+0x258>
							if(F_mainLoop.flag_DHT11>=F_mainLoop.flag_MPU6050)
 800313e:	4b51      	ldr	r3, [pc, #324]	; (8003284 <main_loop_control+0x374>)
 8003140:	881a      	ldrh	r2, [r3, #0]
 8003142:	4b50      	ldr	r3, [pc, #320]	; (8003284 <main_loop_control+0x374>)
 8003144:	885b      	ldrh	r3, [r3, #2]
 8003146:	429a      	cmp	r2, r3
 8003148:	d30e      	bcc.n	8003168 <main_loop_control+0x258>
								if(F_mainLoop.flag_DHT11>=F_mainLoop.flag_ULTRA){
 800314a:	4b4e      	ldr	r3, [pc, #312]	; (8003284 <main_loop_control+0x374>)
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	4b4d      	ldr	r3, [pc, #308]	; (8003284 <main_loop_control+0x374>)
 8003150:	88db      	ldrh	r3, [r3, #6]
 8003152:	429a      	cmp	r2, r3
 8003154:	d308      	bcc.n	8003168 <main_loop_control+0x258>
									F_mainLoop.flag_DHT11=0;
 8003156:	4b4b      	ldr	r3, [pc, #300]	; (8003284 <main_loop_control+0x374>)
 8003158:	2200      	movs	r2, #0
 800315a:	801a      	strh	r2, [r3, #0]
									F_active=F_DHT11;
 800315c:	4b4a      	ldr	r3, [pc, #296]	; (8003288 <main_loop_control+0x378>)
 800315e:	2201      	movs	r2, #1
 8003160:	701a      	strb	r2, [r3, #0]
									act_m_ct=1;
 8003162:	4b47      	ldr	r3, [pc, #284]	; (8003280 <main_loop_control+0x370>)
 8003164:	2201      	movs	r2, #1
 8003166:	701a      	strb	r2, [r3, #0]
		if(!act_m_ct){
 8003168:	4b45      	ldr	r3, [pc, #276]	; (8003280 <main_loop_control+0x370>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d12c      	bne.n	80031ca <main_loop_control+0x2ba>
			if(F_mainLoop.flag_FSR>=F_mainLoop.flag_BATTERY)
 8003170:	4b44      	ldr	r3, [pc, #272]	; (8003284 <main_loop_control+0x374>)
 8003172:	895a      	ldrh	r2, [r3, #10]
 8003174:	4b43      	ldr	r3, [pc, #268]	; (8003284 <main_loop_control+0x374>)
 8003176:	891b      	ldrh	r3, [r3, #8]
 8003178:	429a      	cmp	r2, r3
 800317a:	d326      	bcc.n	80031ca <main_loop_control+0x2ba>
				if(F_mainLoop.flag_FSR>=F_mainLoop.flag_CDS)
 800317c:	4b41      	ldr	r3, [pc, #260]	; (8003284 <main_loop_control+0x374>)
 800317e:	895a      	ldrh	r2, [r3, #10]
 8003180:	4b40      	ldr	r3, [pc, #256]	; (8003284 <main_loop_control+0x374>)
 8003182:	889b      	ldrh	r3, [r3, #4]
 8003184:	429a      	cmp	r2, r3
 8003186:	d320      	bcc.n	80031ca <main_loop_control+0x2ba>
					if(F_mainLoop.flag_FSR>=F_mainLoop.flag_DHT11)
 8003188:	4b3e      	ldr	r3, [pc, #248]	; (8003284 <main_loop_control+0x374>)
 800318a:	895a      	ldrh	r2, [r3, #10]
 800318c:	4b3d      	ldr	r3, [pc, #244]	; (8003284 <main_loop_control+0x374>)
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d31a      	bcc.n	80031ca <main_loop_control+0x2ba>
						if(F_mainLoop.flag_FSR>=F_mainLoop.flag_GPIO)
 8003194:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <main_loop_control+0x374>)
 8003196:	895a      	ldrh	r2, [r3, #10]
 8003198:	4b3a      	ldr	r3, [pc, #232]	; (8003284 <main_loop_control+0x374>)
 800319a:	899b      	ldrh	r3, [r3, #12]
 800319c:	429a      	cmp	r2, r3
 800319e:	d314      	bcc.n	80031ca <main_loop_control+0x2ba>
							if(F_mainLoop.flag_FSR>=F_mainLoop.flag_MPU6050)
 80031a0:	4b38      	ldr	r3, [pc, #224]	; (8003284 <main_loop_control+0x374>)
 80031a2:	895a      	ldrh	r2, [r3, #10]
 80031a4:	4b37      	ldr	r3, [pc, #220]	; (8003284 <main_loop_control+0x374>)
 80031a6:	885b      	ldrh	r3, [r3, #2]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d30e      	bcc.n	80031ca <main_loop_control+0x2ba>
								if(F_mainLoop.flag_FSR>=F_mainLoop.flag_ULTRA){
 80031ac:	4b35      	ldr	r3, [pc, #212]	; (8003284 <main_loop_control+0x374>)
 80031ae:	895a      	ldrh	r2, [r3, #10]
 80031b0:	4b34      	ldr	r3, [pc, #208]	; (8003284 <main_loop_control+0x374>)
 80031b2:	88db      	ldrh	r3, [r3, #6]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d308      	bcc.n	80031ca <main_loop_control+0x2ba>
									F_mainLoop.flag_FSR=0;
 80031b8:	4b32      	ldr	r3, [pc, #200]	; (8003284 <main_loop_control+0x374>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	815a      	strh	r2, [r3, #10]
									F_active=F_FSR;
 80031be:	4b32      	ldr	r3, [pc, #200]	; (8003288 <main_loop_control+0x378>)
 80031c0:	2206      	movs	r2, #6
 80031c2:	701a      	strb	r2, [r3, #0]
									act_m_ct=1;
 80031c4:	4b2e      	ldr	r3, [pc, #184]	; (8003280 <main_loop_control+0x370>)
 80031c6:	2201      	movs	r2, #1
 80031c8:	701a      	strb	r2, [r3, #0]
		if(!act_m_ct){
 80031ca:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <main_loop_control+0x370>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d12c      	bne.n	800322c <main_loop_control+0x31c>
			if(F_mainLoop.flag_GPIO>=F_mainLoop.flag_BATTERY)
 80031d2:	4b2c      	ldr	r3, [pc, #176]	; (8003284 <main_loop_control+0x374>)
 80031d4:	899a      	ldrh	r2, [r3, #12]
 80031d6:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <main_loop_control+0x374>)
 80031d8:	891b      	ldrh	r3, [r3, #8]
 80031da:	429a      	cmp	r2, r3
 80031dc:	d326      	bcc.n	800322c <main_loop_control+0x31c>
				if(F_mainLoop.flag_GPIO>=F_mainLoop.flag_CDS)
 80031de:	4b29      	ldr	r3, [pc, #164]	; (8003284 <main_loop_control+0x374>)
 80031e0:	899a      	ldrh	r2, [r3, #12]
 80031e2:	4b28      	ldr	r3, [pc, #160]	; (8003284 <main_loop_control+0x374>)
 80031e4:	889b      	ldrh	r3, [r3, #4]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d320      	bcc.n	800322c <main_loop_control+0x31c>
					if(F_mainLoop.flag_GPIO>=F_mainLoop.flag_DHT11)
 80031ea:	4b26      	ldr	r3, [pc, #152]	; (8003284 <main_loop_control+0x374>)
 80031ec:	899a      	ldrh	r2, [r3, #12]
 80031ee:	4b25      	ldr	r3, [pc, #148]	; (8003284 <main_loop_control+0x374>)
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d31a      	bcc.n	800322c <main_loop_control+0x31c>
						if(F_mainLoop.flag_GPIO>=F_mainLoop.flag_FSR)
 80031f6:	4b23      	ldr	r3, [pc, #140]	; (8003284 <main_loop_control+0x374>)
 80031f8:	899a      	ldrh	r2, [r3, #12]
 80031fa:	4b22      	ldr	r3, [pc, #136]	; (8003284 <main_loop_control+0x374>)
 80031fc:	895b      	ldrh	r3, [r3, #10]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d314      	bcc.n	800322c <main_loop_control+0x31c>
							if(F_mainLoop.flag_GPIO>=F_mainLoop.flag_MPU6050)
 8003202:	4b20      	ldr	r3, [pc, #128]	; (8003284 <main_loop_control+0x374>)
 8003204:	899a      	ldrh	r2, [r3, #12]
 8003206:	4b1f      	ldr	r3, [pc, #124]	; (8003284 <main_loop_control+0x374>)
 8003208:	885b      	ldrh	r3, [r3, #2]
 800320a:	429a      	cmp	r2, r3
 800320c:	d30e      	bcc.n	800322c <main_loop_control+0x31c>
								if(F_mainLoop.flag_GPIO>=F_mainLoop.flag_ULTRA){
 800320e:	4b1d      	ldr	r3, [pc, #116]	; (8003284 <main_loop_control+0x374>)
 8003210:	899a      	ldrh	r2, [r3, #12]
 8003212:	4b1c      	ldr	r3, [pc, #112]	; (8003284 <main_loop_control+0x374>)
 8003214:	88db      	ldrh	r3, [r3, #6]
 8003216:	429a      	cmp	r2, r3
 8003218:	d308      	bcc.n	800322c <main_loop_control+0x31c>
									F_mainLoop.flag_GPIO=0;
 800321a:	4b1a      	ldr	r3, [pc, #104]	; (8003284 <main_loop_control+0x374>)
 800321c:	2200      	movs	r2, #0
 800321e:	819a      	strh	r2, [r3, #12]
									F_active=F_GPIO;
 8003220:	4b19      	ldr	r3, [pc, #100]	; (8003288 <main_loop_control+0x378>)
 8003222:	2207      	movs	r2, #7
 8003224:	701a      	strb	r2, [r3, #0]
									act_m_ct=1;
 8003226:	4b16      	ldr	r3, [pc, #88]	; (8003280 <main_loop_control+0x370>)
 8003228:	2201      	movs	r2, #1
 800322a:	701a      	strb	r2, [r3, #0]
		if(!act_m_ct){
 800322c:	4b14      	ldr	r3, [pc, #80]	; (8003280 <main_loop_control+0x370>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d134      	bne.n	800329e <main_loop_control+0x38e>
			if(F_mainLoop.flag_MPU6050>=F_mainLoop.flag_BATTERY)
 8003234:	4b13      	ldr	r3, [pc, #76]	; (8003284 <main_loop_control+0x374>)
 8003236:	885a      	ldrh	r2, [r3, #2]
 8003238:	4b12      	ldr	r3, [pc, #72]	; (8003284 <main_loop_control+0x374>)
 800323a:	891b      	ldrh	r3, [r3, #8]
 800323c:	429a      	cmp	r2, r3
 800323e:	d32e      	bcc.n	800329e <main_loop_control+0x38e>
				if(F_mainLoop.flag_MPU6050>=F_mainLoop.flag_CDS)
 8003240:	4b10      	ldr	r3, [pc, #64]	; (8003284 <main_loop_control+0x374>)
 8003242:	885a      	ldrh	r2, [r3, #2]
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <main_loop_control+0x374>)
 8003246:	889b      	ldrh	r3, [r3, #4]
 8003248:	429a      	cmp	r2, r3
 800324a:	d328      	bcc.n	800329e <main_loop_control+0x38e>
					if(F_mainLoop.flag_MPU6050>=F_mainLoop.flag_DHT11)
 800324c:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <main_loop_control+0x374>)
 800324e:	885a      	ldrh	r2, [r3, #2]
 8003250:	4b0c      	ldr	r3, [pc, #48]	; (8003284 <main_loop_control+0x374>)
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	429a      	cmp	r2, r3
 8003256:	d322      	bcc.n	800329e <main_loop_control+0x38e>
						if(F_mainLoop.flag_MPU6050>=F_mainLoop.flag_FSR)
 8003258:	4b0a      	ldr	r3, [pc, #40]	; (8003284 <main_loop_control+0x374>)
 800325a:	885a      	ldrh	r2, [r3, #2]
 800325c:	4b09      	ldr	r3, [pc, #36]	; (8003284 <main_loop_control+0x374>)
 800325e:	895b      	ldrh	r3, [r3, #10]
 8003260:	429a      	cmp	r2, r3
 8003262:	d31c      	bcc.n	800329e <main_loop_control+0x38e>
							if(F_mainLoop.flag_MPU6050>=F_mainLoop.flag_GPIO)
 8003264:	4b07      	ldr	r3, [pc, #28]	; (8003284 <main_loop_control+0x374>)
 8003266:	885a      	ldrh	r2, [r3, #2]
 8003268:	4b06      	ldr	r3, [pc, #24]	; (8003284 <main_loop_control+0x374>)
 800326a:	899b      	ldrh	r3, [r3, #12]
 800326c:	429a      	cmp	r2, r3
 800326e:	d316      	bcc.n	800329e <main_loop_control+0x38e>
								if(F_mainLoop.flag_MPU6050>=F_mainLoop.flag_ULTRA){
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <main_loop_control+0x374>)
 8003272:	885a      	ldrh	r2, [r3, #2]
 8003274:	4b03      	ldr	r3, [pc, #12]	; (8003284 <main_loop_control+0x374>)
 8003276:	88db      	ldrh	r3, [r3, #6]
 8003278:	429a      	cmp	r2, r3
 800327a:	d310      	bcc.n	800329e <main_loop_control+0x38e>
 800327c:	e006      	b.n	800328c <main_loop_control+0x37c>
 800327e:	bf00      	nop
 8003280:	20000289 	.word	0x20000289
 8003284:	20000000 	.word	0x20000000
 8003288:	20000255 	.word	0x20000255
									F_mainLoop.flag_MPU6050=0;
 800328c:	4b21      	ldr	r3, [pc, #132]	; (8003314 <main_loop_control+0x404>)
 800328e:	2200      	movs	r2, #0
 8003290:	805a      	strh	r2, [r3, #2]
									F_active=F_MPU6050;
 8003292:	4b21      	ldr	r3, [pc, #132]	; (8003318 <main_loop_control+0x408>)
 8003294:	2202      	movs	r2, #2
 8003296:	701a      	strb	r2, [r3, #0]
									act_m_ct=1;
 8003298:	4b20      	ldr	r3, [pc, #128]	; (800331c <main_loop_control+0x40c>)
 800329a:	2201      	movs	r2, #1
 800329c:	701a      	strb	r2, [r3, #0]
		if(!act_m_ct){
 800329e:	4b1f      	ldr	r3, [pc, #124]	; (800331c <main_loop_control+0x40c>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d12f      	bne.n	8003306 <main_loop_control+0x3f6>
			if(F_mainLoop.flag_ULTRA>=F_mainLoop.flag_BATTERY)
 80032a6:	4b1b      	ldr	r3, [pc, #108]	; (8003314 <main_loop_control+0x404>)
 80032a8:	88da      	ldrh	r2, [r3, #6]
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <main_loop_control+0x404>)
 80032ac:	891b      	ldrh	r3, [r3, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d329      	bcc.n	8003306 <main_loop_control+0x3f6>
				if(F_mainLoop.flag_ULTRA>=F_mainLoop.flag_CDS)
 80032b2:	4b18      	ldr	r3, [pc, #96]	; (8003314 <main_loop_control+0x404>)
 80032b4:	88da      	ldrh	r2, [r3, #6]
 80032b6:	4b17      	ldr	r3, [pc, #92]	; (8003314 <main_loop_control+0x404>)
 80032b8:	889b      	ldrh	r3, [r3, #4]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d323      	bcc.n	8003306 <main_loop_control+0x3f6>
					if(F_mainLoop.flag_ULTRA>=F_mainLoop.flag_DHT11)
 80032be:	4b15      	ldr	r3, [pc, #84]	; (8003314 <main_loop_control+0x404>)
 80032c0:	88da      	ldrh	r2, [r3, #6]
 80032c2:	4b14      	ldr	r3, [pc, #80]	; (8003314 <main_loop_control+0x404>)
 80032c4:	881b      	ldrh	r3, [r3, #0]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d31d      	bcc.n	8003306 <main_loop_control+0x3f6>
						if(F_mainLoop.flag_ULTRA>=F_mainLoop.flag_FSR)
 80032ca:	4b12      	ldr	r3, [pc, #72]	; (8003314 <main_loop_control+0x404>)
 80032cc:	88da      	ldrh	r2, [r3, #6]
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <main_loop_control+0x404>)
 80032d0:	895b      	ldrh	r3, [r3, #10]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d317      	bcc.n	8003306 <main_loop_control+0x3f6>
							if(F_mainLoop.flag_ULTRA>=F_mainLoop.flag_GPIO)
 80032d6:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <main_loop_control+0x404>)
 80032d8:	88da      	ldrh	r2, [r3, #6]
 80032da:	4b0e      	ldr	r3, [pc, #56]	; (8003314 <main_loop_control+0x404>)
 80032dc:	899b      	ldrh	r3, [r3, #12]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d311      	bcc.n	8003306 <main_loop_control+0x3f6>
								if(F_mainLoop.flag_ULTRA>=F_mainLoop.flag_MPU6050){
 80032e2:	4b0c      	ldr	r3, [pc, #48]	; (8003314 <main_loop_control+0x404>)
 80032e4:	88da      	ldrh	r2, [r3, #6]
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <main_loop_control+0x404>)
 80032e8:	885b      	ldrh	r3, [r3, #2]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d30b      	bcc.n	8003306 <main_loop_control+0x3f6>
									F_mainLoop.flag_ULTRA=0;
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <main_loop_control+0x404>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	80da      	strh	r2, [r3, #6]
									F_active=F_ULTRA;
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <main_loop_control+0x408>)
 80032f6:	2204      	movs	r2, #4
 80032f8:	701a      	strb	r2, [r3, #0]
									act_m_ct=1;
 80032fa:	4b08      	ldr	r3, [pc, #32]	; (800331c <main_loop_control+0x40c>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	701a      	strb	r2, [r3, #0]
		break;
 8003300:	e001      	b.n	8003306 <main_loop_control+0x3f6>
		break;
 8003302:	bf00      	nop
 8003304:	e000      	b.n	8003308 <main_loop_control+0x3f8>
		break;
 8003306:	bf00      	nop
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	20000000 	.word	0x20000000
 8003318:	20000255 	.word	0x20000255
 800331c:	20000289 	.word	0x20000289

08003320 <dht11_read>:
///////////////////////////////////////////////////////////////
//DHT11
char buffer[25];
uint16_t dht_temp1=0,dht_temp2=0;
int dht11_read(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b088      	sub	sp, #32
 8003324:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim6);
 8003326:	4868      	ldr	r0, [pc, #416]	; (80034c8 <dht11_read+0x1a8>)
 8003328:	f005 f9ca 	bl	80086c0 <HAL_TIM_Base_Start_IT>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800332c:	f107 0308 	add.w	r3, r7, #8
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
 8003334:	605a      	str	r2, [r3, #4]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	60da      	str	r2, [r3, #12]
 800333a:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = DHT11_data_Pin;
 800333c:	2301      	movs	r3, #1
 800333e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003340:	2301      	movs	r3, #1
 8003342:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DHT11_data_GPIO_Port, &GPIO_InitStruct);
 8003348:	f107 0308 	add.w	r3, r7, #8
 800334c:	4619      	mov	r1, r3
 800334e:	485f      	ldr	r0, [pc, #380]	; (80034cc <dht11_read+0x1ac>)
 8003350:	f002 f9c4 	bl	80056dc <HAL_GPIO_Init>

	HAL_GPIO_WritePin(DHT11_data_GPIO_Port, DHT11_data_Pin, RESET);
 8003354:	2200      	movs	r2, #0
 8003356:	2101      	movs	r1, #1
 8003358:	485c      	ldr	r0, [pc, #368]	; (80034cc <dht11_read+0x1ac>)
 800335a:	f002 fb83 	bl	8005a64 <HAL_GPIO_WritePin>

	delay_us(18000);
 800335e:	f244 6050 	movw	r0, #18000	; 0x4650
 8003362:	f000 f8db 	bl	800351c <delay_us>

	HAL_GPIO_WritePin(DHT11_data_GPIO_Port, DHT11_data_Pin, SET);
 8003366:	2201      	movs	r2, #1
 8003368:	2101      	movs	r1, #1
 800336a:	4858      	ldr	r0, [pc, #352]	; (80034cc <dht11_read+0x1ac>)
 800336c:	f002 fb7a 	bl	8005a64 <HAL_GPIO_WritePin>
	delay_us(20);
 8003370:	2014      	movs	r0, #20
 8003372:	f000 f8d3 	bl	800351c <delay_us>

	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800337a:	2300      	movs	r3, #0
 800337c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(DHT11_data_GPIO_Port, &GPIO_InitStruct);
 800337e:	f107 0308 	add.w	r3, r7, #8
 8003382:	4619      	mov	r1, r3
 8003384:	4851      	ldr	r0, [pc, #324]	; (80034cc <dht11_read+0x1ac>)
 8003386:	f002 f9a9 	bl	80056dc <HAL_GPIO_Init>

	delay_us(40);
 800338a:	2028      	movs	r0, #40	; 0x28
 800338c:	f000 f8c6 	bl	800351c <delay_us>
	if(!(HAL_GPIO_ReadPin(DHT11_data_GPIO_Port, DHT11_data_Pin))) {
 8003390:	2101      	movs	r1, #1
 8003392:	484e      	ldr	r0, [pc, #312]	; (80034cc <dht11_read+0x1ac>)
 8003394:	f002 fb4e 	bl	8005a34 <HAL_GPIO_ReadPin>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10c      	bne.n	80033b8 <dht11_read+0x98>
		delay_us(80);
 800339e:	2050      	movs	r0, #80	; 0x50
 80033a0:	f000 f8bc 	bl	800351c <delay_us>
		if(!(HAL_GPIO_ReadPin(DHT11_data_GPIO_Port, DHT11_data_Pin)))
 80033a4:	2101      	movs	r1, #1
 80033a6:	4849      	ldr	r0, [pc, #292]	; (80034cc <dht11_read+0x1ac>)
 80033a8:	f002 fb44 	bl	8005a34 <HAL_GPIO_ReadPin>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d102      	bne.n	80033b8 <dht11_read+0x98>
		{
			return -1;
 80033b2:	f04f 33ff 	mov.w	r3, #4294967295
 80033b6:	e082      	b.n	80034be <dht11_read+0x19e>

		}
	}

	if(wait_pulse(GPIO_PIN_RESET) == 0)
 80033b8:	2000      	movs	r0, #0
 80033ba:	f000 f88d 	bl	80034d8 <wait_pulse>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d102      	bne.n	80033ca <dht11_read+0xaa>
	{
		return -1; // timeout
 80033c4:	f04f 33ff 	mov.w	r3, #4294967295
 80033c8:	e079      	b.n	80034be <dht11_read+0x19e>

	}

	uint8_t out[5], i, j;
	for(i = 0; i < 5; i++) {
 80033ca:	2300      	movs	r3, #0
 80033cc:	77fb      	strb	r3, [r7, #31]
 80033ce:	e058      	b.n	8003482 <dht11_read+0x162>
		for(j = 0; j < 8; j++) {
 80033d0:	2300      	movs	r3, #0
 80033d2:	77bb      	strb	r3, [r7, #30]
 80033d4:	e04f      	b.n	8003476 <dht11_read+0x156>
			if(!wait_pulse(GPIO_PIN_SET))
 80033d6:	2001      	movs	r0, #1
 80033d8:	f000 f87e 	bl	80034d8 <wait_pulse>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <dht11_read+0xc8>
			{
				return -1;
 80033e2:	f04f 33ff 	mov.w	r3, #4294967295
 80033e6:	e06a      	b.n	80034be <dht11_read+0x19e>
			}
			delay_us(40);
 80033e8:	2028      	movs	r0, #40	; 0x28
 80033ea:	f000 f897 	bl	800351c <delay_us>
			if(!(HAL_GPIO_ReadPin (DHT11_data_GPIO_Port, DHT11_data_Pin)))
 80033ee:	2101      	movs	r1, #1
 80033f0:	4836      	ldr	r0, [pc, #216]	; (80034cc <dht11_read+0x1ac>)
 80033f2:	f002 fb1f 	bl	8005a34 <HAL_GPIO_ReadPin>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d119      	bne.n	8003430 <dht11_read+0x110>
				out[i] &= ~(1<<(7-j));
 80033fc:	7ffb      	ldrb	r3, [r7, #31]
 80033fe:	f107 0220 	add.w	r2, r7, #32
 8003402:	4413      	add	r3, r2
 8003404:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 8003408:	b25a      	sxtb	r2, r3
 800340a:	7fbb      	ldrb	r3, [r7, #30]
 800340c:	f1c3 0307 	rsb	r3, r3, #7
 8003410:	2101      	movs	r1, #1
 8003412:	fa01 f303 	lsl.w	r3, r1, r3
 8003416:	b25b      	sxtb	r3, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	b25b      	sxtb	r3, r3
 800341c:	4013      	ands	r3, r2
 800341e:	b25a      	sxtb	r2, r3
 8003420:	7ffb      	ldrb	r3, [r7, #31]
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	f107 0120 	add.w	r1, r7, #32
 8003428:	440b      	add	r3, r1
 800342a:	f803 2c20 	strb.w	r2, [r3, #-32]
 800342e:	e016      	b.n	800345e <dht11_read+0x13e>
			else
				out[i] |= (1<<(7-j));
 8003430:	7ffb      	ldrb	r3, [r7, #31]
 8003432:	f107 0220 	add.w	r2, r7, #32
 8003436:	4413      	add	r3, r2
 8003438:	f813 3c20 	ldrb.w	r3, [r3, #-32]
 800343c:	b25a      	sxtb	r2, r3
 800343e:	7fbb      	ldrb	r3, [r7, #30]
 8003440:	f1c3 0307 	rsb	r3, r3, #7
 8003444:	2101      	movs	r1, #1
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	b25b      	sxtb	r3, r3
 800344c:	4313      	orrs	r3, r2
 800344e:	b25a      	sxtb	r2, r3
 8003450:	7ffb      	ldrb	r3, [r7, #31]
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	f107 0120 	add.w	r1, r7, #32
 8003458:	440b      	add	r3, r1
 800345a:	f803 2c20 	strb.w	r2, [r3, #-32]

			if(!wait_pulse(GPIO_PIN_RESET))
 800345e:	2000      	movs	r0, #0
 8003460:	f000 f83a 	bl	80034d8 <wait_pulse>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d102      	bne.n	8003470 <dht11_read+0x150>
			{
				return -1;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	e026      	b.n	80034be <dht11_read+0x19e>
		for(j = 0; j < 8; j++) {
 8003470:	7fbb      	ldrb	r3, [r7, #30]
 8003472:	3301      	adds	r3, #1
 8003474:	77bb      	strb	r3, [r7, #30]
 8003476:	7fbb      	ldrb	r3, [r7, #30]
 8003478:	2b07      	cmp	r3, #7
 800347a:	d9ac      	bls.n	80033d6 <dht11_read+0xb6>
	for(i = 0; i < 5; i++) {
 800347c:	7ffb      	ldrb	r3, [r7, #31]
 800347e:	3301      	adds	r3, #1
 8003480:	77fb      	strb	r3, [r7, #31]
 8003482:	7ffb      	ldrb	r3, [r7, #31]
 8003484:	2b04      	cmp	r3, #4
 8003486:	d9a3      	bls.n	80033d0 <dht11_read+0xb0>
			}
		}
	}


	if(out[4] != (out[0] + out[1] + out[2] + out[3]))
 8003488:	793b      	ldrb	r3, [r7, #4]
 800348a:	461a      	mov	r2, r3
 800348c:	783b      	ldrb	r3, [r7, #0]
 800348e:	4619      	mov	r1, r3
 8003490:	787b      	ldrb	r3, [r7, #1]
 8003492:	440b      	add	r3, r1
 8003494:	78b9      	ldrb	r1, [r7, #2]
 8003496:	440b      	add	r3, r1
 8003498:	78f9      	ldrb	r1, [r7, #3]
 800349a:	440b      	add	r3, r1
 800349c:	429a      	cmp	r2, r3
 800349e:	d002      	beq.n	80034a6 <dht11_read+0x186>
	{

		return -2;
 80034a0:	f06f 0301 	mvn.w	r3, #1
 80034a4:	e00b      	b.n	80034be <dht11_read+0x19e>
	}
	Temperature = out[2];
 80034a6:	78bb      	ldrb	r3, [r7, #2]
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <dht11_read+0x1b0>)
 80034ac:	601a      	str	r2, [r3, #0]
	Humidity = out[0];
 80034ae:	783b      	ldrb	r3, [r7, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <dht11_read+0x1b4>)
 80034b4:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim6);
 80034b6:	4804      	ldr	r0, [pc, #16]	; (80034c8 <dht11_read+0x1a8>)
 80034b8:	f005 f972 	bl	80087a0 <HAL_TIM_Base_Stop_IT>
	return 1;
 80034bc:	2301      	movs	r3, #1
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3720      	adds	r7, #32
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000744 	.word	0x20000744
 80034cc:	40021400 	.word	0x40021400
 80034d0:	2000025c 	.word	0x2000025c
 80034d4:	20000260 	.word	0x20000260

080034d8 <wait_pulse>:
	//		sprintf(buffer, "timeout");
	//		lcdSetCursor(20, 50);
	//		lcdPrintf(buffer);
	//	}
}
int wait_pulse(int state) {
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim6, 0);
 80034e0:	4b0c      	ldr	r3, [pc, #48]	; (8003514 <wait_pulse+0x3c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2200      	movs	r2, #0
 80034e6:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(DHT11_data_GPIO_Port, DHT11_data_Pin) != state) {
 80034e8:	e006      	b.n	80034f8 <wait_pulse+0x20>
		if(__HAL_TIM_GET_COUNTER(&htim6) >= 100) {
 80034ea:	4b0a      	ldr	r3, [pc, #40]	; (8003514 <wait_pulse+0x3c>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	2b63      	cmp	r3, #99	; 0x63
 80034f2:	d901      	bls.n	80034f8 <wait_pulse+0x20>
			return 0;
 80034f4:	2300      	movs	r3, #0
 80034f6:	e009      	b.n	800350c <wait_pulse+0x34>
	while (HAL_GPIO_ReadPin(DHT11_data_GPIO_Port, DHT11_data_Pin) != state) {
 80034f8:	2101      	movs	r1, #1
 80034fa:	4807      	ldr	r0, [pc, #28]	; (8003518 <wait_pulse+0x40>)
 80034fc:	f002 fa9a 	bl	8005a34 <HAL_GPIO_ReadPin>
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4293      	cmp	r3, r2
 8003508:	d1ef      	bne.n	80034ea <wait_pulse+0x12>
		}
	}
	return 1;
 800350a:	2301      	movs	r3, #1
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	20000744 	.word	0x20000744
 8003518:	40021400 	.word	0x40021400

0800351c <delay_us>:

void delay_us(uint16_t time) {
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SetCounter(&htim6,0);
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <delay_us+0x30>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2200      	movs	r2, #0
 800352c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim6)<time);
 800352e:	bf00      	nop
 8003530:	4b06      	ldr	r3, [pc, #24]	; (800354c <delay_us+0x30>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003536:	88fb      	ldrh	r3, [r7, #6]
 8003538:	429a      	cmp	r2, r3
 800353a:	d3f9      	bcc.n	8003530 <delay_us+0x14>
}
 800353c:	bf00      	nop
 800353e:	bf00      	nop
 8003540:	370c      	adds	r7, #12
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000744 	.word	0x20000744

08003550 <rfid_loop_init_set>:
///////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////
//RFID
uint8_t flag_rfid_lcd=1;
void rfid_loop_init_set(){
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af02      	add	r7, sp, #8
	if(FIRST_SET_UP){
 8003556:	4b57      	ldr	r3, [pc, #348]	; (80036b4 <rfid_loop_init_set+0x164>)
 8003558:	781b      	ldrb	r3, [r3, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 80a4 	beq.w	80036a8 <rfid_loop_init_set+0x158>
		card_check_flag=1;
 8003560:	4b55      	ldr	r3, [pc, #340]	; (80036b8 <rfid_loop_init_set+0x168>)
 8003562:	2201      	movs	r2, #1
 8003564:	701a      	strb	r2, [r3, #0]
		while(card_check_flag == 1 && main_loop_counter_flag < activative_time_PIR){
 8003566:	e093      	b.n	8003690 <rfid_loop_init_set+0x140>
			Q_FLAG=0;
 8003568:	4b54      	ldr	r3, [pc, #336]	; (80036bc <rfid_loop_init_set+0x16c>)
 800356a:	2200      	movs	r2, #0
 800356c:	701a      	strb	r2, [r3, #0]
			REQA_t();
 800356e:	f007 fce5 	bl	800af3c <REQA_t>
#if debug_mode ==0
			if(flag_rfid_lcd){
 8003572:	4b53      	ldr	r3, [pc, #332]	; (80036c0 <rfid_loop_init_set+0x170>)
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d01d      	beq.n	80035b6 <rfid_loop_init_set+0x66>
				flag_rfid_lcd=0;
 800357a:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <rfid_loop_init_set+0x170>)
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
				lcdFillRoundRect(20, 80, 280, 100, 5, COLOR_ORANGE);
 8003580:	f64f 5320 	movw	r3, #64800	; 0xfd20
 8003584:	9301      	str	r3, [sp, #4]
 8003586:	2305      	movs	r3, #5
 8003588:	9300      	str	r3, [sp, #0]
 800358a:	2364      	movs	r3, #100	; 0x64
 800358c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003590:	2150      	movs	r1, #80	; 0x50
 8003592:	2014      	movs	r0, #20
 8003594:	f006 fc18 	bl	8009dc8 <lcdFillRoundRect>
				lcdSetTextFont(&Font24);
 8003598:	484a      	ldr	r0, [pc, #296]	; (80036c4 <rfid_loop_init_set+0x174>)
 800359a:	f006 fdb1 	bl	800a100 <lcdSetTextFont>
				lcdSetTextColor(COLOR_BLACK, COLOR_ORANGE);
 800359e:	f64f 5120 	movw	r1, #64800	; 0xfd20
 80035a2:	2000      	movs	r0, #0
 80035a4:	f006 fdbc 	bl	800a120 <lcdSetTextColor>
				lcdSetCursor((320-170)/2, 5*24);
 80035a8:	2178      	movs	r1, #120	; 0x78
 80035aa:	204b      	movs	r0, #75	; 0x4b
 80035ac:	f006 fe3c 	bl	800a228 <lcdSetCursor>
				lcdPrintf("TOUCH CARD");
 80035b0:	4845      	ldr	r0, [pc, #276]	; (80036c8 <rfid_loop_init_set+0x178>)
 80035b2:	f006 fd19 	bl	8009fe8 <lcdPrintf>
			}
#endif

			if(Q_FLAG){
 80035b6:	4b41      	ldr	r3, [pc, #260]	; (80036bc <rfid_loop_init_set+0x16c>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d056      	beq.n	800366e <rfid_loop_init_set+0x11e>
				rfid_flag_wrong+=1;
 80035c0:	4b42      	ldr	r3, [pc, #264]	; (80036cc <rfid_loop_init_set+0x17c>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	3301      	adds	r3, #1
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	4b40      	ldr	r3, [pc, #256]	; (80036cc <rfid_loop_init_set+0x17c>)
 80035ca:	701a      	strb	r2, [r3, #0]
				check_rfid_UID();
 80035cc:	f000 f98a 	bl	80038e4 <check_rfid_UID>
				flag_rfid_lcd=1;
 80035d0:	4b3b      	ldr	r3, [pc, #236]	; (80036c0 <rfid_loop_init_set+0x170>)
 80035d2:	2201      	movs	r2, #1
 80035d4:	701a      	strb	r2, [r3, #0]
				if(card_check_flag == 0){
 80035d6:	4b38      	ldr	r3, [pc, #224]	; (80036b8 <rfid_loop_init_set+0x168>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d122      	bne.n	8003624 <rfid_loop_init_set+0xd4>
#if debug_mode ==0
					lcdFillRoundRect(20, 80, 280, 100, 5, COLOR_GREEN);
 80035de:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80035e2:	9301      	str	r3, [sp, #4]
 80035e4:	2305      	movs	r3, #5
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	2364      	movs	r3, #100	; 0x64
 80035ea:	f44f 728c 	mov.w	r2, #280	; 0x118
 80035ee:	2150      	movs	r1, #80	; 0x50
 80035f0:	2014      	movs	r0, #20
 80035f2:	f006 fbe9 	bl	8009dc8 <lcdFillRoundRect>
					lcdSetTextFont(&Font24);
 80035f6:	4833      	ldr	r0, [pc, #204]	; (80036c4 <rfid_loop_init_set+0x174>)
 80035f8:	f006 fd82 	bl	800a100 <lcdSetTextFont>
					lcdSetTextColor(COLOR_BLACK, COLOR_GREEN);
 80035fc:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8003600:	2000      	movs	r0, #0
 8003602:	f006 fd8d 	bl	800a120 <lcdSetTextColor>
					lcdSetCursor((320-126)/2, 5*24);
 8003606:	2178      	movs	r1, #120	; 0x78
 8003608:	2061      	movs	r0, #97	; 0x61
 800360a:	f006 fe0d 	bl	800a228 <lcdSetCursor>
					lcdPrintf("Reg CARD");
 800360e:	4830      	ldr	r0, [pc, #192]	; (80036d0 <rfid_loop_init_set+0x180>)
 8003610:	f006 fcea 	bl	8009fe8 <lcdPrintf>
					BEEP(1,7);
 8003614:	2107      	movs	r1, #7
 8003616:	2001      	movs	r0, #1
 8003618:	f000 fa52 	bl	8003ac0 <BEEP>
#endif
					main_start_flag=0;
 800361c:	4b2d      	ldr	r3, [pc, #180]	; (80036d4 <rfid_loop_init_set+0x184>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	e024      	b.n	800366e <rfid_loop_init_set+0x11e>
				}
				else{
#if debug_mode ==0
					lcdFillRoundRect(20, 80, 280, 100, 5, COLOR_RED);
 8003624:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003628:	9301      	str	r3, [sp, #4]
 800362a:	2305      	movs	r3, #5
 800362c:	9300      	str	r3, [sp, #0]
 800362e:	2364      	movs	r3, #100	; 0x64
 8003630:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003634:	2150      	movs	r1, #80	; 0x50
 8003636:	2014      	movs	r0, #20
 8003638:	f006 fbc6 	bl	8009dc8 <lcdFillRoundRect>
					lcdSetTextFont(&Font24);
 800363c:	4821      	ldr	r0, [pc, #132]	; (80036c4 <rfid_loop_init_set+0x174>)
 800363e:	f006 fd5f 	bl	800a100 <lcdSetTextFont>
					lcdSetTextColor(COLOR_BLACK, COLOR_RED);
 8003642:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8003646:	2000      	movs	r0, #0
 8003648:	f006 fd6a 	bl	800a120 <lcdSetTextColor>
					lcdSetCursor((320-170)/2, 5*24);
 800364c:	2178      	movs	r1, #120	; 0x78
 800364e:	204b      	movs	r0, #75	; 0x4b
 8003650:	f006 fdea 	bl	800a228 <lcdSetCursor>
					lcdPrintf("UnReg CARD");
 8003654:	4820      	ldr	r0, [pc, #128]	; (80036d8 <rfid_loop_init_set+0x188>)
 8003656:	f006 fcc7 	bl	8009fe8 <lcdPrintf>
					BEEP(2,7);
 800365a:	2107      	movs	r1, #7
 800365c:	2002      	movs	r0, #2
 800365e:	f000 fa2f 	bl	8003ac0 <BEEP>
#endif

				}
			}
			while(rfid_flag_wrong >= 5 && main_loop_counter_flag < activative_time_PIR){
 8003662:	e004      	b.n	800366e <rfid_loop_init_set+0x11e>
				HAL_GPIO_WritePin(Alarm_GPIO_Port, Alarm_Pin, SET);
 8003664:	2201      	movs	r2, #1
 8003666:	2140      	movs	r1, #64	; 0x40
 8003668:	481c      	ldr	r0, [pc, #112]	; (80036dc <rfid_loop_init_set+0x18c>)
 800366a:	f002 f9fb 	bl	8005a64 <HAL_GPIO_WritePin>
			while(rfid_flag_wrong >= 5 && main_loop_counter_flag < activative_time_PIR){
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <rfid_loop_init_set+0x17c>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b04      	cmp	r3, #4
 8003674:	d905      	bls.n	8003682 <rfid_loop_init_set+0x132>
 8003676:	4b1a      	ldr	r3, [pc, #104]	; (80036e0 <rfid_loop_init_set+0x190>)
 8003678:	781a      	ldrb	r2, [r3, #0]
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <rfid_loop_init_set+0x194>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d3f0      	bcc.n	8003664 <rfid_loop_init_set+0x114>
			}
			if(rfid_flag_wrong >= 5){
 8003682:	4b12      	ldr	r3, [pc, #72]	; (80036cc <rfid_loop_init_set+0x17c>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b04      	cmp	r3, #4
 8003688:	d902      	bls.n	8003690 <rfid_loop_init_set+0x140>
				rfid_flag_wrong=0;
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <rfid_loop_init_set+0x17c>)
 800368c:	2200      	movs	r2, #0
 800368e:	701a      	strb	r2, [r3, #0]
		while(card_check_flag == 1 && main_loop_counter_flag < activative_time_PIR){
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <rfid_loop_init_set+0x168>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d10a      	bne.n	80036ae <rfid_loop_init_set+0x15e>
 8003698:	4b11      	ldr	r3, [pc, #68]	; (80036e0 <rfid_loop_init_set+0x190>)
 800369a:	781a      	ldrb	r2, [r3, #0]
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <rfid_loop_init_set+0x194>)
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	f4ff af61 	bcc.w	8003568 <rfid_loop_init_set+0x18>
		}
	}
	else{
		main_start_flag=0;
	}
}
 80036a6:	e002      	b.n	80036ae <rfid_loop_init_set+0x15e>
		main_start_flag=0;
 80036a8:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <rfid_loop_init_set+0x184>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	701a      	strb	r2, [r3, #0]
}
 80036ae:	bf00      	nop
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	2000000f 	.word	0x2000000f
 80036b8:	20000ac1 	.word	0x20000ac1
 80036bc:	200009f8 	.word	0x200009f8
 80036c0:	2000001c 	.word	0x2000001c
 80036c4:	2000003c 	.word	0x2000003c
 80036c8:	08010780 	.word	0x08010780
 80036cc:	2000026c 	.word	0x2000026c
 80036d0:	0801081c 	.word	0x0801081c
 80036d4:	20000010 	.word	0x20000010
 80036d8:	08010828 	.word	0x08010828
 80036dc:	40020800 	.word	0x40020800
 80036e0:	20000269 	.word	0x20000269
 80036e4:	20000011 	.word	0x20000011

080036e8 <rfid_loop_setup_card>:
void rfid_loop_setup_card(){
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af02      	add	r7, sp, #8

	if(FIRST_SET_UP){
 80036ee:	4b73      	ldr	r3, [pc, #460]	; (80038bc <rfid_loop_setup_card+0x1d4>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f000 8089 	beq.w	800380a <rfid_loop_setup_card+0x122>
		Q_FLAG=0;
 80036f8:	4b71      	ldr	r3, [pc, #452]	; (80038c0 <rfid_loop_setup_card+0x1d8>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]

		REQA_t();
 80036fe:	f007 fc1d 	bl	800af3c <REQA_t>
		if(Q_FLAG){
 8003702:	4b6f      	ldr	r3, [pc, #444]	; (80038c0 <rfid_loop_setup_card+0x1d8>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80cf 	beq.w	80038ac <rfid_loop_setup_card+0x1c4>
			check_rfid_UID();
 800370e:	f000 f8e9 	bl	80038e4 <check_rfid_UID>

			//?���??????????????????????
			if(NEW_INPUT_CARD==1)
 8003712:	4b6c      	ldr	r3, [pc, #432]	; (80038c4 <rfid_loop_setup_card+0x1dc>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	f040 80c8 	bne.w	80038ac <rfid_loop_setup_card+0x1c4>
			{
				switch(INPUT_CARD){
 800371c:	4b6a      	ldr	r3, [pc, #424]	; (80038c8 <rfid_loop_setup_card+0x1e0>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d002      	beq.n	800372a <rfid_loop_setup_card+0x42>
 8003724:	2b02      	cmp	r3, #2
 8003726:	d038      	beq.n	800379a <rfid_loop_setup_card+0xb2>
					BEEP(3,7);
				}
			}
		}
	}
}
 8003728:	e0c5      	b.n	80038b6 <rfid_loop_setup_card+0x1ce>
					if(at24_isConnected()){
 800372a:	f7fd fc6f 	bl	800100c <at24_isConnected>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80bd 	beq.w	80038b0 <rfid_loop_setup_card+0x1c8>
						at24_write(0x31,&size_card_input,1,100);
 8003736:	2364      	movs	r3, #100	; 0x64
 8003738:	2201      	movs	r2, #1
 800373a:	4964      	ldr	r1, [pc, #400]	; (80038cc <rfid_loop_setup_card+0x1e4>)
 800373c:	2031      	movs	r0, #49	; 0x31
 800373e:	f7fd fc7f 	bl	8001040 <at24_write>
						at24_write(0x32,input_cardID,size_card_input,100);
 8003742:	4b62      	ldr	r3, [pc, #392]	; (80038cc <rfid_loop_setup_card+0x1e4>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	461a      	mov	r2, r3
 8003748:	2364      	movs	r3, #100	; 0x64
 800374a:	4961      	ldr	r1, [pc, #388]	; (80038d0 <rfid_loop_setup_card+0x1e8>)
 800374c:	2032      	movs	r0, #50	; 0x32
 800374e:	f7fd fc77 	bl	8001040 <at24_write>
						lcdFillRoundRect(20, 80, 280, 100, 5, COLOR_YELLOW);
 8003752:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	2305      	movs	r3, #5
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2364      	movs	r3, #100	; 0x64
 800375e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8003762:	2150      	movs	r1, #80	; 0x50
 8003764:	2014      	movs	r0, #20
 8003766:	f006 fb2f 	bl	8009dc8 <lcdFillRoundRect>
						lcdSetTextFont(&Font24);
 800376a:	485a      	ldr	r0, [pc, #360]	; (80038d4 <rfid_loop_setup_card+0x1ec>)
 800376c:	f006 fcc8 	bl	800a100 <lcdSetTextFont>
						lcdSetTextColor(COLOR_BLACK, COLOR_YELLOW);
 8003770:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 8003774:	2000      	movs	r0, #0
 8003776:	f006 fcd3 	bl	800a120 <lcdSetTextColor>
						lcdSetCursor((320-221)/2, 5*24);
 800377a:	2178      	movs	r1, #120	; 0x78
 800377c:	2031      	movs	r0, #49	; 0x31
 800377e:	f006 fd53 	bl	800a228 <lcdSetCursor>
						lcdPrintf("CHANGE CARD 2");
 8003782:	4855      	ldr	r0, [pc, #340]	; (80038d8 <rfid_loop_setup_card+0x1f0>)
 8003784:	f006 fc30 	bl	8009fe8 <lcdPrintf>
						BEEP(3,7);
 8003788:	2107      	movs	r1, #7
 800378a:	2003      	movs	r0, #3
 800378c:	f000 f998 	bl	8003ac0 <BEEP>
						HAL_Delay(3000);
 8003790:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003794:	f001 f8ca 	bl	800492c <HAL_Delay>
					break;
 8003798:	e08a      	b.n	80038b0 <rfid_loop_setup_card+0x1c8>
					if(at24_isConnected()){
 800379a:	f7fd fc37 	bl	800100c <at24_isConnected>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	f000 8087 	beq.w	80038b4 <rfid_loop_setup_card+0x1cc>
						at24_write(0x01,&size_card_input,1,100);
 80037a6:	2364      	movs	r3, #100	; 0x64
 80037a8:	2201      	movs	r2, #1
 80037aa:	4948      	ldr	r1, [pc, #288]	; (80038cc <rfid_loop_setup_card+0x1e4>)
 80037ac:	2001      	movs	r0, #1
 80037ae:	f7fd fc47 	bl	8001040 <at24_write>
						at24_write(0x02,input_cardID,size_card_input,100);
 80037b2:	4b46      	ldr	r3, [pc, #280]	; (80038cc <rfid_loop_setup_card+0x1e4>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	461a      	mov	r2, r3
 80037b8:	2364      	movs	r3, #100	; 0x64
 80037ba:	4945      	ldr	r1, [pc, #276]	; (80038d0 <rfid_loop_setup_card+0x1e8>)
 80037bc:	2002      	movs	r0, #2
 80037be:	f7fd fc3f 	bl	8001040 <at24_write>
						lcdFillRoundRect(20, 80, 280, 100, 5, COLOR_YELLOW);
 80037c2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	2305      	movs	r3, #5
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	2364      	movs	r3, #100	; 0x64
 80037ce:	f44f 728c 	mov.w	r2, #280	; 0x118
 80037d2:	2150      	movs	r1, #80	; 0x50
 80037d4:	2014      	movs	r0, #20
 80037d6:	f006 faf7 	bl	8009dc8 <lcdFillRoundRect>
						lcdSetTextFont(&Font24);
 80037da:	483e      	ldr	r0, [pc, #248]	; (80038d4 <rfid_loop_setup_card+0x1ec>)
 80037dc:	f006 fc90 	bl	800a100 <lcdSetTextFont>
						lcdSetTextColor(COLOR_BLACK, COLOR_YELLOW);
 80037e0:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 80037e4:	2000      	movs	r0, #0
 80037e6:	f006 fc9b 	bl	800a120 <lcdSetTextColor>
						lcdSetCursor((320-221)/2, 5*24);
 80037ea:	2178      	movs	r1, #120	; 0x78
 80037ec:	2031      	movs	r0, #49	; 0x31
 80037ee:	f006 fd1b 	bl	800a228 <lcdSetCursor>
						lcdPrintf("CHANGE CARD 1");
 80037f2:	483a      	ldr	r0, [pc, #232]	; (80038dc <rfid_loop_setup_card+0x1f4>)
 80037f4:	f006 fbf8 	bl	8009fe8 <lcdPrintf>
						BEEP(3,7);
 80037f8:	2107      	movs	r1, #7
 80037fa:	2003      	movs	r0, #3
 80037fc:	f000 f960 	bl	8003ac0 <BEEP>
						HAL_Delay(3000);
 8003800:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003804:	f001 f892 	bl	800492c <HAL_Delay>
					break;
 8003808:	e054      	b.n	80038b4 <rfid_loop_setup_card+0x1cc>
		Q_FLAG=0;
 800380a:	4b2d      	ldr	r3, [pc, #180]	; (80038c0 <rfid_loop_setup_card+0x1d8>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
		while(Q_FLAG==0){
 8003810:	e046      	b.n	80038a0 <rfid_loop_setup_card+0x1b8>
			Q_FLAG=0;
 8003812:	4b2b      	ldr	r3, [pc, #172]	; (80038c0 <rfid_loop_setup_card+0x1d8>)
 8003814:	2200      	movs	r2, #0
 8003816:	701a      	strb	r2, [r3, #0]
			REQA_t();
 8003818:	f007 fb90 	bl	800af3c <REQA_t>
			if(Q_FLAG){
 800381c:	4b28      	ldr	r3, [pc, #160]	; (80038c0 <rfid_loop_setup_card+0x1d8>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <rfid_loop_setup_card+0x142>
				check_rfid_UID();
 8003826:	f000 f85d 	bl	80038e4 <check_rfid_UID>
			if(Q_FLAG==1){
 800382a:	4b25      	ldr	r3, [pc, #148]	; (80038c0 <rfid_loop_setup_card+0x1d8>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b01      	cmp	r3, #1
 8003832:	d135      	bne.n	80038a0 <rfid_loop_setup_card+0x1b8>
				if(at24_isConnected()){
 8003834:	f7fd fbea 	bl	800100c <at24_isConnected>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d030      	beq.n	80038a0 <rfid_loop_setup_card+0x1b8>
					at24_write(0x01,&size_card_input,1,100);
 800383e:	2364      	movs	r3, #100	; 0x64
 8003840:	2201      	movs	r2, #1
 8003842:	4922      	ldr	r1, [pc, #136]	; (80038cc <rfid_loop_setup_card+0x1e4>)
 8003844:	2001      	movs	r0, #1
 8003846:	f7fd fbfb 	bl	8001040 <at24_write>
					at24_write(0x02,input_cardID,size_card_input,100);
 800384a:	4b20      	ldr	r3, [pc, #128]	; (80038cc <rfid_loop_setup_card+0x1e4>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	2364      	movs	r3, #100	; 0x64
 8003852:	491f      	ldr	r1, [pc, #124]	; (80038d0 <rfid_loop_setup_card+0x1e8>)
 8003854:	2002      	movs	r0, #2
 8003856:	f7fd fbf3 	bl	8001040 <at24_write>
					lcdFillRoundRect(20, 80, 280, 100, 5, COLOR_YELLOW);
 800385a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800385e:	9301      	str	r3, [sp, #4]
 8003860:	2305      	movs	r3, #5
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2364      	movs	r3, #100	; 0x64
 8003866:	f44f 728c 	mov.w	r2, #280	; 0x118
 800386a:	2150      	movs	r1, #80	; 0x50
 800386c:	2014      	movs	r0, #20
 800386e:	f006 faab 	bl	8009dc8 <lcdFillRoundRect>
					lcdSetTextFont(&Font24);
 8003872:	4818      	ldr	r0, [pc, #96]	; (80038d4 <rfid_loop_setup_card+0x1ec>)
 8003874:	f006 fc44 	bl	800a100 <lcdSetTextFont>
					lcdSetTextColor(COLOR_BLACK, COLOR_YELLOW);
 8003878:	f64f 71e0 	movw	r1, #65504	; 0xffe0
 800387c:	2000      	movs	r0, #0
 800387e:	f006 fc4f 	bl	800a120 <lcdSetTextColor>
					lcdSetCursor((320-170)/2, 5*24);
 8003882:	2178      	movs	r1, #120	; 0x78
 8003884:	204b      	movs	r0, #75	; 0x4b
 8003886:	f006 fccf 	bl	800a228 <lcdSetCursor>
					lcdPrintf("REG CARD 1");
 800388a:	4815      	ldr	r0, [pc, #84]	; (80038e0 <rfid_loop_setup_card+0x1f8>)
 800388c:	f006 fbac 	bl	8009fe8 <lcdPrintf>
					HAL_Delay(3000);
 8003890:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003894:	f001 f84a 	bl	800492c <HAL_Delay>
					BEEP(3,7);
 8003898:	2107      	movs	r1, #7
 800389a:	2003      	movs	r0, #3
 800389c:	f000 f910 	bl	8003ac0 <BEEP>
		while(Q_FLAG==0){
 80038a0:	4b07      	ldr	r3, [pc, #28]	; (80038c0 <rfid_loop_setup_card+0x1d8>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0b3      	beq.n	8003812 <rfid_loop_setup_card+0x12a>
}
 80038aa:	e004      	b.n	80038b6 <rfid_loop_setup_card+0x1ce>
			}
 80038ac:	bf00      	nop
 80038ae:	e002      	b.n	80038b6 <rfid_loop_setup_card+0x1ce>
					break;
 80038b0:	bf00      	nop
 80038b2:	e000      	b.n	80038b6 <rfid_loop_setup_card+0x1ce>
					break;
 80038b4:	bf00      	nop
}
 80038b6:	bf00      	nop
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}
 80038bc:	2000000f 	.word	0x2000000f
 80038c0:	200009f8 	.word	0x200009f8
 80038c4:	20000abc 	.word	0x20000abc
 80038c8:	20000ac8 	.word	0x20000ac8
 80038cc:	20000266 	.word	0x20000266
 80038d0:	20000990 	.word	0x20000990
 80038d4:	2000003c 	.word	0x2000003c
 80038d8:	08010834 	.word	0x08010834
 80038dc:	08010844 	.word	0x08010844
 80038e0:	08010854 	.word	0x08010854

080038e4 <check_rfid_UID>:




//반복?�� card_check_flag=1
void check_rfid_UID(){
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af02      	add	r7, sp, #8
	uint8_t check_count=0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
	uint8_t flag_card = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	73bb      	strb	r3, [r7, #14]

	NEW_INPUT_CARD=0;
 80038f2:	4b68      	ldr	r3, [pc, #416]	; (8003a94 <check_rfid_UID+0x1b0>)
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]

	if(at24_isConnected()){
 80038f8:	f7fd fb88 	bl	800100c <at24_isConnected>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d02f      	beq.n	8003962 <check_rfid_UID+0x7e>
		at24_read(0x01,&size_card1,1, 200);
 8003902:	23c8      	movs	r3, #200	; 0xc8
 8003904:	2201      	movs	r2, #1
 8003906:	4964      	ldr	r1, [pc, #400]	; (8003a98 <check_rfid_UID+0x1b4>)
 8003908:	2001      	movs	r0, #1
 800390a:	f7fd fc0b 	bl	8001124 <at24_read>
		HAL_Delay(10);
 800390e:	200a      	movs	r0, #10
 8003910:	f001 f80c 	bl	800492c <HAL_Delay>
		at24_read(0x31,&size_card2,1, 200);
 8003914:	23c8      	movs	r3, #200	; 0xc8
 8003916:	2201      	movs	r2, #1
 8003918:	4960      	ldr	r1, [pc, #384]	; (8003a9c <check_rfid_UID+0x1b8>)
 800391a:	2031      	movs	r0, #49	; 0x31
 800391c:	f7fd fc02 	bl	8001124 <at24_read>
		HAL_Delay(10);
 8003920:	200a      	movs	r0, #10
 8003922:	f001 f803 	bl	800492c <HAL_Delay>

		if(size_card1<21){
 8003926:	4b5c      	ldr	r3, [pc, #368]	; (8003a98 <check_rfid_UID+0x1b4>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b14      	cmp	r3, #20
 800392c:	d80a      	bhi.n	8003944 <check_rfid_UID+0x60>
			at24_read(0x02,User_UID_1,size_card1, 200);
 800392e:	4b5a      	ldr	r3, [pc, #360]	; (8003a98 <check_rfid_UID+0x1b4>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	23c8      	movs	r3, #200	; 0xc8
 8003936:	495a      	ldr	r1, [pc, #360]	; (8003aa0 <check_rfid_UID+0x1bc>)
 8003938:	2002      	movs	r0, #2
 800393a:	f7fd fbf3 	bl	8001124 <at24_read>
			HAL_Delay(10);
 800393e:	200a      	movs	r0, #10
 8003940:	f000 fff4 	bl	800492c <HAL_Delay>
		}
		if(size_card2<21){
 8003944:	4b55      	ldr	r3, [pc, #340]	; (8003a9c <check_rfid_UID+0x1b8>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b14      	cmp	r3, #20
 800394a:	d80a      	bhi.n	8003962 <check_rfid_UID+0x7e>
			at24_read(0x32,User_UID_2,size_card2, 200);
 800394c:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <check_rfid_UID+0x1b8>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	23c8      	movs	r3, #200	; 0xc8
 8003954:	4953      	ldr	r1, [pc, #332]	; (8003aa4 <check_rfid_UID+0x1c0>)
 8003956:	2032      	movs	r0, #50	; 0x32
 8003958:	f7fd fbe4 	bl	8001124 <at24_read>
			HAL_Delay(10);
 800395c:	200a      	movs	r0, #10
 800395e:	f000 ffe5 	bl	800492c <HAL_Delay>
		}
	}
	sprintf(input_cardID,"%d%d%d%d",User_UID[0],User_UID[1],User_UID[2],User_UID[3]);
 8003962:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <check_rfid_UID+0x1c4>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	4619      	mov	r1, r3
 8003968:	4b4f      	ldr	r3, [pc, #316]	; (8003aa8 <check_rfid_UID+0x1c4>)
 800396a:	785b      	ldrb	r3, [r3, #1]
 800396c:	4618      	mov	r0, r3
 800396e:	4b4e      	ldr	r3, [pc, #312]	; (8003aa8 <check_rfid_UID+0x1c4>)
 8003970:	789b      	ldrb	r3, [r3, #2]
 8003972:	461a      	mov	r2, r3
 8003974:	4b4c      	ldr	r3, [pc, #304]	; (8003aa8 <check_rfid_UID+0x1c4>)
 8003976:	78db      	ldrb	r3, [r3, #3]
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	9200      	str	r2, [sp, #0]
 800397c:	4603      	mov	r3, r0
 800397e:	460a      	mov	r2, r1
 8003980:	494a      	ldr	r1, [pc, #296]	; (8003aac <check_rfid_UID+0x1c8>)
 8003982:	484b      	ldr	r0, [pc, #300]	; (8003ab0 <check_rfid_UID+0x1cc>)
 8003984:	f008 feaa 	bl	800c6dc <siprintf>
	size_card_input=strlen(input_cardID);
 8003988:	4849      	ldr	r0, [pc, #292]	; (8003ab0 <check_rfid_UID+0x1cc>)
 800398a:	f7fc fc31 	bl	80001f0 <strlen>
 800398e:	4603      	mov	r3, r0
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b48      	ldr	r3, [pc, #288]	; (8003ab4 <check_rfid_UID+0x1d0>)
 8003994:	701a      	strb	r2, [r3, #0]
	lcdSetCursor(14*6, 80);
	lcdPrintf(input_cardID);
	printf("card_in %s\r\n",input_cardID);
#endif

	check_count=size_card1+1;
 8003996:	4b40      	ldr	r3, [pc, #256]	; (8003a98 <check_rfid_UID+0x1b4>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	3301      	adds	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
	if(size_card_input == size_card1 &&  size_card1>0 && size_card1<21){
 800399e:	4b45      	ldr	r3, [pc, #276]	; (8003ab4 <check_rfid_UID+0x1d0>)
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	4b3d      	ldr	r3, [pc, #244]	; (8003a98 <check_rfid_UID+0x1b4>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	429a      	cmp	r2, r3
 80039a8:	d125      	bne.n	80039f6 <check_rfid_UID+0x112>
 80039aa:	4b3b      	ldr	r3, [pc, #236]	; (8003a98 <check_rfid_UID+0x1b4>)
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d021      	beq.n	80039f6 <check_rfid_UID+0x112>
 80039b2:	4b39      	ldr	r3, [pc, #228]	; (8003a98 <check_rfid_UID+0x1b4>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	2b14      	cmp	r3, #20
 80039b8:	d81d      	bhi.n	80039f6 <check_rfid_UID+0x112>
		for(int i=0;i<size_card_input;i++){
 80039ba:	2300      	movs	r3, #0
 80039bc:	60bb      	str	r3, [r7, #8]
 80039be:	e00f      	b.n	80039e0 <check_rfid_UID+0xfc>
			if(User_UID_1[i]==input_cardID[i])
 80039c0:	4a37      	ldr	r2, [pc, #220]	; (8003aa0 <check_rfid_UID+0x1bc>)
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4413      	add	r3, r2
 80039c6:	781a      	ldrb	r2, [r3, #0]
 80039c8:	4939      	ldr	r1, [pc, #228]	; (8003ab0 <check_rfid_UID+0x1cc>)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	440b      	add	r3, r1
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d102      	bne.n	80039da <check_rfid_UID+0xf6>
				check_count-=1;
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	73fb      	strb	r3, [r7, #15]
		for(int i=0;i<size_card_input;i++){
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	3301      	adds	r3, #1
 80039de:	60bb      	str	r3, [r7, #8]
 80039e0:	4b34      	ldr	r3, [pc, #208]	; (8003ab4 <check_rfid_UID+0x1d0>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	461a      	mov	r2, r3
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	4293      	cmp	r3, r2
 80039ea:	dbe9      	blt.n	80039c0 <check_rfid_UID+0xdc>
		}
		if(check_count==1){
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <check_rfid_UID+0x112>
			flag_card = 1;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73bb      	strb	r3, [r7, #14]
		}
	}
	check_count=size_card2+1;
 80039f6:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <check_rfid_UID+0x1b8>)
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	3301      	adds	r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
	if(size_card_input == size_card2 &&  size_card2>0 && size_card2<21){
 80039fe:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <check_rfid_UID+0x1d0>)
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	4b26      	ldr	r3, [pc, #152]	; (8003a9c <check_rfid_UID+0x1b8>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d125      	bne.n	8003a56 <check_rfid_UID+0x172>
 8003a0a:	4b24      	ldr	r3, [pc, #144]	; (8003a9c <check_rfid_UID+0x1b8>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d021      	beq.n	8003a56 <check_rfid_UID+0x172>
 8003a12:	4b22      	ldr	r3, [pc, #136]	; (8003a9c <check_rfid_UID+0x1b8>)
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	2b14      	cmp	r3, #20
 8003a18:	d81d      	bhi.n	8003a56 <check_rfid_UID+0x172>
		for(int i=0;i<size_card_input;i++){
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]
 8003a1e:	e00f      	b.n	8003a40 <check_rfid_UID+0x15c>
			if(User_UID_2[i]==input_cardID[i])
 8003a20:	4a20      	ldr	r2, [pc, #128]	; (8003aa4 <check_rfid_UID+0x1c0>)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	781a      	ldrb	r2, [r3, #0]
 8003a28:	4921      	ldr	r1, [pc, #132]	; (8003ab0 <check_rfid_UID+0x1cc>)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	440b      	add	r3, r1
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d102      	bne.n	8003a3a <check_rfid_UID+0x156>
				check_count-=1;
 8003a34:	7bfb      	ldrb	r3, [r7, #15]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
		for(int i=0;i<size_card_input;i++){
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	607b      	str	r3, [r7, #4]
 8003a40:	4b1c      	ldr	r3, [pc, #112]	; (8003ab4 <check_rfid_UID+0x1d0>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	dbe9      	blt.n	8003a20 <check_rfid_UID+0x13c>
		}
		if(check_count==1){
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <check_rfid_UID+0x172>
			flag_card = 2;
 8003a52:	2302      	movs	r3, #2
 8003a54:	73bb      	strb	r3, [r7, #14]
		}
	}

	if(flag_card == 1){
 8003a56:	7bbb      	ldrb	r3, [r7, #14]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d106      	bne.n	8003a6a <check_rfid_UID+0x186>
		INPUT_CARD=1;
 8003a5c:	4b16      	ldr	r3, [pc, #88]	; (8003ab8 <check_rfid_UID+0x1d4>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	701a      	strb	r2, [r3, #0]
		card_check_flag=0;
 8003a62:	4b16      	ldr	r3, [pc, #88]	; (8003abc <check_rfid_UID+0x1d8>)
 8003a64:	2200      	movs	r2, #0
 8003a66:	701a      	strb	r2, [r3, #0]
	else{
		NEW_INPUT_CARD=1;
		card_check_flag=1;
	}

}
 8003a68:	e00f      	b.n	8003a8a <check_rfid_UID+0x1a6>
	else if(flag_card == 2){
 8003a6a:	7bbb      	ldrb	r3, [r7, #14]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d106      	bne.n	8003a7e <check_rfid_UID+0x19a>
		INPUT_CARD=2;
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <check_rfid_UID+0x1d4>)
 8003a72:	2202      	movs	r2, #2
 8003a74:	701a      	strb	r2, [r3, #0]
		card_check_flag=0;
 8003a76:	4b11      	ldr	r3, [pc, #68]	; (8003abc <check_rfid_UID+0x1d8>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	701a      	strb	r2, [r3, #0]
}
 8003a7c:	e005      	b.n	8003a8a <check_rfid_UID+0x1a6>
		NEW_INPUT_CARD=1;
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <check_rfid_UID+0x1b0>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	701a      	strb	r2, [r3, #0]
		card_check_flag=1;
 8003a84:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <check_rfid_UID+0x1d8>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	701a      	strb	r2, [r3, #0]
}
 8003a8a:	bf00      	nop
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	20000abc 	.word	0x20000abc
 8003a98:	20000267 	.word	0x20000267
 8003a9c:	20000268 	.word	0x20000268
 8003aa0:	20000400 	.word	0x20000400
 8003aa4:	200007d8 	.word	0x200007d8
 8003aa8:	20000ac4 	.word	0x20000ac4
 8003aac:	08010860 	.word	0x08010860
 8003ab0:	20000990 	.word	0x20000990
 8003ab4:	20000266 	.word	0x20000266
 8003ab8:	20000ac8 	.word	0x20000ac8
 8003abc:	20000ac1 	.word	0x20000ac1

08003ac0 <BEEP>:
//uint8_t sys_beep=0;
void BEEP(uint8_t rep, uint8_t rep_timing){
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	460a      	mov	r2, r1
 8003aca:	71fb      	strb	r3, [r7, #7]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71bb      	strb	r3, [r7, #6]
	for(int i=0;i<rep;i++){
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e016      	b.n	8003b04 <BEEP+0x44>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, SET);
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	2101      	movs	r1, #1
 8003ada:	480f      	ldr	r0, [pc, #60]	; (8003b18 <BEEP+0x58>)
 8003adc:	f001 ffc2 	bl	8005a64 <HAL_GPIO_WritePin>
		//		sys_beep=HAL_GetTick();
		//		while(sys_beep+rep_timing*1000<HAL_GetTick());
		HAL_Delay(rep_timing);
 8003ae0:	79bb      	ldrb	r3, [r7, #6]
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f000 ff22 	bl	800492c <HAL_Delay>
		HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, RESET);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2101      	movs	r1, #1
 8003aec:	480a      	ldr	r0, [pc, #40]	; (8003b18 <BEEP+0x58>)
 8003aee:	f001 ffb9 	bl	8005a64 <HAL_GPIO_WritePin>
		if(rep!=1){
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d002      	beq.n	8003afe <BEEP+0x3e>
			HAL_Delay(150);
 8003af8:	2096      	movs	r0, #150	; 0x96
 8003afa:	f000 ff17 	bl	800492c <HAL_Delay>
	for(int i=0;i<rep;i++){
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3301      	adds	r3, #1
 8003b02:	60fb      	str	r3, [r7, #12]
 8003b04:	79fb      	ldrb	r3, [r7, #7]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	dbe4      	blt.n	8003ad6 <BEEP+0x16>
		}
	}
}
 8003b0c:	bf00      	nop
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	40021800 	.word	0x40021800
 8003b1c:	00000000 	.word	0x00000000

08003b20 <Ultra_Distance_Data>:
//ultrasonic
uint8_t ultra_str[100];
volatile uint32_t pMillis;
float Value1 = 0;
float Value2 = 0;
void Ultra_Distance_Data(){
 8003b20:	b598      	push	{r3, r4, r7, lr}
 8003b22:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim3);
 8003b24:	4880      	ldr	r0, [pc, #512]	; (8003d28 <Ultra_Distance_Data+0x208>)
 8003b26:	f004 fd3b 	bl	80085a0 <HAL_TIM_Base_Start>

	/////////////////////////1
	HAL_GPIO_WritePin(ultra1_Trig_GPIO_Port, ultra1_Trig_Pin, SET);
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b30:	487e      	ldr	r0, [pc, #504]	; (8003d2c <Ultra_Distance_Data+0x20c>)
 8003b32:	f001 ff97 	bl	8005a64 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCounter(&htim3,0);
 8003b36:	4b7c      	ldr	r3, [pc, #496]	; (8003d28 <Ultra_Distance_Data+0x208>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3)<10);
 8003b3e:	bf00      	nop
 8003b40:	4b79      	ldr	r3, [pc, #484]	; (8003d28 <Ultra_Distance_Data+0x208>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2b09      	cmp	r3, #9
 8003b48:	d9fa      	bls.n	8003b40 <Ultra_Distance_Data+0x20>
	HAL_GPIO_WritePin(ultra1_Trig_GPIO_Port, ultra1_Trig_Pin, RESET);
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b50:	4876      	ldr	r0, [pc, #472]	; (8003d2c <Ultra_Distance_Data+0x20c>)
 8003b52:	f001 ff87 	bl	8005a64 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick();
 8003b56:	f000 fedd 	bl	8004914 <HAL_GetTick>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	4a74      	ldr	r2, [pc, #464]	; (8003d30 <Ultra_Distance_Data+0x210>)
 8003b5e:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ultra1_ECHO_GPIO_Port, ultra1_ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 8003b60:	bf00      	nop
 8003b62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003b66:	4871      	ldr	r0, [pc, #452]	; (8003d2c <Ultra_Distance_Data+0x20c>)
 8003b68:	f001 ff64 	bl	8005a34 <HAL_GPIO_ReadPin>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d108      	bne.n	8003b84 <Ultra_Distance_Data+0x64>
 8003b72:	4b6f      	ldr	r3, [pc, #444]	; (8003d30 <Ultra_Distance_Data+0x210>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f103 040a 	add.w	r4, r3, #10
 8003b7a:	f000 fecb 	bl	8004914 <HAL_GetTick>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	429c      	cmp	r4, r3
 8003b82:	d8ee      	bhi.n	8003b62 <Ultra_Distance_Data+0x42>
	Value1 = __HAL_TIM_GET_COUNTER (&htim3);
 8003b84:	4b68      	ldr	r3, [pc, #416]	; (8003d28 <Ultra_Distance_Data+0x208>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b92:	4b68      	ldr	r3, [pc, #416]	; (8003d34 <Ultra_Distance_Data+0x214>)
 8003b94:	edc3 7a00 	vstr	s15, [r3]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8003b98:	f000 febc 	bl	8004914 <HAL_GetTick>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	4a64      	ldr	r2, [pc, #400]	; (8003d30 <Ultra_Distance_Data+0x210>)
 8003ba0:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ultra1_ECHO_GPIO_Port, ultra1_ECHO_Pin)) &&  pMillis + 50 > HAL_GetTick());
 8003ba2:	bf00      	nop
 8003ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003ba8:	4860      	ldr	r0, [pc, #384]	; (8003d2c <Ultra_Distance_Data+0x20c>)
 8003baa:	f001 ff43 	bl	8005a34 <HAL_GPIO_ReadPin>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <Ultra_Distance_Data+0xa6>
 8003bb4:	4b5e      	ldr	r3, [pc, #376]	; (8003d30 <Ultra_Distance_Data+0x210>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8003bbc:	f000 feaa 	bl	8004914 <HAL_GetTick>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	429c      	cmp	r4, r3
 8003bc4:	d8ee      	bhi.n	8003ba4 <Ultra_Distance_Data+0x84>
	Value2 = __HAL_TIM_GET_COUNTER (&htim3);
 8003bc6:	4b58      	ldr	r3, [pc, #352]	; (8003d28 <Ultra_Distance_Data+0x208>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd4:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <Ultra_Distance_Data+0x218>)
 8003bd6:	edc3 7a00 	vstr	s15, [r3]

	ultra_distance1 = (Value2-Value1)* 0.034/2.0;
 8003bda:	4b57      	ldr	r3, [pc, #348]	; (8003d38 <Ultra_Distance_Data+0x218>)
 8003bdc:	ed93 7a00 	vldr	s14, [r3]
 8003be0:	4b54      	ldr	r3, [pc, #336]	; (8003d34 <Ultra_Distance_Data+0x214>)
 8003be2:	edd3 7a00 	vldr	s15, [r3]
 8003be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bea:	ee17 0a90 	vmov	r0, s15
 8003bee:	f7fc fcbb 	bl	8000568 <__aeabi_f2d>
 8003bf2:	a34b      	add	r3, pc, #300	; (adr r3, 8003d20 <Ultra_Distance_Data+0x200>)
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f7fc fd0e 	bl	8000618 <__aeabi_dmul>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4610      	mov	r0, r2
 8003c02:	4619      	mov	r1, r3
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c0c:	f7fc fe2e 	bl	800086c <__aeabi_ddiv>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	f7fc fff6 	bl	8000c08 <__aeabi_d2f>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	4a47      	ldr	r2, [pc, #284]	; (8003d3c <Ultra_Distance_Data+0x21c>)
 8003c20:	6013      	str	r3, [r2, #0]

	////////////////////////2


	HAL_GPIO_WritePin(ultra2_Trig_GPIO_Port, ultra2_Trig_Pin, SET);
 8003c22:	2201      	movs	r2, #1
 8003c24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c28:	4845      	ldr	r0, [pc, #276]	; (8003d40 <Ultra_Distance_Data+0x220>)
 8003c2a:	f001 ff1b 	bl	8005a64 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCounter(&htim3,0);
 8003c2e:	4b3e      	ldr	r3, [pc, #248]	; (8003d28 <Ultra_Distance_Data+0x208>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2200      	movs	r2, #0
 8003c34:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3)<10);
 8003c36:	bf00      	nop
 8003c38:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <Ultra_Distance_Data+0x208>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	2b09      	cmp	r3, #9
 8003c40:	d9fa      	bls.n	8003c38 <Ultra_Distance_Data+0x118>
	HAL_GPIO_WritePin(ultra2_Trig_GPIO_Port, ultra2_Trig_Pin, RESET);
 8003c42:	2200      	movs	r2, #0
 8003c44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c48:	483d      	ldr	r0, [pc, #244]	; (8003d40 <Ultra_Distance_Data+0x220>)
 8003c4a:	f001 ff0b 	bl	8005a64 <HAL_GPIO_WritePin>

	pMillis = HAL_GetTick();
 8003c4e:	f000 fe61 	bl	8004914 <HAL_GetTick>
 8003c52:	4603      	mov	r3, r0
 8003c54:	4a36      	ldr	r2, [pc, #216]	; (8003d30 <Ultra_Distance_Data+0x210>)
 8003c56:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go high
	while (!(HAL_GPIO_ReadPin (ultra2_ECHO_GPIO_Port, ultra2_ECHO_Pin)) && pMillis + 10 >  HAL_GetTick());
 8003c58:	bf00      	nop
 8003c5a:	2180      	movs	r1, #128	; 0x80
 8003c5c:	4839      	ldr	r0, [pc, #228]	; (8003d44 <Ultra_Distance_Data+0x224>)
 8003c5e:	f001 fee9 	bl	8005a34 <HAL_GPIO_ReadPin>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d108      	bne.n	8003c7a <Ultra_Distance_Data+0x15a>
 8003c68:	4b31      	ldr	r3, [pc, #196]	; (8003d30 <Ultra_Distance_Data+0x210>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f103 040a 	add.w	r4, r3, #10
 8003c70:	f000 fe50 	bl	8004914 <HAL_GetTick>
 8003c74:	4603      	mov	r3, r0
 8003c76:	429c      	cmp	r4, r3
 8003c78:	d8ef      	bhi.n	8003c5a <Ultra_Distance_Data+0x13a>
	Value1 = __HAL_TIM_GET_COUNTER (&htim3);
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	; (8003d28 <Ultra_Distance_Data+0x208>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c88:	4b2a      	ldr	r3, [pc, #168]	; (8003d34 <Ultra_Distance_Data+0x214>)
 8003c8a:	edc3 7a00 	vstr	s15, [r3]

	pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8003c8e:	f000 fe41 	bl	8004914 <HAL_GetTick>
 8003c92:	4603      	mov	r3, r0
 8003c94:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <Ultra_Distance_Data+0x210>)
 8003c96:	6013      	str	r3, [r2, #0]
	// wait for the echo pin to go low
	while ((HAL_GPIO_ReadPin (ultra2_ECHO_GPIO_Port, ultra2_ECHO_Pin)) &&  pMillis + 50 > HAL_GetTick());
 8003c98:	bf00      	nop
 8003c9a:	2180      	movs	r1, #128	; 0x80
 8003c9c:	4829      	ldr	r0, [pc, #164]	; (8003d44 <Ultra_Distance_Data+0x224>)
 8003c9e:	f001 fec9 	bl	8005a34 <HAL_GPIO_ReadPin>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d008      	beq.n	8003cba <Ultra_Distance_Data+0x19a>
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <Ultra_Distance_Data+0x210>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8003cb0:	f000 fe30 	bl	8004914 <HAL_GetTick>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	429c      	cmp	r4, r3
 8003cb8:	d8ef      	bhi.n	8003c9a <Ultra_Distance_Data+0x17a>
	Value2 = __HAL_TIM_GET_COUNTER (&htim3);
 8003cba:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <Ultra_Distance_Data+0x208>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	ee07 3a90 	vmov	s15, r3
 8003cc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	; (8003d38 <Ultra_Distance_Data+0x218>)
 8003cca:	edc3 7a00 	vstr	s15, [r3]

	ultra_distance2 = (Value2-Value1)* 0.034/2.0;
 8003cce:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <Ultra_Distance_Data+0x218>)
 8003cd0:	ed93 7a00 	vldr	s14, [r3]
 8003cd4:	4b17      	ldr	r3, [pc, #92]	; (8003d34 <Ultra_Distance_Data+0x214>)
 8003cd6:	edd3 7a00 	vldr	s15, [r3]
 8003cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cde:	ee17 0a90 	vmov	r0, s15
 8003ce2:	f7fc fc41 	bl	8000568 <__aeabi_f2d>
 8003ce6:	a30e      	add	r3, pc, #56	; (adr r3, 8003d20 <Ultra_Distance_Data+0x200>)
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f7fc fc94 	bl	8000618 <__aeabi_dmul>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	4619      	mov	r1, r3
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d00:	f7fc fdb4 	bl	800086c <__aeabi_ddiv>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4610      	mov	r0, r2
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	f7fc ff7c 	bl	8000c08 <__aeabi_d2f>
 8003d10:	4603      	mov	r3, r0
 8003d12:	4a0d      	ldr	r2, [pc, #52]	; (8003d48 <Ultra_Distance_Data+0x228>)
 8003d14:	6013      	str	r3, [r2, #0]
	//	while ((HAL_GPIO_ReadPin (ultra3_ECHO_GPIO_Port, ultra3_ECHO_Pin)) &&  pMillis + 50 > HAL_GetTick());
	//	Value2 = __HAL_TIM_GET_COUNTER (&htim3);
	//
	//	ultra_distance3 = (Value2-Value1)* 0.034/2.0;

	HAL_TIM_Base_Stop(&htim3);
 8003d16:	4804      	ldr	r0, [pc, #16]	; (8003d28 <Ultra_Distance_Data+0x208>)
 8003d18:	f004 fcaa 	bl	8008670 <HAL_TIM_Base_Stop>

}
 8003d1c:	bf00      	nop
 8003d1e:	bd98      	pop	{r3, r4, r7, pc}
 8003d20:	b020c49c 	.word	0xb020c49c
 8003d24:	3fa16872 	.word	0x3fa16872
 8003d28:	200005a8 	.word	0x200005a8
 8003d2c:	40020400 	.word	0x40020400
 8003d30:	20000554 	.word	0x20000554
 8003d34:	2000028c 	.word	0x2000028c
 8003d38:	20000290 	.word	0x20000290
 8003d3c:	200005f0 	.word	0x200005f0
 8003d40:	40020000 	.word	0x40020000
 8003d44:	40020800 	.word	0x40020800
 8003d48:	2000078c 	.word	0x2000078c

08003d4c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d50:	b672      	cpsid	i
}
 8003d52:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003d54:	e7fe      	b.n	8003d54 <Error_Handler+0x8>
	...

08003d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	607b      	str	r3, [r7, #4]
 8003d62:	4b10      	ldr	r3, [pc, #64]	; (8003da4 <HAL_MspInit+0x4c>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d66:	4a0f      	ldr	r2, [pc, #60]	; (8003da4 <HAL_MspInit+0x4c>)
 8003d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8003d6e:	4b0d      	ldr	r3, [pc, #52]	; (8003da4 <HAL_MspInit+0x4c>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d76:	607b      	str	r3, [r7, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	4b09      	ldr	r3, [pc, #36]	; (8003da4 <HAL_MspInit+0x4c>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a08      	ldr	r2, [pc, #32]	; (8003da4 <HAL_MspInit+0x4c>)
 8003d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <HAL_MspInit+0x4c>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	603b      	str	r3, [r7, #0]
 8003d94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800

08003da8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08e      	sub	sp, #56	; 0x38
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003db4:	2200      	movs	r2, #0
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	605a      	str	r2, [r3, #4]
 8003dba:	609a      	str	r2, [r3, #8]
 8003dbc:	60da      	str	r2, [r3, #12]
 8003dbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a51      	ldr	r2, [pc, #324]	; (8003f0c <HAL_ADC_MspInit+0x164>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d130      	bne.n	8003e2c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003dca:	2300      	movs	r3, #0
 8003dcc:	623b      	str	r3, [r7, #32]
 8003dce:	4b50      	ldr	r3, [pc, #320]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd2:	4a4f      	ldr	r2, [pc, #316]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003dd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8003dda:	4b4d      	ldr	r3, [pc, #308]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	623b      	str	r3, [r7, #32]
 8003de4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003de6:	2300      	movs	r3, #0
 8003de8:	61fb      	str	r3, [r7, #28]
 8003dea:	4b49      	ldr	r3, [pc, #292]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dee:	4a48      	ldr	r2, [pc, #288]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	6313      	str	r3, [r2, #48]	; 0x30
 8003df6:	4b46      	ldr	r3, [pc, #280]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e06:	2303      	movs	r3, #3
 8003e08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e12:	4619      	mov	r1, r3
 8003e14:	483f      	ldr	r0, [pc, #252]	; (8003f14 <HAL_ADC_MspInit+0x16c>)
 8003e16:	f001 fc61 	bl	80056dc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	2012      	movs	r0, #18
 8003e20:	f001 fbff 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003e24:	2012      	movs	r0, #18
 8003e26:	f001 fc18 	bl	800565a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003e2a:	e06a      	b.n	8003f02 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a39      	ldr	r2, [pc, #228]	; (8003f18 <HAL_ADC_MspInit+0x170>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d130      	bne.n	8003e98 <HAL_ADC_MspInit+0xf0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	61bb      	str	r3, [r7, #24]
 8003e3a:	4b35      	ldr	r3, [pc, #212]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	4a34      	ldr	r2, [pc, #208]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003e40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e44:	6453      	str	r3, [r2, #68]	; 0x44
 8003e46:	4b32      	ldr	r3, [pc, #200]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e4e:	61bb      	str	r3, [r7, #24]
 8003e50:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
 8003e56:	4b2e      	ldr	r3, [pc, #184]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5a:	4a2d      	ldr	r2, [pc, #180]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	6313      	str	r3, [r2, #48]	; 0x30
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e72:	2303      	movs	r3, #3
 8003e74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e7e:	4619      	mov	r1, r3
 8003e80:	4826      	ldr	r0, [pc, #152]	; (8003f1c <HAL_ADC_MspInit+0x174>)
 8003e82:	f001 fc2b 	bl	80056dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003e86:	2200      	movs	r2, #0
 8003e88:	2100      	movs	r1, #0
 8003e8a:	2012      	movs	r0, #18
 8003e8c:	f001 fbc9 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003e90:	2012      	movs	r0, #18
 8003e92:	f001 fbe2 	bl	800565a <HAL_NVIC_EnableIRQ>
}
 8003e96:	e034      	b.n	8003f02 <HAL_ADC_MspInit+0x15a>
  else if(hadc->Instance==ADC3)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a20      	ldr	r2, [pc, #128]	; (8003f20 <HAL_ADC_MspInit+0x178>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d12f      	bne.n	8003f02 <HAL_ADC_MspInit+0x15a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eaa:	4a19      	ldr	r2, [pc, #100]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003eac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8003eb2:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	4b13      	ldr	r3, [pc, #76]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a12      	ldr	r2, [pc, #72]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003ec8:	f043 0320 	orr.w	r3, r3, #32
 8003ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ece:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <HAL_ADC_MspInit+0x168>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003eda:	2310      	movs	r3, #16
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eea:	4619      	mov	r1, r3
 8003eec:	480d      	ldr	r0, [pc, #52]	; (8003f24 <HAL_ADC_MspInit+0x17c>)
 8003eee:	f001 fbf5 	bl	80056dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	2012      	movs	r0, #18
 8003ef8:	f001 fb93 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003efc:	2012      	movs	r0, #18
 8003efe:	f001 fbac 	bl	800565a <HAL_NVIC_EnableIRQ>
}
 8003f02:	bf00      	nop
 8003f04:	3738      	adds	r7, #56	; 0x38
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	40012000 	.word	0x40012000
 8003f10:	40023800 	.word	0x40023800
 8003f14:	40020000 	.word	0x40020000
 8003f18:	40012100 	.word	0x40012100
 8003f1c:	40020400 	.word	0x40020400
 8003f20:	40012200 	.word	0x40012200
 8003f24:	40021400 	.word	0x40021400

08003f28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b08c      	sub	sp, #48	; 0x30
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	f107 031c 	add.w	r3, r7, #28
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	605a      	str	r2, [r3, #4]
 8003f3a:	609a      	str	r2, [r3, #8]
 8003f3c:	60da      	str	r2, [r3, #12]
 8003f3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a33      	ldr	r2, [pc, #204]	; (8004014 <HAL_I2C_MspInit+0xec>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d12d      	bne.n	8003fa6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	4b32      	ldr	r3, [pc, #200]	; (8004018 <HAL_I2C_MspInit+0xf0>)
 8003f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f52:	4a31      	ldr	r2, [pc, #196]	; (8004018 <HAL_I2C_MspInit+0xf0>)
 8003f54:	f043 0302 	orr.w	r3, r3, #2
 8003f58:	6313      	str	r3, [r2, #48]	; 0x30
 8003f5a:	4b2f      	ldr	r3, [pc, #188]	; (8004018 <HAL_I2C_MspInit+0xf0>)
 8003f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	61bb      	str	r3, [r7, #24]
 8003f64:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8003f66:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f6c:	2312      	movs	r3, #18
 8003f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f74:	2303      	movs	r3, #3
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f78:	2304      	movs	r3, #4
 8003f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f7c:	f107 031c 	add.w	r3, r7, #28
 8003f80:	4619      	mov	r1, r3
 8003f82:	4826      	ldr	r0, [pc, #152]	; (800401c <HAL_I2C_MspInit+0xf4>)
 8003f84:	f001 fbaa 	bl	80056dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
 8003f8c:	4b22      	ldr	r3, [pc, #136]	; (8004018 <HAL_I2C_MspInit+0xf0>)
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	4a21      	ldr	r2, [pc, #132]	; (8004018 <HAL_I2C_MspInit+0xf0>)
 8003f92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f96:	6413      	str	r3, [r2, #64]	; 0x40
 8003f98:	4b1f      	ldr	r3, [pc, #124]	; (8004018 <HAL_I2C_MspInit+0xf0>)
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003fa4:	e031      	b.n	800400a <HAL_I2C_MspInit+0xe2>
  else if(hi2c->Instance==I2C2)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a1d      	ldr	r2, [pc, #116]	; (8004020 <HAL_I2C_MspInit+0xf8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d12c      	bne.n	800400a <HAL_I2C_MspInit+0xe2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	4b18      	ldr	r3, [pc, #96]	; (8004018 <HAL_I2C_MspInit+0xf0>)
 8003fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb8:	4a17      	ldr	r2, [pc, #92]	; (8004018 <HAL_I2C_MspInit+0xf0>)
 8003fba:	f043 0302 	orr.w	r3, r3, #2
 8003fbe:	6313      	str	r3, [r2, #48]	; 0x30
 8003fc0:	4b15      	ldr	r3, [pc, #84]	; (8004018 <HAL_I2C_MspInit+0xf0>)
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	613b      	str	r3, [r7, #16]
 8003fca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003fcc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003fd2:	2312      	movs	r3, #18
 8003fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003fde:	2304      	movs	r3, #4
 8003fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fe2:	f107 031c 	add.w	r3, r7, #28
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	480c      	ldr	r0, [pc, #48]	; (800401c <HAL_I2C_MspInit+0xf4>)
 8003fea:	f001 fb77 	bl	80056dc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003fee:	2300      	movs	r3, #0
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_I2C_MspInit+0xf0>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	4a08      	ldr	r2, [pc, #32]	; (8004018 <HAL_I2C_MspInit+0xf0>)
 8003ff8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_I2C_MspInit+0xf0>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004006:	60fb      	str	r3, [r7, #12]
 8004008:	68fb      	ldr	r3, [r7, #12]
}
 800400a:	bf00      	nop
 800400c:	3730      	adds	r7, #48	; 0x30
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40005400 	.word	0x40005400
 8004018:	40023800 	.word	0x40023800
 800401c:	40020400 	.word	0x40020400
 8004020:	40005800 	.word	0x40005800

08004024 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b08e      	sub	sp, #56	; 0x38
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]
 8004034:	605a      	str	r2, [r3, #4]
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	60da      	str	r2, [r3, #12]
 800403a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a54      	ldr	r2, [pc, #336]	; (8004194 <HAL_SPI_MspInit+0x170>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d152      	bne.n	80040ec <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004046:	2300      	movs	r3, #0
 8004048:	623b      	str	r3, [r7, #32]
 800404a:	4b53      	ldr	r3, [pc, #332]	; (8004198 <HAL_SPI_MspInit+0x174>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	4a52      	ldr	r2, [pc, #328]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004050:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004054:	6453      	str	r3, [r2, #68]	; 0x44
 8004056:	4b50      	ldr	r3, [pc, #320]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800405e:	623b      	str	r3, [r7, #32]
 8004060:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]
 8004066:	4b4c      	ldr	r3, [pc, #304]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	4a4b      	ldr	r2, [pc, #300]	; (8004198 <HAL_SPI_MspInit+0x174>)
 800406c:	f043 0301 	orr.w	r3, r3, #1
 8004070:	6313      	str	r3, [r2, #48]	; 0x30
 8004072:	4b49      	ldr	r3, [pc, #292]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	61fb      	str	r3, [r7, #28]
 800407c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	61bb      	str	r3, [r7, #24]
 8004082:	4b45      	ldr	r3, [pc, #276]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004086:	4a44      	ldr	r2, [pc, #272]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004088:	f043 0302 	orr.w	r3, r3, #2
 800408c:	6313      	str	r3, [r2, #48]	; 0x30
 800408e:	4b42      	ldr	r3, [pc, #264]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	61bb      	str	r3, [r7, #24]
 8004098:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800409a:	2360      	movs	r3, #96	; 0x60
 800409c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800409e:	2302      	movs	r3, #2
 80040a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040a2:	2300      	movs	r3, #0
 80040a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040a6:	2303      	movs	r3, #3
 80040a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040aa:	2305      	movs	r3, #5
 80040ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040b2:	4619      	mov	r1, r3
 80040b4:	4839      	ldr	r0, [pc, #228]	; (800419c <HAL_SPI_MspInit+0x178>)
 80040b6:	f001 fb11 	bl	80056dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80040ba:	2320      	movs	r3, #32
 80040bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040be:	2302      	movs	r3, #2
 80040c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c2:	2300      	movs	r3, #0
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c6:	2303      	movs	r3, #3
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040ca:	2305      	movs	r3, #5
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040d2:	4619      	mov	r1, r3
 80040d4:	4832      	ldr	r0, [pc, #200]	; (80041a0 <HAL_SPI_MspInit+0x17c>)
 80040d6:	f001 fb01 	bl	80056dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80040da:	2200      	movs	r2, #0
 80040dc:	2100      	movs	r1, #0
 80040de:	2023      	movs	r0, #35	; 0x23
 80040e0:	f001 fa9f 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80040e4:	2023      	movs	r0, #35	; 0x23
 80040e6:	f001 fab8 	bl	800565a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80040ea:	e04f      	b.n	800418c <HAL_SPI_MspInit+0x168>
  else if(hspi->Instance==SPI2)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a2c      	ldr	r2, [pc, #176]	; (80041a4 <HAL_SPI_MspInit+0x180>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d14a      	bne.n	800418c <HAL_SPI_MspInit+0x168>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80040f6:	2300      	movs	r3, #0
 80040f8:	617b      	str	r3, [r7, #20]
 80040fa:	4b27      	ldr	r3, [pc, #156]	; (8004198 <HAL_SPI_MspInit+0x174>)
 80040fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fe:	4a26      	ldr	r2, [pc, #152]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004100:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004104:	6413      	str	r3, [r2, #64]	; 0x40
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	4b20      	ldr	r3, [pc, #128]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800411a:	4a1f      	ldr	r2, [pc, #124]	; (8004198 <HAL_SPI_MspInit+0x174>)
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	6313      	str	r3, [r2, #48]	; 0x30
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a18      	ldr	r2, [pc, #96]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004138:	f043 0302 	orr.w	r3, r3, #2
 800413c:	6313      	str	r3, [r2, #48]	; 0x30
 800413e:	4b16      	ldr	r3, [pc, #88]	; (8004198 <HAL_SPI_MspInit+0x174>)
 8004140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	60fb      	str	r3, [r7, #12]
 8004148:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800414a:	230c      	movs	r3, #12
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800414e:	2302      	movs	r3, #2
 8004150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004152:	2300      	movs	r3, #0
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004156:	2303      	movs	r3, #3
 8004158:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800415a:	2305      	movs	r3, #5
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800415e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004162:	4619      	mov	r1, r3
 8004164:	4810      	ldr	r0, [pc, #64]	; (80041a8 <HAL_SPI_MspInit+0x184>)
 8004166:	f001 fab9 	bl	80056dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800416a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004170:	2302      	movs	r3, #2
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004174:	2300      	movs	r3, #0
 8004176:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004178:	2303      	movs	r3, #3
 800417a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800417c:	2305      	movs	r3, #5
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004180:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004184:	4619      	mov	r1, r3
 8004186:	4806      	ldr	r0, [pc, #24]	; (80041a0 <HAL_SPI_MspInit+0x17c>)
 8004188:	f001 faa8 	bl	80056dc <HAL_GPIO_Init>
}
 800418c:	bf00      	nop
 800418e:	3738      	adds	r7, #56	; 0x38
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40013000 	.word	0x40013000
 8004198:	40023800 	.word	0x40023800
 800419c:	40020000 	.word	0x40020000
 80041a0:	40020400 	.word	0x40020400
 80041a4:	40003800 	.word	0x40003800
 80041a8:	40020800 	.word	0x40020800

080041ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08a      	sub	sp, #40	; 0x28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041bc:	d116      	bne.n	80041ec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	627b      	str	r3, [r7, #36]	; 0x24
 80041c2:	4b6a      	ldr	r3, [pc, #424]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	4a69      	ldr	r2, [pc, #420]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	6413      	str	r3, [r2, #64]	; 0x40
 80041ce:	4b67      	ldr	r3, [pc, #412]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80041da:	2200      	movs	r2, #0
 80041dc:	2100      	movs	r1, #0
 80041de:	201c      	movs	r0, #28
 80041e0:	f001 fa1f 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80041e4:	201c      	movs	r0, #28
 80041e6:	f001 fa38 	bl	800565a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80041ea:	e0ba      	b.n	8004362 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM3)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a5f      	ldr	r2, [pc, #380]	; (8004370 <HAL_TIM_Base_MspInit+0x1c4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d10e      	bne.n	8004214 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	623b      	str	r3, [r7, #32]
 80041fa:	4b5c      	ldr	r3, [pc, #368]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4a5b      	ldr	r2, [pc, #364]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004200:	f043 0302 	orr.w	r3, r3, #2
 8004204:	6413      	str	r3, [r2, #64]	; 0x40
 8004206:	4b59      	ldr	r3, [pc, #356]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	623b      	str	r3, [r7, #32]
 8004210:	6a3b      	ldr	r3, [r7, #32]
}
 8004212:	e0a6      	b.n	8004362 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM6)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a56      	ldr	r2, [pc, #344]	; (8004374 <HAL_TIM_Base_MspInit+0x1c8>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d116      	bne.n	800424c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	61fb      	str	r3, [r7, #28]
 8004222:	4b52      	ldr	r3, [pc, #328]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	4a51      	ldr	r2, [pc, #324]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004228:	f043 0310 	orr.w	r3, r3, #16
 800422c:	6413      	str	r3, [r2, #64]	; 0x40
 800422e:	4b4f      	ldr	r3, [pc, #316]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800423a:	2200      	movs	r2, #0
 800423c:	2100      	movs	r1, #0
 800423e:	2036      	movs	r0, #54	; 0x36
 8004240:	f001 f9ef 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004244:	2036      	movs	r0, #54	; 0x36
 8004246:	f001 fa08 	bl	800565a <HAL_NVIC_EnableIRQ>
}
 800424a:	e08a      	b.n	8004362 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM7)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a49      	ldr	r2, [pc, #292]	; (8004378 <HAL_TIM_Base_MspInit+0x1cc>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d116      	bne.n	8004284 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004256:	2300      	movs	r3, #0
 8004258:	61bb      	str	r3, [r7, #24]
 800425a:	4b44      	ldr	r3, [pc, #272]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	4a43      	ldr	r2, [pc, #268]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004260:	f043 0320 	orr.w	r3, r3, #32
 8004264:	6413      	str	r3, [r2, #64]	; 0x40
 8004266:	4b41      	ldr	r3, [pc, #260]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	61bb      	str	r3, [r7, #24]
 8004270:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004272:	2200      	movs	r2, #0
 8004274:	2100      	movs	r1, #0
 8004276:	2037      	movs	r0, #55	; 0x37
 8004278:	f001 f9d3 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800427c:	2037      	movs	r0, #55	; 0x37
 800427e:	f001 f9ec 	bl	800565a <HAL_NVIC_EnableIRQ>
}
 8004282:	e06e      	b.n	8004362 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM9)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a3c      	ldr	r2, [pc, #240]	; (800437c <HAL_TIM_Base_MspInit+0x1d0>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d116      	bne.n	80042bc <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	4b36      	ldr	r3, [pc, #216]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	4a35      	ldr	r2, [pc, #212]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429c:	6453      	str	r3, [r2, #68]	; 0x44
 800429e:	4b33      	ldr	r3, [pc, #204]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 80042a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80042aa:	2200      	movs	r2, #0
 80042ac:	2100      	movs	r1, #0
 80042ae:	2018      	movs	r0, #24
 80042b0:	f001 f9b7 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80042b4:	2018      	movs	r0, #24
 80042b6:	f001 f9d0 	bl	800565a <HAL_NVIC_EnableIRQ>
}
 80042ba:	e052      	b.n	8004362 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM10)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2f      	ldr	r2, [pc, #188]	; (8004380 <HAL_TIM_Base_MspInit+0x1d4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d116      	bne.n	80042f4 <HAL_TIM_Base_MspInit+0x148>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80042c6:	2300      	movs	r3, #0
 80042c8:	613b      	str	r3, [r7, #16]
 80042ca:	4b28      	ldr	r3, [pc, #160]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 80042cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042ce:	4a27      	ldr	r2, [pc, #156]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 80042d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042d4:	6453      	str	r3, [r2, #68]	; 0x44
 80042d6:	4b25      	ldr	r3, [pc, #148]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 80042d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042de:	613b      	str	r3, [r7, #16]
 80042e0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80042e2:	2200      	movs	r2, #0
 80042e4:	2100      	movs	r1, #0
 80042e6:	2019      	movs	r0, #25
 80042e8:	f001 f99b 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80042ec:	2019      	movs	r0, #25
 80042ee:	f001 f9b4 	bl	800565a <HAL_NVIC_EnableIRQ>
}
 80042f2:	e036      	b.n	8004362 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM11)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a22      	ldr	r2, [pc, #136]	; (8004384 <HAL_TIM_Base_MspInit+0x1d8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d116      	bne.n	800432c <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	4b1a      	ldr	r3, [pc, #104]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004306:	4a19      	ldr	r2, [pc, #100]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800430c:	6453      	str	r3, [r2, #68]	; 0x44
 800430e:	4b17      	ldr	r3, [pc, #92]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004316:	60fb      	str	r3, [r7, #12]
 8004318:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800431a:	2200      	movs	r2, #0
 800431c:	2100      	movs	r1, #0
 800431e:	201a      	movs	r0, #26
 8004320:	f001 f97f 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004324:	201a      	movs	r0, #26
 8004326:	f001 f998 	bl	800565a <HAL_NVIC_EnableIRQ>
}
 800432a:	e01a      	b.n	8004362 <HAL_TIM_Base_MspInit+0x1b6>
  else if(htim_base->Instance==TIM14)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a15      	ldr	r2, [pc, #84]	; (8004388 <HAL_TIM_Base_MspInit+0x1dc>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d115      	bne.n	8004362 <HAL_TIM_Base_MspInit+0x1b6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004336:	2300      	movs	r3, #0
 8004338:	60bb      	str	r3, [r7, #8]
 800433a:	4b0c      	ldr	r3, [pc, #48]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	4a0b      	ldr	r2, [pc, #44]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004344:	6413      	str	r3, [r2, #64]	; 0x40
 8004346:	4b09      	ldr	r3, [pc, #36]	; (800436c <HAL_TIM_Base_MspInit+0x1c0>)
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800434e:	60bb      	str	r3, [r7, #8]
 8004350:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004352:	2200      	movs	r2, #0
 8004354:	2100      	movs	r1, #0
 8004356:	202d      	movs	r0, #45	; 0x2d
 8004358:	f001 f963 	bl	8005622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800435c:	202d      	movs	r0, #45	; 0x2d
 800435e:	f001 f97c 	bl	800565a <HAL_NVIC_EnableIRQ>
}
 8004362:	bf00      	nop
 8004364:	3728      	adds	r7, #40	; 0x28
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40023800 	.word	0x40023800
 8004370:	40000400 	.word	0x40000400
 8004374:	40001000 	.word	0x40001000
 8004378:	40001400 	.word	0x40001400
 800437c:	40014000 	.word	0x40014000
 8004380:	40014400 	.word	0x40014400
 8004384:	40014800 	.word	0x40014800
 8004388:	40002000 	.word	0x40002000

0800438c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b08a      	sub	sp, #40	; 0x28
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004394:	f107 0314 	add.w	r3, r7, #20
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]
 800439c:	605a      	str	r2, [r3, #4]
 800439e:	609a      	str	r2, [r3, #8]
 80043a0:	60da      	str	r2, [r3, #12]
 80043a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a28      	ldr	r2, [pc, #160]	; (800444c <HAL_UART_MspInit+0xc0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d14a      	bne.n	8004444 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	4b27      	ldr	r3, [pc, #156]	; (8004450 <HAL_UART_MspInit+0xc4>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	4a26      	ldr	r2, [pc, #152]	; (8004450 <HAL_UART_MspInit+0xc4>)
 80043b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043bc:	6413      	str	r3, [r2, #64]	; 0x40
 80043be:	4b24      	ldr	r3, [pc, #144]	; (8004450 <HAL_UART_MspInit+0xc4>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	4b20      	ldr	r3, [pc, #128]	; (8004450 <HAL_UART_MspInit+0xc4>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	4a1f      	ldr	r2, [pc, #124]	; (8004450 <HAL_UART_MspInit+0xc4>)
 80043d4:	f043 0304 	orr.w	r3, r3, #4
 80043d8:	6313      	str	r3, [r2, #48]	; 0x30
 80043da:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <HAL_UART_MspInit+0xc4>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80043e6:	2300      	movs	r3, #0
 80043e8:	60bb      	str	r3, [r7, #8]
 80043ea:	4b19      	ldr	r3, [pc, #100]	; (8004450 <HAL_UART_MspInit+0xc4>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ee:	4a18      	ldr	r2, [pc, #96]	; (8004450 <HAL_UART_MspInit+0xc4>)
 80043f0:	f043 0308 	orr.w	r3, r3, #8
 80043f4:	6313      	str	r3, [r2, #48]	; 0x30
 80043f6:	4b16      	ldr	r3, [pc, #88]	; (8004450 <HAL_UART_MspInit+0xc4>)
 80043f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004402:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004406:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004408:	2302      	movs	r3, #2
 800440a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440c:	2300      	movs	r3, #0
 800440e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004410:	2303      	movs	r3, #3
 8004412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004414:	2308      	movs	r3, #8
 8004416:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004418:	f107 0314 	add.w	r3, r7, #20
 800441c:	4619      	mov	r1, r3
 800441e:	480d      	ldr	r0, [pc, #52]	; (8004454 <HAL_UART_MspInit+0xc8>)
 8004420:	f001 f95c 	bl	80056dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004424:	2304      	movs	r3, #4
 8004426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004428:	2302      	movs	r3, #2
 800442a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004430:	2303      	movs	r3, #3
 8004432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004434:	2308      	movs	r3, #8
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004438:	f107 0314 	add.w	r3, r7, #20
 800443c:	4619      	mov	r1, r3
 800443e:	4806      	ldr	r0, [pc, #24]	; (8004458 <HAL_UART_MspInit+0xcc>)
 8004440:	f001 f94c 	bl	80056dc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8004444:	bf00      	nop
 8004446:	3728      	adds	r7, #40	; 0x28
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40005000 	.word	0x40005000
 8004450:	40023800 	.word	0x40023800
 8004454:	40020800 	.word	0x40020800
 8004458:	40020c00 	.word	0x40020c00

0800445c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800445c:	b580      	push	{r7, lr}
 800445e:	b086      	sub	sp, #24
 8004460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004462:	1d3b      	adds	r3, r7, #4
 8004464:	2200      	movs	r2, #0
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	605a      	str	r2, [r3, #4]
 800446a:	609a      	str	r2, [r3, #8]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8004470:	4b1c      	ldr	r3, [pc, #112]	; (80044e4 <HAL_FMC_MspInit+0x88>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d131      	bne.n	80044dc <HAL_FMC_MspInit+0x80>
    return;
  }
  FMC_Initialized = 1;
 8004478:	4b1a      	ldr	r3, [pc, #104]	; (80044e4 <HAL_FMC_MspInit+0x88>)
 800447a:	2201      	movs	r2, #1
 800447c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800447e:	2300      	movs	r3, #0
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	4b19      	ldr	r3, [pc, #100]	; (80044e8 <HAL_FMC_MspInit+0x8c>)
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	4a18      	ldr	r2, [pc, #96]	; (80044e8 <HAL_FMC_MspInit+0x8c>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6393      	str	r3, [r2, #56]	; 0x38
 800448e:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <HAL_FMC_MspInit+0x8c>)
 8004490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004492:	f003 0301 	and.w	r3, r3, #1
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800449a:	f64f 7380 	movw	r3, #65408	; 0xff80
 800449e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044a0:	2302      	movs	r3, #2
 80044a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a4:	2300      	movs	r3, #0
 80044a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044a8:	2303      	movs	r3, #3
 80044aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044ac:	230c      	movs	r3, #12
 80044ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80044b0:	1d3b      	adds	r3, r7, #4
 80044b2:	4619      	mov	r1, r3
 80044b4:	480d      	ldr	r0, [pc, #52]	; (80044ec <HAL_FMC_MspInit+0x90>)
 80044b6:	f001 f911 	bl	80056dc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80044ba:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 80044be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044c0:	2302      	movs	r3, #2
 80044c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044c4:	2300      	movs	r3, #0
 80044c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044c8:	2303      	movs	r3, #3
 80044ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80044cc:	230c      	movs	r3, #12
 80044ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044d0:	1d3b      	adds	r3, r7, #4
 80044d2:	4619      	mov	r1, r3
 80044d4:	4806      	ldr	r0, [pc, #24]	; (80044f0 <HAL_FMC_MspInit+0x94>)
 80044d6:	f001 f901 	bl	80056dc <HAL_GPIO_Init>
 80044da:	e000      	b.n	80044de <HAL_FMC_MspInit+0x82>
    return;
 80044dc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	20000294 	.word	0x20000294
 80044e8:	40023800 	.word	0x40023800
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40020c00 	.word	0x40020c00

080044f4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b082      	sub	sp, #8
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80044fc:	f7ff ffae 	bl	800445c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8004500:	bf00      	nop
 8004502:	3708      	adds	r7, #8
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}

08004508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800450c:	e7fe      	b.n	800450c <NMI_Handler+0x4>

0800450e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800450e:	b480      	push	{r7}
 8004510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004512:	e7fe      	b.n	8004512 <HardFault_Handler+0x4>

08004514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004514:	b480      	push	{r7}
 8004516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004518:	e7fe      	b.n	8004518 <MemManage_Handler+0x4>

0800451a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800451a:	b480      	push	{r7}
 800451c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800451e:	e7fe      	b.n	800451e <BusFault_Handler+0x4>

08004520 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004524:	e7fe      	b.n	8004524 <UsageFault_Handler+0x4>

08004526 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004526:	b480      	push	{r7}
 8004528:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800452a:	bf00      	nop
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr

08004534 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004538:	bf00      	nop
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004542:	b480      	push	{r7}
 8004544:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004546:	bf00      	nop
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004554:	f000 f9ca 	bl	80048ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004558:	bf00      	nop
 800455a:	bd80      	pop	{r7, pc}

0800455c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8004560:	2001      	movs	r0, #1
 8004562:	f001 fab3 	bl	8005acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004570:	4805      	ldr	r0, [pc, #20]	; (8004588 <ADC_IRQHandler+0x1c>)
 8004572:	f000 fbc0 	bl	8004cf6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8004576:	4805      	ldr	r0, [pc, #20]	; (800458c <ADC_IRQHandler+0x20>)
 8004578:	f000 fbbd 	bl	8004cf6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800457c:	4804      	ldr	r0, [pc, #16]	; (8004590 <ADC_IRQHandler+0x24>)
 800457e:	f000 fbba 	bl	8004cf6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000638 	.word	0x20000638
 800458c:	2000046c 	.word	0x2000046c
 8004590:	20000680 	.word	0x20000680

08004594 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8004598:	2020      	movs	r0, #32
 800459a:	f001 fa97 	bl	8005acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80045a8:	4802      	ldr	r0, [pc, #8]	; (80045b4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80045aa:	f004 f928 	bl	80087fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80045ae:	bf00      	nop
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	20000790 	.word	0x20000790

080045b8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80045bc:	4802      	ldr	r0, [pc, #8]	; (80045c8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80045be:	f004 f91e 	bl	80087fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	2000050c 	.word	0x2000050c

080045cc <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 80045d0:	4802      	ldr	r0, [pc, #8]	; (80045dc <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80045d2:	f004 f914 	bl	80087fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80045d6:	bf00      	nop
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	200006e0 	.word	0x200006e0

080045e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80045e4:	4802      	ldr	r0, [pc, #8]	; (80045f0 <TIM2_IRQHandler+0x10>)
 80045e6:	f004 f90a 	bl	80087fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80045ea:	bf00      	nop
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	20000844 	.word	0x20000844

080045f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80045f8:	4802      	ldr	r0, [pc, #8]	; (8004604 <SPI1_IRQHandler+0x10>)
 80045fa:	f003 fcef 	bl	8007fdc <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80045fe:	bf00      	nop
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	200007ec 	.word	0x200007ec

08004608 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800460c:	4802      	ldr	r0, [pc, #8]	; (8004618 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800460e:	f004 f8f6 	bl	80087fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	200008f0 	.word	0x200008f0

0800461c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004620:	4802      	ldr	r0, [pc, #8]	; (800462c <TIM6_DAC_IRQHandler+0x10>)
 8004622:	f004 f8ec 	bl	80087fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004626:	bf00      	nop
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	20000744 	.word	0x20000744

08004630 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004634:	4802      	ldr	r0, [pc, #8]	; (8004640 <TIM7_IRQHandler+0x10>)
 8004636:	f004 f8e2 	bl	80087fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000940 	.word	0x20000940

08004644 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004644:	b480      	push	{r7}
 8004646:	af00      	add	r7, sp, #0
	return 1;
 8004648:	2301      	movs	r3, #1
}
 800464a:	4618      	mov	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <_kill>:

int _kill(int pid, int sig)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b082      	sub	sp, #8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800465e:	f007 f8fd 	bl	800b85c <__errno>
 8004662:	4603      	mov	r3, r0
 8004664:	2216      	movs	r2, #22
 8004666:	601a      	str	r2, [r3, #0]
	return -1;
 8004668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800466c:	4618      	mov	r0, r3
 800466e:	3708      	adds	r7, #8
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <_exit>:

void _exit (int status)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800467c:	f04f 31ff 	mov.w	r1, #4294967295
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ffe7 	bl	8004654 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004686:	e7fe      	b.n	8004686 <_exit+0x12>

08004688 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004694:	2300      	movs	r3, #0
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	e00a      	b.n	80046b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800469a:	f3af 8000 	nop.w
 800469e:	4601      	mov	r1, r0
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	60ba      	str	r2, [r7, #8]
 80046a6:	b2ca      	uxtb	r2, r1
 80046a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	3301      	adds	r3, #1
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	dbf0      	blt.n	800469a <_read+0x12>
	}

return len;
 80046b8:	687b      	ldr	r3, [r7, #4]
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3718      	adds	r7, #24
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}

080046c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80046c2:	b580      	push	{r7, lr}
 80046c4:	b086      	sub	sp, #24
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	e009      	b.n	80046e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	60ba      	str	r2, [r7, #8]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fc fd5b 	bl	8001198 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	3301      	adds	r3, #1
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	dbf1      	blt.n	80046d4 <_write+0x12>
	}
	return len;
 80046f0:	687b      	ldr	r3, [r7, #4]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <_close>:

int _close(int file)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
	return -1;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004706:	4618      	mov	r0, r3
 8004708:	370c      	adds	r7, #12
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr

08004712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
 800471a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004722:	605a      	str	r2, [r3, #4]
	return 0;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <_isatty>:

int _isatty(int file)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
	return 1;
 800473a:	2301      	movs	r3, #1
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
	return 0;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
	...

08004764 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b086      	sub	sp, #24
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800476c:	4a14      	ldr	r2, [pc, #80]	; (80047c0 <_sbrk+0x5c>)
 800476e:	4b15      	ldr	r3, [pc, #84]	; (80047c4 <_sbrk+0x60>)
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004778:	4b13      	ldr	r3, [pc, #76]	; (80047c8 <_sbrk+0x64>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <_sbrk+0x64>)
 8004782:	4a12      	ldr	r2, [pc, #72]	; (80047cc <_sbrk+0x68>)
 8004784:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004786:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <_sbrk+0x64>)
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4413      	add	r3, r2
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	429a      	cmp	r2, r3
 8004792:	d207      	bcs.n	80047a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004794:	f007 f862 	bl	800b85c <__errno>
 8004798:	4603      	mov	r3, r0
 800479a:	220c      	movs	r2, #12
 800479c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800479e:	f04f 33ff 	mov.w	r3, #4294967295
 80047a2:	e009      	b.n	80047b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80047a4:	4b08      	ldr	r3, [pc, #32]	; (80047c8 <_sbrk+0x64>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80047aa:	4b07      	ldr	r3, [pc, #28]	; (80047c8 <_sbrk+0x64>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4413      	add	r3, r2
 80047b2:	4a05      	ldr	r2, [pc, #20]	; (80047c8 <_sbrk+0x64>)
 80047b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80047b6:	68fb      	ldr	r3, [r7, #12]
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3718      	adds	r7, #24
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	20030000 	.word	0x20030000
 80047c4:	00000400 	.word	0x00000400
 80047c8:	20000298 	.word	0x20000298
 80047cc:	20000b68 	.word	0x20000b68

080047d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80047d4:	4b06      	ldr	r3, [pc, #24]	; (80047f0 <SystemInit+0x20>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	4a05      	ldr	r2, [pc, #20]	; (80047f0 <SystemInit+0x20>)
 80047dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80047e4:	bf00      	nop
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	e000ed00 	.word	0xe000ed00

080047f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80047f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800482c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047f8:	480d      	ldr	r0, [pc, #52]	; (8004830 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80047fa:	490e      	ldr	r1, [pc, #56]	; (8004834 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80047fc:	4a0e      	ldr	r2, [pc, #56]	; (8004838 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80047fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004800:	e002      	b.n	8004808 <LoopCopyDataInit>

08004802 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004802:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004804:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004806:	3304      	adds	r3, #4

08004808 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004808:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800480a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800480c:	d3f9      	bcc.n	8004802 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800480e:	4a0b      	ldr	r2, [pc, #44]	; (800483c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004810:	4c0b      	ldr	r4, [pc, #44]	; (8004840 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004812:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004814:	e001      	b.n	800481a <LoopFillZerobss>

08004816 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004816:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004818:	3204      	adds	r2, #4

0800481a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800481a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800481c:	d3fb      	bcc.n	8004816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800481e:	f7ff ffd7 	bl	80047d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004822:	f007 f821 	bl	800b868 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004826:	f7fc fccb 	bl	80011c0 <main>
  bx  lr    
 800482a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800482c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8004830:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004834:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8004838:	08014c80 	.word	0x08014c80
  ldr r2, =_sbss
 800483c:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8004840:	20000b68 	.word	0x20000b68

08004844 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004844:	e7fe      	b.n	8004844 <CAN1_RX0_IRQHandler>
	...

08004848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800484c:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <HAL_Init+0x40>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a0d      	ldr	r2, [pc, #52]	; (8004888 <HAL_Init+0x40>)
 8004852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_Init+0x40>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0a      	ldr	r2, [pc, #40]	; (8004888 <HAL_Init+0x40>)
 800485e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004864:	4b08      	ldr	r3, [pc, #32]	; (8004888 <HAL_Init+0x40>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a07      	ldr	r2, [pc, #28]	; (8004888 <HAL_Init+0x40>)
 800486a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800486e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004870:	2003      	movs	r0, #3
 8004872:	f000 fecb 	bl	800560c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004876:	200f      	movs	r0, #15
 8004878:	f000 f808 	bl	800488c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800487c:	f7ff fa6c 	bl	8003d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	40023c00 	.word	0x40023c00

0800488c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b082      	sub	sp, #8
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004894:	4b12      	ldr	r3, [pc, #72]	; (80048e0 <HAL_InitTick+0x54>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <HAL_InitTick+0x58>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	4619      	mov	r1, r3
 800489e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80048a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fee7 	bl	800567e <HAL_SYSTICK_Config>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e00e      	b.n	80048d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b0f      	cmp	r3, #15
 80048be:	d80a      	bhi.n	80048d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80048c0:	2200      	movs	r2, #0
 80048c2:	6879      	ldr	r1, [r7, #4]
 80048c4:	f04f 30ff 	mov.w	r0, #4294967295
 80048c8:	f000 feab 	bl	8005622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80048cc:	4a06      	ldr	r2, [pc, #24]	; (80048e8 <HAL_InitTick+0x5c>)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e000      	b.n	80048d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000020 	.word	0x20000020
 80048e4:	20000028 	.word	0x20000028
 80048e8:	20000024 	.word	0x20000024

080048ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <HAL_IncTick+0x20>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_IncTick+0x24>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4413      	add	r3, r2
 80048fc:	4a04      	ldr	r2, [pc, #16]	; (8004910 <HAL_IncTick+0x24>)
 80048fe:	6013      	str	r3, [r2, #0]
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000028 	.word	0x20000028
 8004910:	200009b8 	.word	0x200009b8

08004914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return uwTick;
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <HAL_GetTick+0x14>)
 800491a:	681b      	ldr	r3, [r3, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	200009b8 	.word	0x200009b8

0800492c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004934:	f7ff ffee 	bl	8004914 <HAL_GetTick>
 8004938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d005      	beq.n	8004952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004946:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <HAL_Delay+0x44>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004952:	bf00      	nop
 8004954:	f7ff ffde 	bl	8004914 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	429a      	cmp	r2, r3
 8004962:	d8f7      	bhi.n	8004954 <HAL_Delay+0x28>
  {
  }
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000028 	.word	0x20000028

08004974 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8004978:	4b05      	ldr	r3, [pc, #20]	; (8004990 <HAL_SuspendTick+0x1c>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a04      	ldr	r2, [pc, #16]	; (8004990 <HAL_SuspendTick+0x1c>)
 800497e:	f023 0302 	bic.w	r3, r3, #2
 8004982:	6013      	str	r3, [r2, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000e010 	.word	0xe000e010

08004994 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8004998:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HAL_ResumeTick+0x1c>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a04      	ldr	r2, [pc, #16]	; (80049b0 <HAL_ResumeTick+0x1c>)
 800499e:	f043 0302 	orr.w	r3, r3, #2
 80049a2:	6013      	str	r3, [r2, #0]
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	e000e010 	.word	0xe000e010

080049b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80049bc:	2300      	movs	r3, #0
 80049be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d101      	bne.n	80049ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e033      	b.n	8004a32 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff f9e8 	bl	8003da8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d118      	bne.n	8004a24 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80049fa:	f023 0302 	bic.w	r3, r3, #2
 80049fe:	f043 0202 	orr.w	r2, r3, #2
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fc14 	bl	8005234 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f023 0303 	bic.w	r3, r3, #3
 8004a1a:	f043 0201 	orr.w	r2, r3, #1
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40
 8004a22:	e001      	b.n	8004a28 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004a44:	2300      	movs	r3, #0
 8004a46:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d101      	bne.n	8004a56 <HAL_ADC_Start+0x1a>
 8004a52:	2302      	movs	r3, #2
 8004a54:	e0b2      	b.n	8004bbc <HAL_ADC_Start+0x180>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d018      	beq.n	8004a9e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a7c:	4b52      	ldr	r3, [pc, #328]	; (8004bc8 <HAL_ADC_Start+0x18c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a52      	ldr	r2, [pc, #328]	; (8004bcc <HAL_ADC_Start+0x190>)
 8004a82:	fba2 2303 	umull	r2, r3, r2, r3
 8004a86:	0c9a      	lsrs	r2, r3, #18
 8004a88:	4613      	mov	r3, r2
 8004a8a:	005b      	lsls	r3, r3, #1
 8004a8c:	4413      	add	r3, r2
 8004a8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004a90:	e002      	b.n	8004a98 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f9      	bne.n	8004a92 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d17a      	bne.n	8004ba2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004ab4:	f023 0301 	bic.w	r3, r3, #1
 8004ab8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d007      	beq.n	8004ade <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004ad6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aea:	d106      	bne.n	8004afa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af0:	f023 0206 	bic.w	r2, r3, #6
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	645a      	str	r2, [r3, #68]	; 0x44
 8004af8:	e002      	b.n	8004b00 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b08:	4b31      	ldr	r3, [pc, #196]	; (8004bd0 <HAL_ADC_Start+0x194>)
 8004b0a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004b14:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	f003 031f 	and.w	r3, r3, #31
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d12a      	bne.n	8004b78 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a2b      	ldr	r2, [pc, #172]	; (8004bd4 <HAL_ADC_Start+0x198>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d015      	beq.n	8004b58 <HAL_ADC_Start+0x11c>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a29      	ldr	r2, [pc, #164]	; (8004bd8 <HAL_ADC_Start+0x19c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d105      	bne.n	8004b42 <HAL_ADC_Start+0x106>
 8004b36:	4b26      	ldr	r3, [pc, #152]	; (8004bd0 <HAL_ADC_Start+0x194>)
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	f003 031f 	and.w	r3, r3, #31
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00a      	beq.n	8004b58 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a25      	ldr	r2, [pc, #148]	; (8004bdc <HAL_ADC_Start+0x1a0>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d136      	bne.n	8004bba <HAL_ADC_Start+0x17e>
 8004b4c:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <HAL_ADC_Start+0x194>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d130      	bne.n	8004bba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d129      	bne.n	8004bba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b74:	609a      	str	r2, [r3, #8]
 8004b76:	e020      	b.n	8004bba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a15      	ldr	r2, [pc, #84]	; (8004bd4 <HAL_ADC_Start+0x198>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d11b      	bne.n	8004bba <HAL_ADC_Start+0x17e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d114      	bne.n	8004bba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689a      	ldr	r2, [r3, #8]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	e00b      	b.n	8004bba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f043 0210 	orr.w	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	f043 0201 	orr.w	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	20000020 	.word	0x20000020
 8004bcc:	431bde83 	.word	0x431bde83
 8004bd0:	40012300 	.word	0x40012300
 8004bd4:	40012000 	.word	0x40012000
 8004bd8:	40012100 	.word	0x40012100
 8004bdc:	40012200 	.word	0x40012200

08004be0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bfc:	d113      	bne.n	8004c26 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c0c:	d10b      	bne.n	8004c26 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	f043 0220 	orr.w	r2, r3, #32
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e063      	b.n	8004cee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004c26:	f7ff fe75 	bl	8004914 <HAL_GetTick>
 8004c2a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c2c:	e021      	b.n	8004c72 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c34:	d01d      	beq.n	8004c72 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <HAL_ADC_PollForConversion+0x6c>
 8004c3c:	f7ff fe6a 	bl	8004914 <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d212      	bcs.n	8004c72 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0302 	and.w	r3, r3, #2
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d00b      	beq.n	8004c72 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f043 0204 	orr.w	r2, r3, #4
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e03d      	b.n	8004cee <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d1d6      	bne.n	8004c2e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0212 	mvn.w	r2, #18
 8004c88:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	689b      	ldr	r3, [r3, #8]
 8004c9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d123      	bne.n	8004cec <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d11f      	bne.n	8004cec <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d006      	beq.n	8004cc8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d111      	bne.n	8004cec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ccc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d105      	bne.n	8004cec <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce4:	f043 0201 	orr.w	r2, r3, #1
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
 8004d02:	2300      	movs	r3, #0
 8004d04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	bf0c      	ite	eq
 8004d14:	2301      	moveq	r3, #1
 8004d16:	2300      	movne	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f003 0320 	and.w	r3, r3, #32
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	bf0c      	ite	eq
 8004d2a:	2301      	moveq	r3, #1
 8004d2c:	2300      	movne	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d049      	beq.n	8004dcc <HAL_ADC_IRQHandler+0xd6>
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d046      	beq.n	8004dcc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d105      	bne.n	8004d56 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d12b      	bne.n	8004dbc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d127      	bne.n	8004dbc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d006      	beq.n	8004d88 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d119      	bne.n	8004dbc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0220 	bic.w	r2, r2, #32
 8004d96:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d105      	bne.n	8004dbc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db4:	f043 0201 	orr.w	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f8e8 	bl	8004f92 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f06f 0212 	mvn.w	r2, #18
 8004dca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b04      	cmp	r3, #4
 8004dd8:	bf0c      	ite	eq
 8004dda:	2301      	moveq	r3, #1
 8004ddc:	2300      	movne	r3, #0
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dec:	2b80      	cmp	r3, #128	; 0x80
 8004dee:	bf0c      	ite	eq
 8004df0:	2301      	moveq	r3, #1
 8004df2:	2300      	movne	r3, #0
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d057      	beq.n	8004eae <HAL_ADC_IRQHandler+0x1b8>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d054      	beq.n	8004eae <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d105      	bne.n	8004e1c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d139      	bne.n	8004e9e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e30:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d006      	beq.n	8004e46 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d12b      	bne.n	8004e9e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d124      	bne.n	8004e9e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d11d      	bne.n	8004e9e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d119      	bne.n	8004e9e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685a      	ldr	r2, [r3, #4]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e78:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d105      	bne.n	8004e9e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f043 0201 	orr.w	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	f000 fac4 	bl	800542c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f06f 020c 	mvn.w	r2, #12
 8004eac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	bf0c      	ite	eq
 8004ebc:	2301      	moveq	r3, #1
 8004ebe:	2300      	movne	r3, #0
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b40      	cmp	r3, #64	; 0x40
 8004ed0:	bf0c      	ite	eq
 8004ed2:	2301      	moveq	r3, #1
 8004ed4:	2300      	movne	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d017      	beq.n	8004f10 <HAL_ADC_IRQHandler+0x21a>
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d014      	beq.n	8004f10 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d10d      	bne.n	8004f10 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f850 	bl	8004fa6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f06f 0201 	mvn.w	r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0320 	and.w	r3, r3, #32
 8004f1a:	2b20      	cmp	r3, #32
 8004f1c:	bf0c      	ite	eq
 8004f1e:	2301      	moveq	r3, #1
 8004f20:	2300      	movne	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f34:	bf0c      	ite	eq
 8004f36:	2301      	moveq	r3, #1
 8004f38:	2300      	movne	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d015      	beq.n	8004f70 <HAL_ADC_IRQHandler+0x27a>
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d012      	beq.n	8004f70 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	f043 0202 	orr.w	r2, r3, #2
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f06f 0220 	mvn.w	r2, #32
 8004f5e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f82a 	bl	8004fba <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f06f 0220 	mvn.w	r2, #32
 8004f6e:	601a      	str	r2, [r3, #0]
  }
}
 8004f70:	bf00      	nop
 8004f72:	3710      	adds	r7, #16
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}

08004f78 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b083      	sub	sp, #12
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004f9a:	bf00      	nop
 8004f9c:	370c      	adds	r7, #12
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b083      	sub	sp, #12
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8004fae:	bf00      	nop
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b085      	sub	sp, #20
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_ADC_ConfigChannel+0x1c>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e113      	b.n	8005214 <HAL_ADC_ConfigChannel+0x244>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	2b09      	cmp	r3, #9
 8004ffa:	d925      	bls.n	8005048 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68d9      	ldr	r1, [r3, #12]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	b29b      	uxth	r3, r3
 8005008:	461a      	mov	r2, r3
 800500a:	4613      	mov	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4413      	add	r3, r2
 8005010:	3b1e      	subs	r3, #30
 8005012:	2207      	movs	r2, #7
 8005014:	fa02 f303 	lsl.w	r3, r2, r3
 8005018:	43da      	mvns	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	400a      	ands	r2, r1
 8005020:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68d9      	ldr	r1, [r3, #12]
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	b29b      	uxth	r3, r3
 8005032:	4618      	mov	r0, r3
 8005034:	4603      	mov	r3, r0
 8005036:	005b      	lsls	r3, r3, #1
 8005038:	4403      	add	r3, r0
 800503a:	3b1e      	subs	r3, #30
 800503c:	409a      	lsls	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	e022      	b.n	800508e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6919      	ldr	r1, [r3, #16]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	b29b      	uxth	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	4613      	mov	r3, r2
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	4413      	add	r3, r2
 800505c:	2207      	movs	r2, #7
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	43da      	mvns	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	400a      	ands	r2, r1
 800506a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6919      	ldr	r1, [r3, #16]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	b29b      	uxth	r3, r3
 800507c:	4618      	mov	r0, r3
 800507e:	4603      	mov	r3, r0
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	4403      	add	r3, r0
 8005084:	409a      	lsls	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	2b06      	cmp	r3, #6
 8005094:	d824      	bhi.n	80050e0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	3b05      	subs	r3, #5
 80050a8:	221f      	movs	r2, #31
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	43da      	mvns	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	400a      	ands	r2, r1
 80050b6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	4618      	mov	r0, r3
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	3b05      	subs	r3, #5
 80050d2:	fa00 f203 	lsl.w	r2, r0, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	635a      	str	r2, [r3, #52]	; 0x34
 80050de:	e04c      	b.n	800517a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	2b0c      	cmp	r3, #12
 80050e6:	d824      	bhi.n	8005132 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	685a      	ldr	r2, [r3, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	4413      	add	r3, r2
 80050f8:	3b23      	subs	r3, #35	; 0x23
 80050fa:	221f      	movs	r2, #31
 80050fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005100:	43da      	mvns	r2, r3
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	400a      	ands	r2, r1
 8005108:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	b29b      	uxth	r3, r3
 8005116:	4618      	mov	r0, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	3b23      	subs	r3, #35	; 0x23
 8005124:	fa00 f203 	lsl.w	r2, r0, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	631a      	str	r2, [r3, #48]	; 0x30
 8005130:	e023      	b.n	800517a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	4613      	mov	r3, r2
 800513e:	009b      	lsls	r3, r3, #2
 8005140:	4413      	add	r3, r2
 8005142:	3b41      	subs	r3, #65	; 0x41
 8005144:	221f      	movs	r2, #31
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	43da      	mvns	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	400a      	ands	r2, r1
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	b29b      	uxth	r3, r3
 8005160:	4618      	mov	r0, r3
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685a      	ldr	r2, [r3, #4]
 8005166:	4613      	mov	r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	4413      	add	r3, r2
 800516c:	3b41      	subs	r3, #65	; 0x41
 800516e:	fa00 f203 	lsl.w	r2, r0, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800517a:	4b29      	ldr	r3, [pc, #164]	; (8005220 <HAL_ADC_ConfigChannel+0x250>)
 800517c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a28      	ldr	r2, [pc, #160]	; (8005224 <HAL_ADC_ConfigChannel+0x254>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d10f      	bne.n	80051a8 <HAL_ADC_ConfigChannel+0x1d8>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b12      	cmp	r3, #18
 800518e:	d10b      	bne.n	80051a8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <HAL_ADC_ConfigChannel+0x254>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d12b      	bne.n	800520a <HAL_ADC_ConfigChannel+0x23a>
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a1c      	ldr	r2, [pc, #112]	; (8005228 <HAL_ADC_ConfigChannel+0x258>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <HAL_ADC_ConfigChannel+0x1f4>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b11      	cmp	r3, #17
 80051c2:	d122      	bne.n	800520a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a11      	ldr	r2, [pc, #68]	; (8005228 <HAL_ADC_ConfigChannel+0x258>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d111      	bne.n	800520a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80051e6:	4b11      	ldr	r3, [pc, #68]	; (800522c <HAL_ADC_ConfigChannel+0x25c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a11      	ldr	r2, [pc, #68]	; (8005230 <HAL_ADC_ConfigChannel+0x260>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	0c9a      	lsrs	r2, r3, #18
 80051f2:	4613      	mov	r3, r2
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	005b      	lsls	r3, r3, #1
 80051fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80051fc:	e002      	b.n	8005204 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	3b01      	subs	r3, #1
 8005202:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d1f9      	bne.n	80051fe <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr
 8005220:	40012300 	.word	0x40012300
 8005224:	40012000 	.word	0x40012000
 8005228:	10000012 	.word	0x10000012
 800522c:	20000020 	.word	0x20000020
 8005230:	431bde83 	.word	0x431bde83

08005234 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005234:	b480      	push	{r7}
 8005236:	b085      	sub	sp, #20
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800523c:	4b79      	ldr	r3, [pc, #484]	; (8005424 <ADC_Init+0x1f0>)
 800523e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	685a      	ldr	r2, [r3, #4]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	431a      	orrs	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685a      	ldr	r2, [r3, #4]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005268:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6859      	ldr	r1, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	021a      	lsls	r2, r3, #8
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	430a      	orrs	r2, r1
 800527c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800528c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6859      	ldr	r1, [r3, #4]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	689a      	ldr	r2, [r3, #8]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	430a      	orrs	r2, r1
 800529e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6899      	ldr	r1, [r3, #8]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	4a58      	ldr	r2, [pc, #352]	; (8005428 <ADC_Init+0x1f4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d022      	beq.n	8005312 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	689a      	ldr	r2, [r3, #8]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80052da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6899      	ldr	r1, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	689a      	ldr	r2, [r3, #8]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80052fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	6899      	ldr	r1, [r3, #8]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	609a      	str	r2, [r3, #8]
 8005310:	e00f      	b.n	8005332 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689a      	ldr	r2, [r3, #8]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005320:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005330:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	689a      	ldr	r2, [r3, #8]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f022 0202 	bic.w	r2, r2, #2
 8005340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	6899      	ldr	r1, [r3, #8]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	7e1b      	ldrb	r3, [r3, #24]
 800534c:	005a      	lsls	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d01b      	beq.n	8005398 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685a      	ldr	r2, [r3, #4]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800536e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685a      	ldr	r2, [r3, #4]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800537e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	6859      	ldr	r1, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	3b01      	subs	r3, #1
 800538c:	035a      	lsls	r2, r3, #13
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	605a      	str	r2, [r3, #4]
 8005396:	e007      	b.n	80053a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685a      	ldr	r2, [r3, #4]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	051a      	lsls	r2, r3, #20
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80053dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	6899      	ldr	r1, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80053ea:	025a      	lsls	r2, r3, #9
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	689a      	ldr	r2, [r3, #8]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005402:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6899      	ldr	r1, [r3, #8]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	029a      	lsls	r2, r3, #10
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	430a      	orrs	r2, r1
 8005416:	609a      	str	r2, [r3, #8]
}
 8005418:	bf00      	nop
 800541a:	3714      	adds	r7, #20
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40012300 	.word	0x40012300
 8005428:	0f000001 	.word	0x0f000001

0800542c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005440:	b480      	push	{r7}
 8005442:	b085      	sub	sp, #20
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f003 0307 	and.w	r3, r3, #7
 800544e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005450:	4b0c      	ldr	r3, [pc, #48]	; (8005484 <__NVIC_SetPriorityGrouping+0x44>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800545c:	4013      	ands	r3, r2
 800545e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800546c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005472:	4a04      	ldr	r2, [pc, #16]	; (8005484 <__NVIC_SetPriorityGrouping+0x44>)
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	60d3      	str	r3, [r2, #12]
}
 8005478:	bf00      	nop
 800547a:	3714      	adds	r7, #20
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr
 8005484:	e000ed00 	.word	0xe000ed00

08005488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005488:	b480      	push	{r7}
 800548a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800548c:	4b04      	ldr	r3, [pc, #16]	; (80054a0 <__NVIC_GetPriorityGrouping+0x18>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	0a1b      	lsrs	r3, r3, #8
 8005492:	f003 0307 	and.w	r3, r3, #7
}
 8005496:	4618      	mov	r0, r3
 8005498:	46bd      	mov	sp, r7
 800549a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549e:	4770      	bx	lr
 80054a0:	e000ed00 	.word	0xe000ed00

080054a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b083      	sub	sp, #12
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	4603      	mov	r3, r0
 80054ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	db0b      	blt.n	80054ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054b6:	79fb      	ldrb	r3, [r7, #7]
 80054b8:	f003 021f 	and.w	r2, r3, #31
 80054bc:	4907      	ldr	r1, [pc, #28]	; (80054dc <__NVIC_EnableIRQ+0x38>)
 80054be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054c2:	095b      	lsrs	r3, r3, #5
 80054c4:	2001      	movs	r0, #1
 80054c6:	fa00 f202 	lsl.w	r2, r0, r2
 80054ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054ce:	bf00      	nop
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	e000e100 	.word	0xe000e100

080054e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	6039      	str	r1, [r7, #0]
 80054ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	db0a      	blt.n	800550a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	490c      	ldr	r1, [pc, #48]	; (800552c <__NVIC_SetPriority+0x4c>)
 80054fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054fe:	0112      	lsls	r2, r2, #4
 8005500:	b2d2      	uxtb	r2, r2
 8005502:	440b      	add	r3, r1
 8005504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005508:	e00a      	b.n	8005520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	b2da      	uxtb	r2, r3
 800550e:	4908      	ldr	r1, [pc, #32]	; (8005530 <__NVIC_SetPriority+0x50>)
 8005510:	79fb      	ldrb	r3, [r7, #7]
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	3b04      	subs	r3, #4
 8005518:	0112      	lsls	r2, r2, #4
 800551a:	b2d2      	uxtb	r2, r2
 800551c:	440b      	add	r3, r1
 800551e:	761a      	strb	r2, [r3, #24]
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr
 800552c:	e000e100 	.word	0xe000e100
 8005530:	e000ed00 	.word	0xe000ed00

08005534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005534:	b480      	push	{r7}
 8005536:	b089      	sub	sp, #36	; 0x24
 8005538:	af00      	add	r7, sp, #0
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f003 0307 	and.w	r3, r3, #7
 8005546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	f1c3 0307 	rsb	r3, r3, #7
 800554e:	2b04      	cmp	r3, #4
 8005550:	bf28      	it	cs
 8005552:	2304      	movcs	r3, #4
 8005554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	3304      	adds	r3, #4
 800555a:	2b06      	cmp	r3, #6
 800555c:	d902      	bls.n	8005564 <NVIC_EncodePriority+0x30>
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	3b03      	subs	r3, #3
 8005562:	e000      	b.n	8005566 <NVIC_EncodePriority+0x32>
 8005564:	2300      	movs	r3, #0
 8005566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005568:	f04f 32ff 	mov.w	r2, #4294967295
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	fa02 f303 	lsl.w	r3, r2, r3
 8005572:	43da      	mvns	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	401a      	ands	r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800557c:	f04f 31ff 	mov.w	r1, #4294967295
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	fa01 f303 	lsl.w	r3, r1, r3
 8005586:	43d9      	mvns	r1, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800558c:	4313      	orrs	r3, r2
         );
}
 800558e:	4618      	mov	r0, r3
 8005590:	3724      	adds	r7, #36	; 0x24
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
	...

0800559c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80055a0:	f3bf 8f4f 	dsb	sy
}
 80055a4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80055a6:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <__NVIC_SystemReset+0x24>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80055ae:	4904      	ldr	r1, [pc, #16]	; (80055c0 <__NVIC_SystemReset+0x24>)
 80055b0:	4b04      	ldr	r3, [pc, #16]	; (80055c4 <__NVIC_SystemReset+0x28>)
 80055b2:	4313      	orrs	r3, r2
 80055b4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80055b6:	f3bf 8f4f 	dsb	sy
}
 80055ba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80055bc:	bf00      	nop
 80055be:	e7fd      	b.n	80055bc <__NVIC_SystemReset+0x20>
 80055c0:	e000ed00 	.word	0xe000ed00
 80055c4:	05fa0004 	.word	0x05fa0004

080055c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	3b01      	subs	r3, #1
 80055d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055d8:	d301      	bcc.n	80055de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055da:	2301      	movs	r3, #1
 80055dc:	e00f      	b.n	80055fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055de:	4a0a      	ldr	r2, [pc, #40]	; (8005608 <SysTick_Config+0x40>)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055e6:	210f      	movs	r1, #15
 80055e8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ec:	f7ff ff78 	bl	80054e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055f0:	4b05      	ldr	r3, [pc, #20]	; (8005608 <SysTick_Config+0x40>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055f6:	4b04      	ldr	r3, [pc, #16]	; (8005608 <SysTick_Config+0x40>)
 80055f8:	2207      	movs	r2, #7
 80055fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3708      	adds	r7, #8
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	e000e010 	.word	0xe000e010

0800560c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff ff13 	bl	8005440 <__NVIC_SetPriorityGrouping>
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005622:	b580      	push	{r7, lr}
 8005624:	b086      	sub	sp, #24
 8005626:	af00      	add	r7, sp, #0
 8005628:	4603      	mov	r3, r0
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005630:	2300      	movs	r3, #0
 8005632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005634:	f7ff ff28 	bl	8005488 <__NVIC_GetPriorityGrouping>
 8005638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	68b9      	ldr	r1, [r7, #8]
 800563e:	6978      	ldr	r0, [r7, #20]
 8005640:	f7ff ff78 	bl	8005534 <NVIC_EncodePriority>
 8005644:	4602      	mov	r2, r0
 8005646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800564a:	4611      	mov	r1, r2
 800564c:	4618      	mov	r0, r3
 800564e:	f7ff ff47 	bl	80054e0 <__NVIC_SetPriority>
}
 8005652:	bf00      	nop
 8005654:	3718      	adds	r7, #24
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}

0800565a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800565a:	b580      	push	{r7, lr}
 800565c:	b082      	sub	sp, #8
 800565e:	af00      	add	r7, sp, #0
 8005660:	4603      	mov	r3, r0
 8005662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff ff1b 	bl	80054a4 <__NVIC_EnableIRQ>
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}

08005676 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8005676:	b580      	push	{r7, lr}
 8005678:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800567a:	f7ff ff8f 	bl	800559c <__NVIC_SystemReset>

0800567e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b082      	sub	sp, #8
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff ff9e 	bl	80055c8 <SysTick_Config>
 800568c:	4603      	mov	r3, r0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}

08005696 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005696:	b480      	push	{r7}
 8005698:	b083      	sub	sp, #12
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d004      	beq.n	80056b4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2280      	movs	r2, #128	; 0x80
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e00c      	b.n	80056ce <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2205      	movs	r2, #5
 80056b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f022 0201 	bic.w	r2, r2, #1
 80056ca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056cc:	2300      	movs	r3, #0
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	370c      	adds	r7, #12
 80056d2:	46bd      	mov	sp, r7
 80056d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d8:	4770      	bx	lr
	...

080056dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056dc:	b480      	push	{r7}
 80056de:	b089      	sub	sp, #36	; 0x24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	e177      	b.n	80059e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80056f8:	2201      	movs	r2, #1
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4013      	ands	r3, r2
 800570a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	429a      	cmp	r2, r3
 8005712:	f040 8166 	bne.w	80059e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f003 0303 	and.w	r3, r3, #3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d005      	beq.n	800572e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800572a:	2b02      	cmp	r3, #2
 800572c:	d130      	bne.n	8005790 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	005b      	lsls	r3, r3, #1
 8005738:	2203      	movs	r2, #3
 800573a:	fa02 f303 	lsl.w	r3, r2, r3
 800573e:	43db      	mvns	r3, r3
 8005740:	69ba      	ldr	r2, [r7, #24]
 8005742:	4013      	ands	r3, r2
 8005744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4313      	orrs	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005764:	2201      	movs	r2, #1
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43db      	mvns	r3, r3
 800576e:	69ba      	ldr	r2, [r7, #24]
 8005770:	4013      	ands	r3, r2
 8005772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	091b      	lsrs	r3, r3, #4
 800577a:	f003 0201 	and.w	r2, r3, #1
 800577e:	69fb      	ldr	r3, [r7, #28]
 8005780:	fa02 f303 	lsl.w	r3, r2, r3
 8005784:	69ba      	ldr	r2, [r7, #24]
 8005786:	4313      	orrs	r3, r2
 8005788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	2b03      	cmp	r3, #3
 800579a:	d017      	beq.n	80057cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	2203      	movs	r2, #3
 80057a8:	fa02 f303 	lsl.w	r3, r2, r3
 80057ac:	43db      	mvns	r3, r3
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	4013      	ands	r3, r2
 80057b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	005b      	lsls	r3, r3, #1
 80057bc:	fa02 f303 	lsl.w	r3, r2, r3
 80057c0:	69ba      	ldr	r2, [r7, #24]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f003 0303 	and.w	r3, r3, #3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d123      	bne.n	8005820 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	08da      	lsrs	r2, r3, #3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3208      	adds	r2, #8
 80057e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	220f      	movs	r2, #15
 80057f0:	fa02 f303 	lsl.w	r3, r2, r3
 80057f4:	43db      	mvns	r3, r3
 80057f6:	69ba      	ldr	r2, [r7, #24]
 80057f8:	4013      	ands	r3, r2
 80057fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	691a      	ldr	r2, [r3, #16]
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	4313      	orrs	r3, r2
 8005810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	08da      	lsrs	r2, r3, #3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	3208      	adds	r2, #8
 800581a:	69b9      	ldr	r1, [r7, #24]
 800581c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	005b      	lsls	r3, r3, #1
 800582a:	2203      	movs	r2, #3
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	43db      	mvns	r3, r3
 8005832:	69ba      	ldr	r2, [r7, #24]
 8005834:	4013      	ands	r3, r2
 8005836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f003 0203 	and.w	r2, r3, #3
 8005840:	69fb      	ldr	r3, [r7, #28]
 8005842:	005b      	lsls	r3, r3, #1
 8005844:	fa02 f303 	lsl.w	r3, r2, r3
 8005848:	69ba      	ldr	r2, [r7, #24]
 800584a:	4313      	orrs	r3, r2
 800584c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 80c0 	beq.w	80059e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005862:	2300      	movs	r3, #0
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	4b66      	ldr	r3, [pc, #408]	; (8005a00 <HAL_GPIO_Init+0x324>)
 8005868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800586a:	4a65      	ldr	r2, [pc, #404]	; (8005a00 <HAL_GPIO_Init+0x324>)
 800586c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005870:	6453      	str	r3, [r2, #68]	; 0x44
 8005872:	4b63      	ldr	r3, [pc, #396]	; (8005a00 <HAL_GPIO_Init+0x324>)
 8005874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800587a:	60fb      	str	r3, [r7, #12]
 800587c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800587e:	4a61      	ldr	r2, [pc, #388]	; (8005a04 <HAL_GPIO_Init+0x328>)
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	089b      	lsrs	r3, r3, #2
 8005884:	3302      	adds	r3, #2
 8005886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	220f      	movs	r2, #15
 8005896:	fa02 f303 	lsl.w	r3, r2, r3
 800589a:	43db      	mvns	r3, r3
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4013      	ands	r3, r2
 80058a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a58      	ldr	r2, [pc, #352]	; (8005a08 <HAL_GPIO_Init+0x32c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d037      	beq.n	800591a <HAL_GPIO_Init+0x23e>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a57      	ldr	r2, [pc, #348]	; (8005a0c <HAL_GPIO_Init+0x330>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d031      	beq.n	8005916 <HAL_GPIO_Init+0x23a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a56      	ldr	r2, [pc, #344]	; (8005a10 <HAL_GPIO_Init+0x334>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d02b      	beq.n	8005912 <HAL_GPIO_Init+0x236>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a55      	ldr	r2, [pc, #340]	; (8005a14 <HAL_GPIO_Init+0x338>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d025      	beq.n	800590e <HAL_GPIO_Init+0x232>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a54      	ldr	r2, [pc, #336]	; (8005a18 <HAL_GPIO_Init+0x33c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d01f      	beq.n	800590a <HAL_GPIO_Init+0x22e>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a53      	ldr	r2, [pc, #332]	; (8005a1c <HAL_GPIO_Init+0x340>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d019      	beq.n	8005906 <HAL_GPIO_Init+0x22a>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a52      	ldr	r2, [pc, #328]	; (8005a20 <HAL_GPIO_Init+0x344>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d013      	beq.n	8005902 <HAL_GPIO_Init+0x226>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a51      	ldr	r2, [pc, #324]	; (8005a24 <HAL_GPIO_Init+0x348>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00d      	beq.n	80058fe <HAL_GPIO_Init+0x222>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a50      	ldr	r2, [pc, #320]	; (8005a28 <HAL_GPIO_Init+0x34c>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d007      	beq.n	80058fa <HAL_GPIO_Init+0x21e>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a4f      	ldr	r2, [pc, #316]	; (8005a2c <HAL_GPIO_Init+0x350>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d101      	bne.n	80058f6 <HAL_GPIO_Init+0x21a>
 80058f2:	2309      	movs	r3, #9
 80058f4:	e012      	b.n	800591c <HAL_GPIO_Init+0x240>
 80058f6:	230a      	movs	r3, #10
 80058f8:	e010      	b.n	800591c <HAL_GPIO_Init+0x240>
 80058fa:	2308      	movs	r3, #8
 80058fc:	e00e      	b.n	800591c <HAL_GPIO_Init+0x240>
 80058fe:	2307      	movs	r3, #7
 8005900:	e00c      	b.n	800591c <HAL_GPIO_Init+0x240>
 8005902:	2306      	movs	r3, #6
 8005904:	e00a      	b.n	800591c <HAL_GPIO_Init+0x240>
 8005906:	2305      	movs	r3, #5
 8005908:	e008      	b.n	800591c <HAL_GPIO_Init+0x240>
 800590a:	2304      	movs	r3, #4
 800590c:	e006      	b.n	800591c <HAL_GPIO_Init+0x240>
 800590e:	2303      	movs	r3, #3
 8005910:	e004      	b.n	800591c <HAL_GPIO_Init+0x240>
 8005912:	2302      	movs	r3, #2
 8005914:	e002      	b.n	800591c <HAL_GPIO_Init+0x240>
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <HAL_GPIO_Init+0x240>
 800591a:	2300      	movs	r3, #0
 800591c:	69fa      	ldr	r2, [r7, #28]
 800591e:	f002 0203 	and.w	r2, r2, #3
 8005922:	0092      	lsls	r2, r2, #2
 8005924:	4093      	lsls	r3, r2
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4313      	orrs	r3, r2
 800592a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800592c:	4935      	ldr	r1, [pc, #212]	; (8005a04 <HAL_GPIO_Init+0x328>)
 800592e:	69fb      	ldr	r3, [r7, #28]
 8005930:	089b      	lsrs	r3, r3, #2
 8005932:	3302      	adds	r3, #2
 8005934:	69ba      	ldr	r2, [r7, #24]
 8005936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800593a:	4b3d      	ldr	r3, [pc, #244]	; (8005a30 <HAL_GPIO_Init+0x354>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	43db      	mvns	r3, r3
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	4013      	ands	r3, r2
 8005948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800595e:	4a34      	ldr	r2, [pc, #208]	; (8005a30 <HAL_GPIO_Init+0x354>)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005964:	4b32      	ldr	r3, [pc, #200]	; (8005a30 <HAL_GPIO_Init+0x354>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	43db      	mvns	r3, r3
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	4013      	ands	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d003      	beq.n	8005988 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005988:	4a29      	ldr	r2, [pc, #164]	; (8005a30 <HAL_GPIO_Init+0x354>)
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800598e:	4b28      	ldr	r3, [pc, #160]	; (8005a30 <HAL_GPIO_Init+0x354>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	43db      	mvns	r3, r3
 8005998:	69ba      	ldr	r2, [r7, #24]
 800599a:	4013      	ands	r3, r2
 800599c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059aa:	69ba      	ldr	r2, [r7, #24]
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059b2:	4a1f      	ldr	r2, [pc, #124]	; (8005a30 <HAL_GPIO_Init+0x354>)
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059b8:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <HAL_GPIO_Init+0x354>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	43db      	mvns	r3, r3
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4013      	ands	r3, r2
 80059c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059d4:	69ba      	ldr	r2, [r7, #24]
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059dc:	4a14      	ldr	r2, [pc, #80]	; (8005a30 <HAL_GPIO_Init+0x354>)
 80059de:	69bb      	ldr	r3, [r7, #24]
 80059e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	3301      	adds	r3, #1
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	2b0f      	cmp	r3, #15
 80059ec:	f67f ae84 	bls.w	80056f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80059f0:	bf00      	nop
 80059f2:	bf00      	nop
 80059f4:	3724      	adds	r7, #36	; 0x24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	40023800 	.word	0x40023800
 8005a04:	40013800 	.word	0x40013800
 8005a08:	40020000 	.word	0x40020000
 8005a0c:	40020400 	.word	0x40020400
 8005a10:	40020800 	.word	0x40020800
 8005a14:	40020c00 	.word	0x40020c00
 8005a18:	40021000 	.word	0x40021000
 8005a1c:	40021400 	.word	0x40021400
 8005a20:	40021800 	.word	0x40021800
 8005a24:	40021c00 	.word	0x40021c00
 8005a28:	40022000 	.word	0x40022000
 8005a2c:	40022400 	.word	0x40022400
 8005a30:	40013c00 	.word	0x40013c00

08005a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b085      	sub	sp, #20
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691a      	ldr	r2, [r3, #16]
 8005a44:	887b      	ldrh	r3, [r7, #2]
 8005a46:	4013      	ands	r3, r2
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	73fb      	strb	r3, [r7, #15]
 8005a50:	e001      	b.n	8005a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005a52:	2300      	movs	r3, #0
 8005a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	807b      	strh	r3, [r7, #2]
 8005a70:	4613      	mov	r3, r2
 8005a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005a74:	787b      	ldrb	r3, [r7, #1]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a7a:	887a      	ldrh	r2, [r7, #2]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005a80:	e003      	b.n	8005a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005a82:	887b      	ldrh	r3, [r7, #2]
 8005a84:	041a      	lsls	r2, r3, #16
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	619a      	str	r2, [r3, #24]
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b085      	sub	sp, #20
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005aa8:	887a      	ldrh	r2, [r7, #2]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	4013      	ands	r3, r2
 8005aae:	041a      	lsls	r2, r3, #16
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	43d9      	mvns	r1, r3
 8005ab4:	887b      	ldrh	r3, [r7, #2]
 8005ab6:	400b      	ands	r3, r1
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	619a      	str	r2, [r3, #24]
}
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
	...

08005acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ad6:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ad8:	695a      	ldr	r2, [r3, #20]
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	4013      	ands	r3, r2
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d006      	beq.n	8005af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005ae2:	4a05      	ldr	r2, [pc, #20]	; (8005af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005ae4:	88fb      	ldrh	r3, [r7, #6]
 8005ae6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005ae8:	88fb      	ldrh	r3, [r7, #6]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fd f8a4 	bl	8002c38 <HAL_GPIO_EXTI_Callback>
  }
}
 8005af0:	bf00      	nop
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40013c00 	.word	0x40013c00

08005afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d101      	bne.n	8005b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e12b      	b.n	8005d66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d106      	bne.n	8005b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7fe fa00 	bl	8003f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2224      	movs	r2, #36	; 0x24
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f022 0201 	bic.w	r2, r2, #1
 8005b3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005b4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005b5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b60:	f001 fd9c 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 8005b64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4a81      	ldr	r2, [pc, #516]	; (8005d70 <HAL_I2C_Init+0x274>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d807      	bhi.n	8005b80 <HAL_I2C_Init+0x84>
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	4a80      	ldr	r2, [pc, #512]	; (8005d74 <HAL_I2C_Init+0x278>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	bf94      	ite	ls
 8005b78:	2301      	movls	r3, #1
 8005b7a:	2300      	movhi	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	e006      	b.n	8005b8e <HAL_I2C_Init+0x92>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	4a7d      	ldr	r2, [pc, #500]	; (8005d78 <HAL_I2C_Init+0x27c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	bf94      	ite	ls
 8005b88:	2301      	movls	r3, #1
 8005b8a:	2300      	movhi	r3, #0
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e0e7      	b.n	8005d66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	4a78      	ldr	r2, [pc, #480]	; (8005d7c <HAL_I2C_Init+0x280>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	0c9b      	lsrs	r3, r3, #18
 8005ba0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	4a6a      	ldr	r2, [pc, #424]	; (8005d70 <HAL_I2C_Init+0x274>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d802      	bhi.n	8005bd0 <HAL_I2C_Init+0xd4>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	e009      	b.n	8005be4 <HAL_I2C_Init+0xe8>
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005bd6:	fb02 f303 	mul.w	r3, r2, r3
 8005bda:	4a69      	ldr	r2, [pc, #420]	; (8005d80 <HAL_I2C_Init+0x284>)
 8005bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005be0:	099b      	lsrs	r3, r3, #6
 8005be2:	3301      	adds	r3, #1
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	430b      	orrs	r3, r1
 8005bea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69db      	ldr	r3, [r3, #28]
 8005bf2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005bf6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	495c      	ldr	r1, [pc, #368]	; (8005d70 <HAL_I2C_Init+0x274>)
 8005c00:	428b      	cmp	r3, r1
 8005c02:	d819      	bhi.n	8005c38 <HAL_I2C_Init+0x13c>
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	1e59      	subs	r1, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c12:	1c59      	adds	r1, r3, #1
 8005c14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005c18:	400b      	ands	r3, r1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <HAL_I2C_Init+0x138>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	1e59      	subs	r1, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c32:	e051      	b.n	8005cd8 <HAL_I2C_Init+0x1dc>
 8005c34:	2304      	movs	r3, #4
 8005c36:	e04f      	b.n	8005cd8 <HAL_I2C_Init+0x1dc>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	689b      	ldr	r3, [r3, #8]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d111      	bne.n	8005c64 <HAL_I2C_Init+0x168>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	1e58      	subs	r0, r3, #1
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6859      	ldr	r1, [r3, #4]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	440b      	add	r3, r1
 8005c4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c52:	3301      	adds	r3, #1
 8005c54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	bf0c      	ite	eq
 8005c5c:	2301      	moveq	r3, #1
 8005c5e:	2300      	movne	r3, #0
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	e012      	b.n	8005c8a <HAL_I2C_Init+0x18e>
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	1e58      	subs	r0, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6859      	ldr	r1, [r3, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	0099      	lsls	r1, r3, #2
 8005c74:	440b      	add	r3, r1
 8005c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	bf0c      	ite	eq
 8005c84:	2301      	moveq	r3, #1
 8005c86:	2300      	movne	r3, #0
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d001      	beq.n	8005c92 <HAL_I2C_Init+0x196>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e022      	b.n	8005cd8 <HAL_I2C_Init+0x1dc>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d10e      	bne.n	8005cb8 <HAL_I2C_Init+0x1bc>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1e58      	subs	r0, r3, #1
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6859      	ldr	r1, [r3, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	440b      	add	r3, r1
 8005ca8:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cac:	3301      	adds	r3, #1
 8005cae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cb6:	e00f      	b.n	8005cd8 <HAL_I2C_Init+0x1dc>
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	1e58      	subs	r0, r3, #1
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6859      	ldr	r1, [r3, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	0099      	lsls	r1, r3, #2
 8005cc8:	440b      	add	r3, r1
 8005cca:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cce:	3301      	adds	r3, #1
 8005cd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cd8:	6879      	ldr	r1, [r7, #4]
 8005cda:	6809      	ldr	r1, [r1, #0]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69da      	ldr	r2, [r3, #28]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	430a      	orrs	r2, r1
 8005cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005d06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6911      	ldr	r1, [r2, #16]
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	68d2      	ldr	r2, [r2, #12]
 8005d12:	4311      	orrs	r1, r2
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	6812      	ldr	r2, [r2, #0]
 8005d18:	430b      	orrs	r3, r1
 8005d1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	699b      	ldr	r3, [r3, #24]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	430a      	orrs	r2, r1
 8005d36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f042 0201 	orr.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2220      	movs	r2, #32
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	000186a0 	.word	0x000186a0
 8005d74:	001e847f 	.word	0x001e847f
 8005d78:	003d08ff 	.word	0x003d08ff
 8005d7c:	431bde83 	.word	0x431bde83
 8005d80:	10624dd3 	.word	0x10624dd3

08005d84 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af02      	add	r7, sp, #8
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	4608      	mov	r0, r1
 8005d8e:	4611      	mov	r1, r2
 8005d90:	461a      	mov	r2, r3
 8005d92:	4603      	mov	r3, r0
 8005d94:	817b      	strh	r3, [r7, #10]
 8005d96:	460b      	mov	r3, r1
 8005d98:	813b      	strh	r3, [r7, #8]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005d9e:	f7fe fdb9 	bl	8004914 <HAL_GetTick>
 8005da2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005daa:	b2db      	uxtb	r3, r3
 8005dac:	2b20      	cmp	r3, #32
 8005dae:	f040 80d9 	bne.w	8005f64 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	9300      	str	r3, [sp, #0]
 8005db6:	2319      	movs	r3, #25
 8005db8:	2201      	movs	r2, #1
 8005dba:	496d      	ldr	r1, [pc, #436]	; (8005f70 <HAL_I2C_Mem_Write+0x1ec>)
 8005dbc:	68f8      	ldr	r0, [r7, #12]
 8005dbe:	f000 fdad 	bl	800691c <I2C_WaitOnFlagUntilTimeout>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e0cc      	b.n	8005f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_I2C_Mem_Write+0x56>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e0c5      	b.n	8005f66 <HAL_I2C_Mem_Write+0x1e2>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d007      	beq.n	8005e00 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2221      	movs	r2, #33	; 0x21
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2240      	movs	r2, #64	; 0x40
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6a3a      	ldr	r2, [r7, #32]
 8005e2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005e30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4a4d      	ldr	r2, [pc, #308]	; (8005f74 <HAL_I2C_Mem_Write+0x1f0>)
 8005e40:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e42:	88f8      	ldrh	r0, [r7, #6]
 8005e44:	893a      	ldrh	r2, [r7, #8]
 8005e46:	8979      	ldrh	r1, [r7, #10]
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	9301      	str	r3, [sp, #4]
 8005e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4e:	9300      	str	r3, [sp, #0]
 8005e50:	4603      	mov	r3, r0
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f000 fbe4 	bl	8006620 <I2C_RequestMemoryWrite>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d052      	beq.n	8005f04 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e081      	b.n	8005f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f000 fe2e 	bl	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00d      	beq.n	8005e8e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d107      	bne.n	8005e8a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e88:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	e06b      	b.n	8005f66 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ea8:	3b01      	subs	r3, #1
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	695b      	ldr	r3, [r3, #20]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d11b      	bne.n	8005f04 <HAL_I2C_Mem_Write+0x180>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d017      	beq.n	8005f04 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	781a      	ldrb	r2, [r3, #0]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	1c5a      	adds	r2, r3, #1
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d1aa      	bne.n	8005e62 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f000 fe1a 	bl	8006b4a <I2C_WaitOnBTFFlagUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00d      	beq.n	8005f38 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	2b04      	cmp	r3, #4
 8005f22:	d107      	bne.n	8005f34 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f32:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	e016      	b.n	8005f66 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f60:	2300      	movs	r3, #0
 8005f62:	e000      	b.n	8005f66 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005f64:	2302      	movs	r3, #2
  }
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	00100002 	.word	0x00100002
 8005f74:	ffff0000 	.word	0xffff0000

08005f78 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08c      	sub	sp, #48	; 0x30
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	4608      	mov	r0, r1
 8005f82:	4611      	mov	r1, r2
 8005f84:	461a      	mov	r2, r3
 8005f86:	4603      	mov	r3, r0
 8005f88:	817b      	strh	r3, [r7, #10]
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	813b      	strh	r3, [r7, #8]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f92:	f7fe fcbf 	bl	8004914 <HAL_GetTick>
 8005f96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b20      	cmp	r3, #32
 8005fa2:	f040 8208 	bne.w	80063b6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa8:	9300      	str	r3, [sp, #0]
 8005faa:	2319      	movs	r3, #25
 8005fac:	2201      	movs	r2, #1
 8005fae:	497b      	ldr	r1, [pc, #492]	; (800619c <HAL_I2C_Mem_Read+0x224>)
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 fcb3 	bl	800691c <I2C_WaitOnFlagUntilTimeout>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005fbc:	2302      	movs	r3, #2
 8005fbe:	e1fb      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d101      	bne.n	8005fce <HAL_I2C_Mem_Read+0x56>
 8005fca:	2302      	movs	r3, #2
 8005fcc:	e1f4      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d007      	beq.n	8005ff4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006002:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2222      	movs	r2, #34	; 0x22
 8006008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2240      	movs	r2, #64	; 0x40
 8006010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006024:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	4a5b      	ldr	r2, [pc, #364]	; (80061a0 <HAL_I2C_Mem_Read+0x228>)
 8006034:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006036:	88f8      	ldrh	r0, [r7, #6]
 8006038:	893a      	ldrh	r2, [r7, #8]
 800603a:	8979      	ldrh	r1, [r7, #10]
 800603c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	4603      	mov	r3, r0
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 fb80 	bl	800674c <I2C_RequestMemoryRead>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e1b0      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800605a:	2b00      	cmp	r3, #0
 800605c:	d113      	bne.n	8006086 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800605e:	2300      	movs	r3, #0
 8006060:	623b      	str	r3, [r7, #32]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	623b      	str	r3, [r7, #32]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	623b      	str	r3, [r7, #32]
 8006072:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e184      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800608a:	2b01      	cmp	r3, #1
 800608c:	d11b      	bne.n	80060c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800609c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800609e:	2300      	movs	r3, #0
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	695b      	ldr	r3, [r3, #20]
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	699b      	ldr	r3, [r3, #24]
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	e164      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d11b      	bne.n	8006106 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060ee:	2300      	movs	r3, #0
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	61bb      	str	r3, [r7, #24]
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	e144      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	695b      	ldr	r3, [r3, #20]
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	699b      	ldr	r3, [r3, #24]
 8006118:	617b      	str	r3, [r7, #20]
 800611a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800611c:	e138      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006122:	2b03      	cmp	r3, #3
 8006124:	f200 80f1 	bhi.w	800630a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800612c:	2b01      	cmp	r3, #1
 800612e:	d123      	bne.n	8006178 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006132:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 fd49 	bl	8006bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e139      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	691a      	ldr	r2, [r3, #16]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	b2d2      	uxtb	r2, r2
 8006150:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006160:	3b01      	subs	r3, #1
 8006162:	b29a      	uxth	r2, r3
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800616c:	b29b      	uxth	r3, r3
 800616e:	3b01      	subs	r3, #1
 8006170:	b29a      	uxth	r2, r3
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006176:	e10b      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800617c:	2b02      	cmp	r3, #2
 800617e:	d14e      	bne.n	800621e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	2200      	movs	r2, #0
 8006188:	4906      	ldr	r1, [pc, #24]	; (80061a4 <HAL_I2C_Mem_Read+0x22c>)
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f000 fbc6 	bl	800691c <I2C_WaitOnFlagUntilTimeout>
 8006190:	4603      	mov	r3, r0
 8006192:	2b00      	cmp	r3, #0
 8006194:	d008      	beq.n	80061a8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e10e      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
 800619a:	bf00      	nop
 800619c:	00100002 	.word	0x00100002
 80061a0:	ffff0000 	.word	0xffff0000
 80061a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681a      	ldr	r2, [r3, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691a      	ldr	r2, [r3, #16]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061d4:	3b01      	subs	r3, #1
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	691a      	ldr	r2, [r3, #16]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	b2d2      	uxtb	r2, r2
 80061f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800621c:	e0b8      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800621e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006224:	2200      	movs	r2, #0
 8006226:	4966      	ldr	r1, [pc, #408]	; (80063c0 <HAL_I2C_Mem_Read+0x448>)
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f000 fb77 	bl	800691c <I2C_WaitOnFlagUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d001      	beq.n	8006238 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e0bf      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	691a      	ldr	r2, [r3, #16]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625a:	1c5a      	adds	r2, r3, #1
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006270:	b29b      	uxth	r3, r3
 8006272:	3b01      	subs	r3, #1
 8006274:	b29a      	uxth	r2, r3
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006280:	2200      	movs	r2, #0
 8006282:	494f      	ldr	r1, [pc, #316]	; (80063c0 <HAL_I2C_Mem_Read+0x448>)
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 fb49 	bl	800691c <I2C_WaitOnFlagUntilTimeout>
 800628a:	4603      	mov	r3, r0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d001      	beq.n	8006294 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e091      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80062a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	3b01      	subs	r3, #1
 80062d0:	b29a      	uxth	r2, r3
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	691a      	ldr	r2, [r3, #16]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	1c5a      	adds	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062f2:	3b01      	subs	r3, #1
 80062f4:	b29a      	uxth	r2, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062fe:	b29b      	uxth	r3, r3
 8006300:	3b01      	subs	r3, #1
 8006302:	b29a      	uxth	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006308:	e042      	b.n	8006390 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800630a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800630c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800630e:	68f8      	ldr	r0, [r7, #12]
 8006310:	f000 fc5c 	bl	8006bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e04c      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	1c5a      	adds	r2, r3, #1
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800633a:	3b01      	subs	r3, #1
 800633c:	b29a      	uxth	r2, r3
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006346:	b29b      	uxth	r3, r3
 8006348:	3b01      	subs	r3, #1
 800634a:	b29a      	uxth	r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	f003 0304 	and.w	r3, r3, #4
 800635a:	2b04      	cmp	r3, #4
 800635c:	d118      	bne.n	8006390 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800637a:	3b01      	subs	r3, #1
 800637c:	b29a      	uxth	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006386:	b29b      	uxth	r3, r3
 8006388:	3b01      	subs	r3, #1
 800638a:	b29a      	uxth	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006394:	2b00      	cmp	r3, #0
 8006396:	f47f aec2 	bne.w	800611e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e000      	b.n	80063b8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80063b6:	2302      	movs	r3, #2
  }
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3728      	adds	r7, #40	; 0x28
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	00010004 	.word	0x00010004

080063c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b08a      	sub	sp, #40	; 0x28
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	607a      	str	r2, [r7, #4]
 80063ce:	603b      	str	r3, [r7, #0]
 80063d0:	460b      	mov	r3, r1
 80063d2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80063d4:	f7fe fa9e 	bl	8004914 <HAL_GetTick>
 80063d8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80063da:	2301      	movs	r3, #1
 80063dc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	f040 8111 	bne.w	800660e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	9300      	str	r3, [sp, #0]
 80063f0:	2319      	movs	r3, #25
 80063f2:	2201      	movs	r2, #1
 80063f4:	4988      	ldr	r1, [pc, #544]	; (8006618 <HAL_I2C_IsDeviceReady+0x254>)
 80063f6:	68f8      	ldr	r0, [r7, #12]
 80063f8:	f000 fa90 	bl	800691c <I2C_WaitOnFlagUntilTimeout>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8006402:	2302      	movs	r3, #2
 8006404:	e104      	b.n	8006610 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800640c:	2b01      	cmp	r3, #1
 800640e:	d101      	bne.n	8006414 <HAL_I2C_IsDeviceReady+0x50>
 8006410:	2302      	movs	r3, #2
 8006412:	e0fd      	b.n	8006610 <HAL_I2C_IsDeviceReady+0x24c>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2201      	movs	r2, #1
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b01      	cmp	r3, #1
 8006428:	d007      	beq.n	800643a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f042 0201 	orr.w	r2, r2, #1
 8006438:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006448:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2224      	movs	r2, #36	; 0x24
 800644e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4a70      	ldr	r2, [pc, #448]	; (800661c <HAL_I2C_IsDeviceReady+0x258>)
 800645c:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800646c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2200      	movs	r2, #0
 8006476:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800647a:	68f8      	ldr	r0, [r7, #12]
 800647c:	f000 fa4e 	bl	800691c <I2C_WaitOnFlagUntilTimeout>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00d      	beq.n	80064a2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006494:	d103      	bne.n	800649e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f44f 7200 	mov.w	r2, #512	; 0x200
 800649c:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800649e:	2303      	movs	r3, #3
 80064a0:	e0b6      	b.n	8006610 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80064a2:	897b      	ldrh	r3, [r7, #10]
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80064b0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80064b2:	f7fe fa2f 	bl	8004914 <HAL_GetTick>
 80064b6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b02      	cmp	r3, #2
 80064c4:	bf0c      	ite	eq
 80064c6:	2301      	moveq	r3, #1
 80064c8:	2300      	movne	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	695b      	ldr	r3, [r3, #20]
 80064d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064dc:	bf0c      	ite	eq
 80064de:	2301      	moveq	r3, #1
 80064e0:	2300      	movne	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80064e6:	e025      	b.n	8006534 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064e8:	f7fe fa14 	bl	8004914 <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	69fb      	ldr	r3, [r7, #28]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d302      	bcc.n	80064fe <HAL_I2C_IsDeviceReady+0x13a>
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d103      	bne.n	8006506 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	22a0      	movs	r2, #160	; 0xa0
 8006502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	f003 0302 	and.w	r3, r3, #2
 8006510:	2b02      	cmp	r3, #2
 8006512:	bf0c      	ite	eq
 8006514:	2301      	moveq	r3, #1
 8006516:	2300      	movne	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800652a:	bf0c      	ite	eq
 800652c:	2301      	moveq	r3, #1
 800652e:	2300      	movne	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2ba0      	cmp	r3, #160	; 0xa0
 800653e:	d005      	beq.n	800654c <HAL_I2C_IsDeviceReady+0x188>
 8006540:	7dfb      	ldrb	r3, [r7, #23]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d102      	bne.n	800654c <HAL_I2C_IsDeviceReady+0x188>
 8006546:	7dbb      	ldrb	r3, [r7, #22]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0cd      	beq.n	80064e8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	2220      	movs	r2, #32
 8006550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f003 0302 	and.w	r3, r3, #2
 800655e:	2b02      	cmp	r3, #2
 8006560:	d129      	bne.n	80065b6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006570:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006572:	2300      	movs	r3, #0
 8006574:	613b      	str	r3, [r7, #16]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	9300      	str	r3, [sp, #0]
 800658c:	2319      	movs	r3, #25
 800658e:	2201      	movs	r2, #1
 8006590:	4921      	ldr	r1, [pc, #132]	; (8006618 <HAL_I2C_IsDeviceReady+0x254>)
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f9c2 	bl	800691c <I2C_WaitOnFlagUntilTimeout>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e036      	b.n	8006610 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	e02c      	b.n	8006610 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065c4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065ce:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	9300      	str	r3, [sp, #0]
 80065d4:	2319      	movs	r3, #25
 80065d6:	2201      	movs	r2, #1
 80065d8:	490f      	ldr	r1, [pc, #60]	; (8006618 <HAL_I2C_IsDeviceReady+0x254>)
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 f99e 	bl	800691c <I2C_WaitOnFlagUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e012      	b.n	8006610 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	3301      	adds	r3, #1
 80065ee:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	f4ff af32 	bcc.w	800645e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	2220      	movs	r2, #32
 80065fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e000      	b.n	8006610 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800660e:	2302      	movs	r3, #2
  }
}
 8006610:	4618      	mov	r0, r3
 8006612:	3720      	adds	r7, #32
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	00100002 	.word	0x00100002
 800661c:	ffff0000 	.word	0xffff0000

08006620 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af02      	add	r7, sp, #8
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	4608      	mov	r0, r1
 800662a:	4611      	mov	r1, r2
 800662c:	461a      	mov	r2, r3
 800662e:	4603      	mov	r3, r0
 8006630:	817b      	strh	r3, [r7, #10]
 8006632:	460b      	mov	r3, r1
 8006634:	813b      	strh	r3, [r7, #8]
 8006636:	4613      	mov	r3, r2
 8006638:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006648:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	2200      	movs	r2, #0
 8006652:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f000 f960 	bl	800691c <I2C_WaitOnFlagUntilTimeout>
 800665c:	4603      	mov	r3, r0
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00d      	beq.n	800667e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800666c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006670:	d103      	bne.n	800667a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006678:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e05f      	b.n	800673e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800667e:	897b      	ldrh	r3, [r7, #10]
 8006680:	b2db      	uxtb	r3, r3
 8006682:	461a      	mov	r2, r3
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800668c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	6a3a      	ldr	r2, [r7, #32]
 8006692:	492d      	ldr	r1, [pc, #180]	; (8006748 <I2C_RequestMemoryWrite+0x128>)
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 f998 	bl	80069ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	e04c      	b.n	800673e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066a4:	2300      	movs	r3, #0
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	617b      	str	r3, [r7, #20]
 80066b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066bc:	6a39      	ldr	r1, [r7, #32]
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f000 fa02 	bl	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00d      	beq.n	80066e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	2b04      	cmp	r3, #4
 80066d0:	d107      	bne.n	80066e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80066e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e02b      	b.n	800673e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066e6:	88fb      	ldrh	r3, [r7, #6]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d105      	bne.n	80066f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066ec:	893b      	ldrh	r3, [r7, #8]
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	611a      	str	r2, [r3, #16]
 80066f6:	e021      	b.n	800673c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066f8:	893b      	ldrh	r3, [r7, #8]
 80066fa:	0a1b      	lsrs	r3, r3, #8
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	b2da      	uxtb	r2, r3
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006708:	6a39      	ldr	r1, [r7, #32]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 f9dc 	bl	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00d      	beq.n	8006732 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	2b04      	cmp	r3, #4
 800671c:	d107      	bne.n	800672e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800672c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e005      	b.n	800673e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006732:	893b      	ldrh	r3, [r7, #8]
 8006734:	b2da      	uxtb	r2, r3
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	3718      	adds	r7, #24
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	00010002 	.word	0x00010002

0800674c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b088      	sub	sp, #32
 8006750:	af02      	add	r7, sp, #8
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	4608      	mov	r0, r1
 8006756:	4611      	mov	r1, r2
 8006758:	461a      	mov	r2, r3
 800675a:	4603      	mov	r3, r0
 800675c:	817b      	strh	r3, [r7, #10]
 800675e:	460b      	mov	r3, r1
 8006760:	813b      	strh	r3, [r7, #8]
 8006762:	4613      	mov	r3, r2
 8006764:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006774:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006784:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	2200      	movs	r2, #0
 800678e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006792:	68f8      	ldr	r0, [r7, #12]
 8006794:	f000 f8c2 	bl	800691c <I2C_WaitOnFlagUntilTimeout>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d00d      	beq.n	80067ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ac:	d103      	bne.n	80067b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067b6:	2303      	movs	r3, #3
 80067b8:	e0aa      	b.n	8006910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067ba:	897b      	ldrh	r3, [r7, #10]
 80067bc:	b2db      	uxtb	r3, r3
 80067be:	461a      	mov	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80067c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	6a3a      	ldr	r2, [r7, #32]
 80067ce:	4952      	ldr	r1, [pc, #328]	; (8006918 <I2C_RequestMemoryRead+0x1cc>)
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f8fa 	bl	80069ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d001      	beq.n	80067e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	e097      	b.n	8006910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e0:	2300      	movs	r3, #0
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	695b      	ldr	r3, [r3, #20]
 80067ea:	617b      	str	r3, [r7, #20]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	617b      	str	r3, [r7, #20]
 80067f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067f8:	6a39      	ldr	r1, [r7, #32]
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f000 f964 	bl	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00d      	beq.n	8006822 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680a:	2b04      	cmp	r3, #4
 800680c:	d107      	bne.n	800681e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800681c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e076      	b.n	8006910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006822:	88fb      	ldrh	r3, [r7, #6]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d105      	bne.n	8006834 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006828:	893b      	ldrh	r3, [r7, #8]
 800682a:	b2da      	uxtb	r2, r3
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	611a      	str	r2, [r3, #16]
 8006832:	e021      	b.n	8006878 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006834:	893b      	ldrh	r3, [r7, #8]
 8006836:	0a1b      	lsrs	r3, r3, #8
 8006838:	b29b      	uxth	r3, r3
 800683a:	b2da      	uxtb	r2, r3
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006844:	6a39      	ldr	r1, [r7, #32]
 8006846:	68f8      	ldr	r0, [r7, #12]
 8006848:	f000 f93e 	bl	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00d      	beq.n	800686e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	2b04      	cmp	r3, #4
 8006858:	d107      	bne.n	800686a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006868:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e050      	b.n	8006910 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800686e:	893b      	ldrh	r3, [r7, #8]
 8006870:	b2da      	uxtb	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006878:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800687a:	6a39      	ldr	r1, [r7, #32]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 f923 	bl	8006ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d00d      	beq.n	80068a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688c:	2b04      	cmp	r3, #4
 800688e:	d107      	bne.n	80068a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800689e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e035      	b.n	8006910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80068b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	9300      	str	r3, [sp, #0]
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80068c0:	68f8      	ldr	r0, [r7, #12]
 80068c2:	f000 f82b 	bl	800691c <I2C_WaitOnFlagUntilTimeout>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d00d      	beq.n	80068e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068da:	d103      	bne.n	80068e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e013      	b.n	8006910 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068e8:	897b      	ldrh	r3, [r7, #10]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	f043 0301 	orr.w	r3, r3, #1
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	6a3a      	ldr	r2, [r7, #32]
 80068fc:	4906      	ldr	r1, [pc, #24]	; (8006918 <I2C_RequestMemoryRead+0x1cc>)
 80068fe:	68f8      	ldr	r0, [r7, #12]
 8006900:	f000 f863 	bl	80069ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	e000      	b.n	8006910 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	00010002 	.word	0x00010002

0800691c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	4613      	mov	r3, r2
 800692a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800692c:	e025      	b.n	800697a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006934:	d021      	beq.n	800697a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006936:	f7fd ffed 	bl	8004914 <HAL_GetTick>
 800693a:	4602      	mov	r2, r0
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	1ad3      	subs	r3, r2, r3
 8006940:	683a      	ldr	r2, [r7, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d302      	bcc.n	800694c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d116      	bne.n	800697a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2200      	movs	r2, #0
 8006950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2220      	movs	r2, #32
 8006956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	f043 0220 	orr.w	r2, r3, #32
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e023      	b.n	80069c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	0c1b      	lsrs	r3, r3, #16
 800697e:	b2db      	uxtb	r3, r3
 8006980:	2b01      	cmp	r3, #1
 8006982:	d10d      	bne.n	80069a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	43da      	mvns	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4013      	ands	r3, r2
 8006990:	b29b      	uxth	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	bf0c      	ite	eq
 8006996:	2301      	moveq	r3, #1
 8006998:	2300      	movne	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	461a      	mov	r2, r3
 800699e:	e00c      	b.n	80069ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	699b      	ldr	r3, [r3, #24]
 80069a6:	43da      	mvns	r2, r3
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4013      	ands	r3, r2
 80069ac:	b29b      	uxth	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bf0c      	ite	eq
 80069b2:	2301      	moveq	r3, #1
 80069b4:	2300      	movne	r3, #0
 80069b6:	b2db      	uxtb	r3, r3
 80069b8:	461a      	mov	r2, r3
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d0b6      	beq.n	800692e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3710      	adds	r7, #16
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}

080069ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069ca:	b580      	push	{r7, lr}
 80069cc:	b084      	sub	sp, #16
 80069ce:	af00      	add	r7, sp, #0
 80069d0:	60f8      	str	r0, [r7, #12]
 80069d2:	60b9      	str	r1, [r7, #8]
 80069d4:	607a      	str	r2, [r7, #4]
 80069d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069d8:	e051      	b.n	8006a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e8:	d123      	bne.n	8006a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006a02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a1e:	f043 0204 	orr.w	r2, r3, #4
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e046      	b.n	8006ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a38:	d021      	beq.n	8006a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a3a:	f7fd ff6b 	bl	8004914 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d302      	bcc.n	8006a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d116      	bne.n	8006a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2220      	movs	r2, #32
 8006a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6a:	f043 0220 	orr.w	r2, r3, #32
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e020      	b.n	8006ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	0c1b      	lsrs	r3, r3, #16
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d10c      	bne.n	8006aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	695b      	ldr	r3, [r3, #20]
 8006a8e:	43da      	mvns	r2, r3
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	4013      	ands	r3, r2
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	bf14      	ite	ne
 8006a9a:	2301      	movne	r3, #1
 8006a9c:	2300      	moveq	r3, #0
 8006a9e:	b2db      	uxtb	r3, r3
 8006aa0:	e00b      	b.n	8006aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	43da      	mvns	r2, r3
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	4013      	ands	r3, r2
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	bf14      	ite	ne
 8006ab4:	2301      	movne	r3, #1
 8006ab6:	2300      	moveq	r3, #0
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d18d      	bne.n	80069da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006abe:	2300      	movs	r3, #0
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3710      	adds	r7, #16
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b084      	sub	sp, #16
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ad4:	e02d      	b.n	8006b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f8ce 	bl	8006c78 <I2C_IsAcknowledgeFailed>
 8006adc:	4603      	mov	r3, r0
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d001      	beq.n	8006ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e02d      	b.n	8006b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d021      	beq.n	8006b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006aee:	f7fd ff11 	bl	8004914 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d302      	bcc.n	8006b04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d116      	bne.n	8006b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2200      	movs	r2, #0
 8006b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	f043 0220 	orr.w	r2, r3, #32
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e007      	b.n	8006b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b3c:	2b80      	cmp	r3, #128	; 0x80
 8006b3e:	d1ca      	bne.n	8006ad6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3710      	adds	r7, #16
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b56:	e02d      	b.n	8006bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f88d 	bl	8006c78 <I2C_IsAcknowledgeFailed>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e02d      	b.n	8006bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6e:	d021      	beq.n	8006bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b70:	f7fd fed0 	bl	8004914 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d302      	bcc.n	8006b86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d116      	bne.n	8006bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	f043 0220 	orr.w	r2, r3, #32
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e007      	b.n	8006bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	f003 0304 	and.w	r3, r3, #4
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d1ca      	bne.n	8006b58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3710      	adds	r7, #16
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b084      	sub	sp, #16
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	60b9      	str	r1, [r7, #8]
 8006bd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bd8:	e042      	b.n	8006c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	f003 0310 	and.w	r3, r3, #16
 8006be4:	2b10      	cmp	r3, #16
 8006be6:	d119      	bne.n	8006c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f06f 0210 	mvn.w	r2, #16
 8006bf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2220      	movs	r2, #32
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e029      	b.n	8006c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c1c:	f7fd fe7a 	bl	8004914 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d302      	bcc.n	8006c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d116      	bne.n	8006c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2220      	movs	r2, #32
 8006c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4c:	f043 0220 	orr.w	r2, r3, #32
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e007      	b.n	8006c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6a:	2b40      	cmp	r3, #64	; 0x40
 8006c6c:	d1b5      	bne.n	8006bda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b083      	sub	sp, #12
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c8e:	d11b      	bne.n	8006cc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006c98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	f043 0204 	orr.w	r2, r3, #4
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e000      	b.n	8006cca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006cc8:	2300      	movs	r3, #0
}
 8006cca:	4618      	mov	r0, r3
 8006ccc:	370c      	adds	r7, #12
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd4:	4770      	bx	lr

08006cd6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cd6:	b480      	push	{r7}
 8006cd8:	b083      	sub	sp, #12
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
 8006cde:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b20      	cmp	r3, #32
 8006cea:	d129      	bne.n	8006d40 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2224      	movs	r2, #36	; 0x24
 8006cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681a      	ldr	r2, [r3, #0]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0201 	bic.w	r2, r2, #1
 8006d02:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f022 0210 	bic.w	r2, r2, #16
 8006d12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f042 0201 	orr.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	e000      	b.n	8006d42 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006d40:	2302      	movs	r3, #2
  }
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	2b20      	cmp	r3, #32
 8006d66:	d12a      	bne.n	8006dbe <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2224      	movs	r2, #36	; 0x24
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0201 	bic.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006d88:	89fb      	ldrh	r3, [r7, #14]
 8006d8a:	f023 030f 	bic.w	r3, r3, #15
 8006d8e:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	b29a      	uxth	r2, r3
 8006d94:	89fb      	ldrh	r3, [r7, #14]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	89fa      	ldrh	r2, [r7, #14]
 8006da0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f042 0201 	orr.w	r2, r2, #1
 8006db0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2220      	movs	r2, #32
 8006db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e000      	b.n	8006dc0 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006dbe:	2302      	movs	r3, #2
  }
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8006dd8:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <HAL_PWR_EnterSLEEPMode+0x34>)
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	4a08      	ldr	r2, [pc, #32]	; (8006e00 <HAL_PWR_EnterSLEEPMode+0x34>)
 8006dde:	f023 0304 	bic.w	r3, r3, #4
 8006de2:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8006de4:	78fb      	ldrb	r3, [r7, #3]
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d101      	bne.n	8006dee <HAL_PWR_EnterSLEEPMode+0x22>
  {   
    /* Request Wait For Interrupt */
    __WFI();
 8006dea:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8006dec:	e002      	b.n	8006df4 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8006dee:	bf40      	sev
    __WFE();
 8006df0:	bf20      	wfe
    __WFE();
 8006df2:	bf20      	wfe
}
 8006df4:	bf00      	nop
 8006df6:	370c      	adds	r7, #12
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	e000ed00 	.word	0xe000ed00

08006e04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e264      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d075      	beq.n	8006f0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e22:	4ba3      	ldr	r3, [pc, #652]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 030c 	and.w	r3, r3, #12
 8006e2a:	2b04      	cmp	r3, #4
 8006e2c:	d00c      	beq.n	8006e48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e2e:	4ba0      	ldr	r3, [pc, #640]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d112      	bne.n	8006e60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006e3a:	4b9d      	ldr	r3, [pc, #628]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e46:	d10b      	bne.n	8006e60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e48:	4b99      	ldr	r3, [pc, #612]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d05b      	beq.n	8006f0c <HAL_RCC_OscConfig+0x108>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d157      	bne.n	8006f0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e23f      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e68:	d106      	bne.n	8006e78 <HAL_RCC_OscConfig+0x74>
 8006e6a:	4b91      	ldr	r3, [pc, #580]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4a90      	ldr	r2, [pc, #576]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006e70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e01d      	b.n	8006eb4 <HAL_RCC_OscConfig+0xb0>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e80:	d10c      	bne.n	8006e9c <HAL_RCC_OscConfig+0x98>
 8006e82:	4b8b      	ldr	r3, [pc, #556]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	4a8a      	ldr	r2, [pc, #552]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006e88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006e8c:	6013      	str	r3, [r2, #0]
 8006e8e:	4b88      	ldr	r3, [pc, #544]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a87      	ldr	r2, [pc, #540]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006e94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e98:	6013      	str	r3, [r2, #0]
 8006e9a:	e00b      	b.n	8006eb4 <HAL_RCC_OscConfig+0xb0>
 8006e9c:	4b84      	ldr	r3, [pc, #528]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a83      	ldr	r2, [pc, #524]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	4b81      	ldr	r3, [pc, #516]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a80      	ldr	r2, [pc, #512]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006eae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d013      	beq.n	8006ee4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ebc:	f7fd fd2a 	bl	8004914 <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ec4:	f7fd fd26 	bl	8004914 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b64      	cmp	r3, #100	; 0x64
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e204      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ed6:	4b76      	ldr	r3, [pc, #472]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d0f0      	beq.n	8006ec4 <HAL_RCC_OscConfig+0xc0>
 8006ee2:	e014      	b.n	8006f0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee4:	f7fd fd16 	bl	8004914 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006eec:	f7fd fd12 	bl	8004914 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b64      	cmp	r3, #100	; 0x64
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e1f0      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006efe:	4b6c      	ldr	r3, [pc, #432]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f0      	bne.n	8006eec <HAL_RCC_OscConfig+0xe8>
 8006f0a:	e000      	b.n	8006f0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f003 0302 	and.w	r3, r3, #2
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d063      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f1a:	4b65      	ldr	r3, [pc, #404]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 030c 	and.w	r3, r3, #12
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00b      	beq.n	8006f3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f26:	4b62      	ldr	r3, [pc, #392]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006f2e:	2b08      	cmp	r3, #8
 8006f30:	d11c      	bne.n	8006f6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006f32:	4b5f      	ldr	r3, [pc, #380]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d116      	bne.n	8006f6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f3e:	4b5c      	ldr	r3, [pc, #368]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f003 0302 	and.w	r3, r3, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <HAL_RCC_OscConfig+0x152>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	68db      	ldr	r3, [r3, #12]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	d001      	beq.n	8006f56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
 8006f54:	e1c4      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006f56:	4b56      	ldr	r3, [pc, #344]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	691b      	ldr	r3, [r3, #16]
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	4952      	ldr	r1, [pc, #328]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006f6a:	e03a      	b.n	8006fe2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d020      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006f74:	4b4f      	ldr	r3, [pc, #316]	; (80070b4 <HAL_RCC_OscConfig+0x2b0>)
 8006f76:	2201      	movs	r2, #1
 8006f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7a:	f7fd fccb 	bl	8004914 <HAL_GetTick>
 8006f7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f80:	e008      	b.n	8006f94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006f82:	f7fd fcc7 	bl	8004914 <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	2b02      	cmp	r3, #2
 8006f8e:	d901      	bls.n	8006f94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006f90:	2303      	movs	r3, #3
 8006f92:	e1a5      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f94:	4b46      	ldr	r3, [pc, #280]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0302 	and.w	r3, r3, #2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d0f0      	beq.n	8006f82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fa0:	4b43      	ldr	r3, [pc, #268]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	00db      	lsls	r3, r3, #3
 8006fae:	4940      	ldr	r1, [pc, #256]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	600b      	str	r3, [r1, #0]
 8006fb4:	e015      	b.n	8006fe2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006fb6:	4b3f      	ldr	r3, [pc, #252]	; (80070b4 <HAL_RCC_OscConfig+0x2b0>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbc:	f7fd fcaa 	bl	8004914 <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006fc4:	f7fd fca6 	bl	8004914 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e184      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006fd6:	4b36      	ldr	r3, [pc, #216]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0302 	and.w	r3, r3, #2
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1f0      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0308 	and.w	r3, r3, #8
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d030      	beq.n	8007050 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	695b      	ldr	r3, [r3, #20]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d016      	beq.n	8007024 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ff6:	4b30      	ldr	r3, [pc, #192]	; (80070b8 <HAL_RCC_OscConfig+0x2b4>)
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ffc:	f7fd fc8a 	bl	8004914 <HAL_GetTick>
 8007000:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007002:	e008      	b.n	8007016 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007004:	f7fd fc86 	bl	8004914 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	2b02      	cmp	r3, #2
 8007010:	d901      	bls.n	8007016 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007012:	2303      	movs	r3, #3
 8007014:	e164      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007016:	4b26      	ldr	r3, [pc, #152]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8007018:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	d0f0      	beq.n	8007004 <HAL_RCC_OscConfig+0x200>
 8007022:	e015      	b.n	8007050 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007024:	4b24      	ldr	r3, [pc, #144]	; (80070b8 <HAL_RCC_OscConfig+0x2b4>)
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800702a:	f7fd fc73 	bl	8004914 <HAL_GetTick>
 800702e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007030:	e008      	b.n	8007044 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007032:	f7fd fc6f 	bl	8004914 <HAL_GetTick>
 8007036:	4602      	mov	r2, r0
 8007038:	693b      	ldr	r3, [r7, #16]
 800703a:	1ad3      	subs	r3, r2, r3
 800703c:	2b02      	cmp	r3, #2
 800703e:	d901      	bls.n	8007044 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e14d      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007044:	4b1a      	ldr	r3, [pc, #104]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8007046:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007048:	f003 0302 	and.w	r3, r3, #2
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1f0      	bne.n	8007032 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 0304 	and.w	r3, r3, #4
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 80a0 	beq.w	800719e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800705e:	2300      	movs	r3, #0
 8007060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007062:	4b13      	ldr	r3, [pc, #76]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10f      	bne.n	800708e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800706e:	2300      	movs	r3, #0
 8007070:	60bb      	str	r3, [r7, #8]
 8007072:	4b0f      	ldr	r3, [pc, #60]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	4a0e      	ldr	r2, [pc, #56]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8007078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800707c:	6413      	str	r3, [r2, #64]	; 0x40
 800707e:	4b0c      	ldr	r3, [pc, #48]	; (80070b0 <HAL_RCC_OscConfig+0x2ac>)
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007086:	60bb      	str	r3, [r7, #8]
 8007088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800708a:	2301      	movs	r3, #1
 800708c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800708e:	4b0b      	ldr	r3, [pc, #44]	; (80070bc <HAL_RCC_OscConfig+0x2b8>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007096:	2b00      	cmp	r3, #0
 8007098:	d121      	bne.n	80070de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800709a:	4b08      	ldr	r3, [pc, #32]	; (80070bc <HAL_RCC_OscConfig+0x2b8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a07      	ldr	r2, [pc, #28]	; (80070bc <HAL_RCC_OscConfig+0x2b8>)
 80070a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80070a6:	f7fd fc35 	bl	8004914 <HAL_GetTick>
 80070aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070ac:	e011      	b.n	80070d2 <HAL_RCC_OscConfig+0x2ce>
 80070ae:	bf00      	nop
 80070b0:	40023800 	.word	0x40023800
 80070b4:	42470000 	.word	0x42470000
 80070b8:	42470e80 	.word	0x42470e80
 80070bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80070c0:	f7fd fc28 	bl	8004914 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e106      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80070d2:	4b85      	ldr	r3, [pc, #532]	; (80072e8 <HAL_RCC_OscConfig+0x4e4>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d0f0      	beq.n	80070c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b01      	cmp	r3, #1
 80070e4:	d106      	bne.n	80070f4 <HAL_RCC_OscConfig+0x2f0>
 80070e6:	4b81      	ldr	r3, [pc, #516]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 80070e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ea:	4a80      	ldr	r2, [pc, #512]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 80070ec:	f043 0301 	orr.w	r3, r3, #1
 80070f0:	6713      	str	r3, [r2, #112]	; 0x70
 80070f2:	e01c      	b.n	800712e <HAL_RCC_OscConfig+0x32a>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	2b05      	cmp	r3, #5
 80070fa:	d10c      	bne.n	8007116 <HAL_RCC_OscConfig+0x312>
 80070fc:	4b7b      	ldr	r3, [pc, #492]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 80070fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007100:	4a7a      	ldr	r2, [pc, #488]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 8007102:	f043 0304 	orr.w	r3, r3, #4
 8007106:	6713      	str	r3, [r2, #112]	; 0x70
 8007108:	4b78      	ldr	r3, [pc, #480]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 800710a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800710c:	4a77      	ldr	r2, [pc, #476]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 800710e:	f043 0301 	orr.w	r3, r3, #1
 8007112:	6713      	str	r3, [r2, #112]	; 0x70
 8007114:	e00b      	b.n	800712e <HAL_RCC_OscConfig+0x32a>
 8007116:	4b75      	ldr	r3, [pc, #468]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 8007118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800711a:	4a74      	ldr	r2, [pc, #464]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 800711c:	f023 0301 	bic.w	r3, r3, #1
 8007120:	6713      	str	r3, [r2, #112]	; 0x70
 8007122:	4b72      	ldr	r3, [pc, #456]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 8007124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007126:	4a71      	ldr	r2, [pc, #452]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 8007128:	f023 0304 	bic.w	r3, r3, #4
 800712c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d015      	beq.n	8007162 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007136:	f7fd fbed 	bl	8004914 <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800713c:	e00a      	b.n	8007154 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800713e:	f7fd fbe9 	bl	8004914 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	f241 3288 	movw	r2, #5000	; 0x1388
 800714c:	4293      	cmp	r3, r2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e0c5      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007154:	4b65      	ldr	r3, [pc, #404]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 8007156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007158:	f003 0302 	and.w	r3, r3, #2
 800715c:	2b00      	cmp	r3, #0
 800715e:	d0ee      	beq.n	800713e <HAL_RCC_OscConfig+0x33a>
 8007160:	e014      	b.n	800718c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007162:	f7fd fbd7 	bl	8004914 <HAL_GetTick>
 8007166:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007168:	e00a      	b.n	8007180 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800716a:	f7fd fbd3 	bl	8004914 <HAL_GetTick>
 800716e:	4602      	mov	r2, r0
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	1ad3      	subs	r3, r2, r3
 8007174:	f241 3288 	movw	r2, #5000	; 0x1388
 8007178:	4293      	cmp	r3, r2
 800717a:	d901      	bls.n	8007180 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800717c:	2303      	movs	r3, #3
 800717e:	e0af      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007180:	4b5a      	ldr	r3, [pc, #360]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 8007182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1ee      	bne.n	800716a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d105      	bne.n	800719e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007192:	4b56      	ldr	r3, [pc, #344]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 8007194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007196:	4a55      	ldr	r2, [pc, #340]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 8007198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800719c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 809b 	beq.w	80072de <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80071a8:	4b50      	ldr	r3, [pc, #320]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 80071aa:	689b      	ldr	r3, [r3, #8]
 80071ac:	f003 030c 	and.w	r3, r3, #12
 80071b0:	2b08      	cmp	r3, #8
 80071b2:	d05c      	beq.n	800726e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d141      	bne.n	8007240 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80071bc:	4b4c      	ldr	r3, [pc, #304]	; (80072f0 <HAL_RCC_OscConfig+0x4ec>)
 80071be:	2200      	movs	r2, #0
 80071c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071c2:	f7fd fba7 	bl	8004914 <HAL_GetTick>
 80071c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071c8:	e008      	b.n	80071dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80071ca:	f7fd fba3 	bl	8004914 <HAL_GetTick>
 80071ce:	4602      	mov	r2, r0
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	1ad3      	subs	r3, r2, r3
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d901      	bls.n	80071dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80071d8:	2303      	movs	r3, #3
 80071da:	e081      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80071dc:	4b43      	ldr	r3, [pc, #268]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1f0      	bne.n	80071ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	69da      	ldr	r2, [r3, #28]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a1b      	ldr	r3, [r3, #32]
 80071f0:	431a      	orrs	r2, r3
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f6:	019b      	lsls	r3, r3, #6
 80071f8:	431a      	orrs	r2, r3
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	3b01      	subs	r3, #1
 8007202:	041b      	lsls	r3, r3, #16
 8007204:	431a      	orrs	r2, r3
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720a:	061b      	lsls	r3, r3, #24
 800720c:	4937      	ldr	r1, [pc, #220]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 800720e:	4313      	orrs	r3, r2
 8007210:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007212:	4b37      	ldr	r3, [pc, #220]	; (80072f0 <HAL_RCC_OscConfig+0x4ec>)
 8007214:	2201      	movs	r2, #1
 8007216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007218:	f7fd fb7c 	bl	8004914 <HAL_GetTick>
 800721c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800721e:	e008      	b.n	8007232 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007220:	f7fd fb78 	bl	8004914 <HAL_GetTick>
 8007224:	4602      	mov	r2, r0
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1ad3      	subs	r3, r2, r3
 800722a:	2b02      	cmp	r3, #2
 800722c:	d901      	bls.n	8007232 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e056      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007232:	4b2e      	ldr	r3, [pc, #184]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800723a:	2b00      	cmp	r3, #0
 800723c:	d0f0      	beq.n	8007220 <HAL_RCC_OscConfig+0x41c>
 800723e:	e04e      	b.n	80072de <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007240:	4b2b      	ldr	r3, [pc, #172]	; (80072f0 <HAL_RCC_OscConfig+0x4ec>)
 8007242:	2200      	movs	r2, #0
 8007244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007246:	f7fd fb65 	bl	8004914 <HAL_GetTick>
 800724a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800724c:	e008      	b.n	8007260 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800724e:	f7fd fb61 	bl	8004914 <HAL_GetTick>
 8007252:	4602      	mov	r2, r0
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	1ad3      	subs	r3, r2, r3
 8007258:	2b02      	cmp	r3, #2
 800725a:	d901      	bls.n	8007260 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800725c:	2303      	movs	r3, #3
 800725e:	e03f      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007260:	4b22      	ldr	r3, [pc, #136]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1f0      	bne.n	800724e <HAL_RCC_OscConfig+0x44a>
 800726c:	e037      	b.n	80072de <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d101      	bne.n	800727a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e032      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800727a:	4b1c      	ldr	r3, [pc, #112]	; (80072ec <HAL_RCC_OscConfig+0x4e8>)
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d028      	beq.n	80072da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007292:	429a      	cmp	r2, r3
 8007294:	d121      	bne.n	80072da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a0:	429a      	cmp	r2, r3
 80072a2:	d11a      	bne.n	80072da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80072aa:	4013      	ands	r3, r2
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072b0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d111      	bne.n	80072da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c0:	085b      	lsrs	r3, r3, #1
 80072c2:	3b01      	subs	r3, #1
 80072c4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d107      	bne.n	80072da <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80072d6:	429a      	cmp	r2, r3
 80072d8:	d001      	beq.n	80072de <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e000      	b.n	80072e0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40007000 	.word	0x40007000
 80072ec:	40023800 	.word	0x40023800
 80072f0:	42470060 	.word	0x42470060

080072f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e0cc      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007308:	4b68      	ldr	r3, [pc, #416]	; (80074ac <HAL_RCC_ClockConfig+0x1b8>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f003 030f 	and.w	r3, r3, #15
 8007310:	683a      	ldr	r2, [r7, #0]
 8007312:	429a      	cmp	r2, r3
 8007314:	d90c      	bls.n	8007330 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007316:	4b65      	ldr	r3, [pc, #404]	; (80074ac <HAL_RCC_ClockConfig+0x1b8>)
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800731e:	4b63      	ldr	r3, [pc, #396]	; (80074ac <HAL_RCC_ClockConfig+0x1b8>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 030f 	and.w	r3, r3, #15
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d001      	beq.n	8007330 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e0b8      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0302 	and.w	r3, r3, #2
 8007338:	2b00      	cmp	r3, #0
 800733a:	d020      	beq.n	800737e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0304 	and.w	r3, r3, #4
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007348:	4b59      	ldr	r3, [pc, #356]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	4a58      	ldr	r2, [pc, #352]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 800734e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007352:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007360:	4b53      	ldr	r3, [pc, #332]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	4a52      	ldr	r2, [pc, #328]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007366:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800736a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800736c:	4b50      	ldr	r3, [pc, #320]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	494d      	ldr	r1, [pc, #308]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 800737a:	4313      	orrs	r3, r2
 800737c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0301 	and.w	r3, r3, #1
 8007386:	2b00      	cmp	r3, #0
 8007388:	d044      	beq.n	8007414 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2b01      	cmp	r3, #1
 8007390:	d107      	bne.n	80073a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007392:	4b47      	ldr	r3, [pc, #284]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d119      	bne.n	80073d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e07f      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	685b      	ldr	r3, [r3, #4]
 80073a6:	2b02      	cmp	r3, #2
 80073a8:	d003      	beq.n	80073b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d107      	bne.n	80073c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073b2:	4b3f      	ldr	r3, [pc, #252]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d109      	bne.n	80073d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073be:	2301      	movs	r3, #1
 80073c0:	e06f      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80073c2:	4b3b      	ldr	r3, [pc, #236]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0302 	and.w	r3, r3, #2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e067      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80073d2:	4b37      	ldr	r3, [pc, #220]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f023 0203 	bic.w	r2, r3, #3
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	4934      	ldr	r1, [pc, #208]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 80073e0:	4313      	orrs	r3, r2
 80073e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80073e4:	f7fd fa96 	bl	8004914 <HAL_GetTick>
 80073e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80073ea:	e00a      	b.n	8007402 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80073ec:	f7fd fa92 	bl	8004914 <HAL_GetTick>
 80073f0:	4602      	mov	r2, r0
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	1ad3      	subs	r3, r2, r3
 80073f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d901      	bls.n	8007402 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e04f      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007402:	4b2b      	ldr	r3, [pc, #172]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 020c 	and.w	r2, r3, #12
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	429a      	cmp	r2, r3
 8007412:	d1eb      	bne.n	80073ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007414:	4b25      	ldr	r3, [pc, #148]	; (80074ac <HAL_RCC_ClockConfig+0x1b8>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f003 030f 	and.w	r3, r3, #15
 800741c:	683a      	ldr	r2, [r7, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d20c      	bcs.n	800743c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007422:	4b22      	ldr	r3, [pc, #136]	; (80074ac <HAL_RCC_ClockConfig+0x1b8>)
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	b2d2      	uxtb	r2, r2
 8007428:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800742a:	4b20      	ldr	r3, [pc, #128]	; (80074ac <HAL_RCC_ClockConfig+0x1b8>)
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 030f 	and.w	r3, r3, #15
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	429a      	cmp	r2, r3
 8007436:	d001      	beq.n	800743c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e032      	b.n	80074a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f003 0304 	and.w	r3, r3, #4
 8007444:	2b00      	cmp	r3, #0
 8007446:	d008      	beq.n	800745a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007448:	4b19      	ldr	r3, [pc, #100]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	4916      	ldr	r1, [pc, #88]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007456:	4313      	orrs	r3, r2
 8007458:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0308 	and.w	r3, r3, #8
 8007462:	2b00      	cmp	r3, #0
 8007464:	d009      	beq.n	800747a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007466:	4b12      	ldr	r3, [pc, #72]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	490e      	ldr	r1, [pc, #56]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007476:	4313      	orrs	r3, r2
 8007478:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800747a:	f000 f821 	bl	80074c0 <HAL_RCC_GetSysClockFreq>
 800747e:	4602      	mov	r2, r0
 8007480:	4b0b      	ldr	r3, [pc, #44]	; (80074b0 <HAL_RCC_ClockConfig+0x1bc>)
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	091b      	lsrs	r3, r3, #4
 8007486:	f003 030f 	and.w	r3, r3, #15
 800748a:	490a      	ldr	r1, [pc, #40]	; (80074b4 <HAL_RCC_ClockConfig+0x1c0>)
 800748c:	5ccb      	ldrb	r3, [r1, r3]
 800748e:	fa22 f303 	lsr.w	r3, r2, r3
 8007492:	4a09      	ldr	r2, [pc, #36]	; (80074b8 <HAL_RCC_ClockConfig+0x1c4>)
 8007494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007496:	4b09      	ldr	r3, [pc, #36]	; (80074bc <HAL_RCC_ClockConfig+0x1c8>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4618      	mov	r0, r3
 800749c:	f7fd f9f6 	bl	800488c <HAL_InitTick>

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	40023c00 	.word	0x40023c00
 80074b0:	40023800 	.word	0x40023800
 80074b4:	08011910 	.word	0x08011910
 80074b8:	20000020 	.word	0x20000020
 80074bc:	20000024 	.word	0x20000024

080074c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80074c8:	2300      	movs	r3, #0
 80074ca:	607b      	str	r3, [r7, #4]
 80074cc:	2300      	movs	r3, #0
 80074ce:	60fb      	str	r3, [r7, #12]
 80074d0:	2300      	movs	r3, #0
 80074d2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80074d8:	4b67      	ldr	r3, [pc, #412]	; (8007678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f003 030c 	and.w	r3, r3, #12
 80074e0:	2b08      	cmp	r3, #8
 80074e2:	d00d      	beq.n	8007500 <HAL_RCC_GetSysClockFreq+0x40>
 80074e4:	2b08      	cmp	r3, #8
 80074e6:	f200 80bd 	bhi.w	8007664 <HAL_RCC_GetSysClockFreq+0x1a4>
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <HAL_RCC_GetSysClockFreq+0x34>
 80074ee:	2b04      	cmp	r3, #4
 80074f0:	d003      	beq.n	80074fa <HAL_RCC_GetSysClockFreq+0x3a>
 80074f2:	e0b7      	b.n	8007664 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80074f4:	4b61      	ldr	r3, [pc, #388]	; (800767c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80074f6:	60bb      	str	r3, [r7, #8]
       break;
 80074f8:	e0b7      	b.n	800766a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80074fa:	4b61      	ldr	r3, [pc, #388]	; (8007680 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80074fc:	60bb      	str	r3, [r7, #8]
      break;
 80074fe:	e0b4      	b.n	800766a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007500:	4b5d      	ldr	r3, [pc, #372]	; (8007678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007508:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800750a:	4b5b      	ldr	r3, [pc, #364]	; (8007678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800750c:	685b      	ldr	r3, [r3, #4]
 800750e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007512:	2b00      	cmp	r3, #0
 8007514:	d04d      	beq.n	80075b2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007516:	4b58      	ldr	r3, [pc, #352]	; (8007678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	099b      	lsrs	r3, r3, #6
 800751c:	461a      	mov	r2, r3
 800751e:	f04f 0300 	mov.w	r3, #0
 8007522:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007526:	f04f 0100 	mov.w	r1, #0
 800752a:	ea02 0800 	and.w	r8, r2, r0
 800752e:	ea03 0901 	and.w	r9, r3, r1
 8007532:	4640      	mov	r0, r8
 8007534:	4649      	mov	r1, r9
 8007536:	f04f 0200 	mov.w	r2, #0
 800753a:	f04f 0300 	mov.w	r3, #0
 800753e:	014b      	lsls	r3, r1, #5
 8007540:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007544:	0142      	lsls	r2, r0, #5
 8007546:	4610      	mov	r0, r2
 8007548:	4619      	mov	r1, r3
 800754a:	ebb0 0008 	subs.w	r0, r0, r8
 800754e:	eb61 0109 	sbc.w	r1, r1, r9
 8007552:	f04f 0200 	mov.w	r2, #0
 8007556:	f04f 0300 	mov.w	r3, #0
 800755a:	018b      	lsls	r3, r1, #6
 800755c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007560:	0182      	lsls	r2, r0, #6
 8007562:	1a12      	subs	r2, r2, r0
 8007564:	eb63 0301 	sbc.w	r3, r3, r1
 8007568:	f04f 0000 	mov.w	r0, #0
 800756c:	f04f 0100 	mov.w	r1, #0
 8007570:	00d9      	lsls	r1, r3, #3
 8007572:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007576:	00d0      	lsls	r0, r2, #3
 8007578:	4602      	mov	r2, r0
 800757a:	460b      	mov	r3, r1
 800757c:	eb12 0208 	adds.w	r2, r2, r8
 8007580:	eb43 0309 	adc.w	r3, r3, r9
 8007584:	f04f 0000 	mov.w	r0, #0
 8007588:	f04f 0100 	mov.w	r1, #0
 800758c:	0259      	lsls	r1, r3, #9
 800758e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007592:	0250      	lsls	r0, r2, #9
 8007594:	4602      	mov	r2, r0
 8007596:	460b      	mov	r3, r1
 8007598:	4610      	mov	r0, r2
 800759a:	4619      	mov	r1, r3
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	461a      	mov	r2, r3
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	f7f9 fb80 	bl	8000ca8 <__aeabi_uldivmod>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4613      	mov	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
 80075b0:	e04a      	b.n	8007648 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075b2:	4b31      	ldr	r3, [pc, #196]	; (8007678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	099b      	lsrs	r3, r3, #6
 80075b8:	461a      	mov	r2, r3
 80075ba:	f04f 0300 	mov.w	r3, #0
 80075be:	f240 10ff 	movw	r0, #511	; 0x1ff
 80075c2:	f04f 0100 	mov.w	r1, #0
 80075c6:	ea02 0400 	and.w	r4, r2, r0
 80075ca:	ea03 0501 	and.w	r5, r3, r1
 80075ce:	4620      	mov	r0, r4
 80075d0:	4629      	mov	r1, r5
 80075d2:	f04f 0200 	mov.w	r2, #0
 80075d6:	f04f 0300 	mov.w	r3, #0
 80075da:	014b      	lsls	r3, r1, #5
 80075dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80075e0:	0142      	lsls	r2, r0, #5
 80075e2:	4610      	mov	r0, r2
 80075e4:	4619      	mov	r1, r3
 80075e6:	1b00      	subs	r0, r0, r4
 80075e8:	eb61 0105 	sbc.w	r1, r1, r5
 80075ec:	f04f 0200 	mov.w	r2, #0
 80075f0:	f04f 0300 	mov.w	r3, #0
 80075f4:	018b      	lsls	r3, r1, #6
 80075f6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80075fa:	0182      	lsls	r2, r0, #6
 80075fc:	1a12      	subs	r2, r2, r0
 80075fe:	eb63 0301 	sbc.w	r3, r3, r1
 8007602:	f04f 0000 	mov.w	r0, #0
 8007606:	f04f 0100 	mov.w	r1, #0
 800760a:	00d9      	lsls	r1, r3, #3
 800760c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007610:	00d0      	lsls	r0, r2, #3
 8007612:	4602      	mov	r2, r0
 8007614:	460b      	mov	r3, r1
 8007616:	1912      	adds	r2, r2, r4
 8007618:	eb45 0303 	adc.w	r3, r5, r3
 800761c:	f04f 0000 	mov.w	r0, #0
 8007620:	f04f 0100 	mov.w	r1, #0
 8007624:	0299      	lsls	r1, r3, #10
 8007626:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800762a:	0290      	lsls	r0, r2, #10
 800762c:	4602      	mov	r2, r0
 800762e:	460b      	mov	r3, r1
 8007630:	4610      	mov	r0, r2
 8007632:	4619      	mov	r1, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	461a      	mov	r2, r3
 8007638:	f04f 0300 	mov.w	r3, #0
 800763c:	f7f9 fb34 	bl	8000ca8 <__aeabi_uldivmod>
 8007640:	4602      	mov	r2, r0
 8007642:	460b      	mov	r3, r1
 8007644:	4613      	mov	r3, r2
 8007646:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007648:	4b0b      	ldr	r3, [pc, #44]	; (8007678 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	0c1b      	lsrs	r3, r3, #16
 800764e:	f003 0303 	and.w	r3, r3, #3
 8007652:	3301      	adds	r3, #1
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007660:	60bb      	str	r3, [r7, #8]
      break;
 8007662:	e002      	b.n	800766a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007664:	4b05      	ldr	r3, [pc, #20]	; (800767c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007666:	60bb      	str	r3, [r7, #8]
      break;
 8007668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800766a:	68bb      	ldr	r3, [r7, #8]
}
 800766c:	4618      	mov	r0, r3
 800766e:	3710      	adds	r7, #16
 8007670:	46bd      	mov	sp, r7
 8007672:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007676:	bf00      	nop
 8007678:	40023800 	.word	0x40023800
 800767c:	00f42400 	.word	0x00f42400
 8007680:	007a1200 	.word	0x007a1200

08007684 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007684:	b480      	push	{r7}
 8007686:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007688:	4b03      	ldr	r3, [pc, #12]	; (8007698 <HAL_RCC_GetHCLKFreq+0x14>)
 800768a:	681b      	ldr	r3, [r3, #0]
}
 800768c:	4618      	mov	r0, r3
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	20000020 	.word	0x20000020

0800769c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076a0:	f7ff fff0 	bl	8007684 <HAL_RCC_GetHCLKFreq>
 80076a4:	4602      	mov	r2, r0
 80076a6:	4b05      	ldr	r3, [pc, #20]	; (80076bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	0a9b      	lsrs	r3, r3, #10
 80076ac:	f003 0307 	and.w	r3, r3, #7
 80076b0:	4903      	ldr	r1, [pc, #12]	; (80076c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076b2:	5ccb      	ldrb	r3, [r1, r3]
 80076b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	40023800 	.word	0x40023800
 80076c0:	08011920 	.word	0x08011920

080076c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80076c8:	f7ff ffdc 	bl	8007684 <HAL_RCC_GetHCLKFreq>
 80076cc:	4602      	mov	r2, r0
 80076ce:	4b05      	ldr	r3, [pc, #20]	; (80076e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	0b5b      	lsrs	r3, r3, #13
 80076d4:	f003 0307 	and.w	r3, r3, #7
 80076d8:	4903      	ldr	r1, [pc, #12]	; (80076e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076da:	5ccb      	ldrb	r3, [r1, r3]
 80076dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	40023800 	.word	0x40023800
 80076e8:	08011920 	.word	0x08011920

080076ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e07b      	b.n	80077f6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2b00      	cmp	r3, #0
 8007704:	d108      	bne.n	8007718 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800770e:	d009      	beq.n	8007724 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	61da      	str	r2, [r3, #28]
 8007716:	e005      	b.n	8007724 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2200      	movs	r2, #0
 8007722:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b00      	cmp	r3, #0
 8007734:	d106      	bne.n	8007744 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fc fc70 	bl	8004024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2202      	movs	r2, #2
 8007748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800775a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800776c:	431a      	orrs	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007776:	431a      	orrs	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	691b      	ldr	r3, [r3, #16]
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	f003 0301 	and.w	r3, r3, #1
 800778a:	431a      	orrs	r2, r3
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007794:	431a      	orrs	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	69db      	ldr	r3, [r3, #28]
 800779a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a8:	ea42 0103 	orr.w	r1, r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	699b      	ldr	r3, [r3, #24]
 80077c0:	0c1b      	lsrs	r3, r3, #16
 80077c2:	f003 0104 	and.w	r1, r3, #4
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ca:	f003 0210 	and.w	r2, r3, #16
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69da      	ldr	r2, [r3, #28]
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077e4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2200      	movs	r2, #0
 80077ea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}

080077fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077fe:	b580      	push	{r7, lr}
 8007800:	b088      	sub	sp, #32
 8007802:	af00      	add	r7, sp, #0
 8007804:	60f8      	str	r0, [r7, #12]
 8007806:	60b9      	str	r1, [r7, #8]
 8007808:	603b      	str	r3, [r7, #0]
 800780a:	4613      	mov	r3, r2
 800780c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800780e:	2300      	movs	r3, #0
 8007810:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007818:	2b01      	cmp	r3, #1
 800781a:	d101      	bne.n	8007820 <HAL_SPI_Transmit+0x22>
 800781c:	2302      	movs	r3, #2
 800781e:	e126      	b.n	8007a6e <HAL_SPI_Transmit+0x270>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007828:	f7fd f874 	bl	8004914 <HAL_GetTick>
 800782c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800782e:	88fb      	ldrh	r3, [r7, #6]
 8007830:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b01      	cmp	r3, #1
 800783c:	d002      	beq.n	8007844 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800783e:	2302      	movs	r3, #2
 8007840:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007842:	e10b      	b.n	8007a5c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d002      	beq.n	8007850 <HAL_SPI_Transmit+0x52>
 800784a:	88fb      	ldrh	r3, [r7, #6]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d102      	bne.n	8007856 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007854:	e102      	b.n	8007a5c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2203      	movs	r2, #3
 800785a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2200      	movs	r2, #0
 8007862:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	88fa      	ldrh	r2, [r7, #6]
 800786e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	88fa      	ldrh	r2, [r7, #6]
 8007874:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2200      	movs	r2, #0
 8007886:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	689b      	ldr	r3, [r3, #8]
 8007898:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800789c:	d10f      	bne.n	80078be <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c8:	2b40      	cmp	r3, #64	; 0x40
 80078ca:	d007      	beq.n	80078dc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80078da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078e4:	d14b      	bne.n	800797e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d002      	beq.n	80078f4 <HAL_SPI_Transmit+0xf6>
 80078ee:	8afb      	ldrh	r3, [r7, #22]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d13e      	bne.n	8007972 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f8:	881a      	ldrh	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007904:	1c9a      	adds	r2, r3, #2
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800790e:	b29b      	uxth	r3, r3
 8007910:	3b01      	subs	r3, #1
 8007912:	b29a      	uxth	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007918:	e02b      	b.n	8007972 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	f003 0302 	and.w	r3, r3, #2
 8007924:	2b02      	cmp	r3, #2
 8007926:	d112      	bne.n	800794e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792c:	881a      	ldrh	r2, [r3, #0]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007938:	1c9a      	adds	r2, r3, #2
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	86da      	strh	r2, [r3, #54]	; 0x36
 800794c:	e011      	b.n	8007972 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800794e:	f7fc ffe1 	bl	8004914 <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	429a      	cmp	r2, r3
 800795c:	d803      	bhi.n	8007966 <HAL_SPI_Transmit+0x168>
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007964:	d102      	bne.n	800796c <HAL_SPI_Transmit+0x16e>
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d102      	bne.n	8007972 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007970:	e074      	b.n	8007a5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007976:	b29b      	uxth	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d1ce      	bne.n	800791a <HAL_SPI_Transmit+0x11c>
 800797c:	e04c      	b.n	8007a18 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d002      	beq.n	800798c <HAL_SPI_Transmit+0x18e>
 8007986:	8afb      	ldrh	r3, [r7, #22]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d140      	bne.n	8007a0e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	330c      	adds	r3, #12
 8007996:	7812      	ldrb	r2, [r2, #0]
 8007998:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	3b01      	subs	r3, #1
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80079b2:	e02c      	b.n	8007a0e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f003 0302 	and.w	r3, r3, #2
 80079be:	2b02      	cmp	r3, #2
 80079c0:	d113      	bne.n	80079ea <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	330c      	adds	r3, #12
 80079cc:	7812      	ldrb	r2, [r2, #0]
 80079ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80079de:	b29b      	uxth	r3, r3
 80079e0:	3b01      	subs	r3, #1
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	86da      	strh	r2, [r3, #54]	; 0x36
 80079e8:	e011      	b.n	8007a0e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079ea:	f7fc ff93 	bl	8004914 <HAL_GetTick>
 80079ee:	4602      	mov	r2, r0
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	1ad3      	subs	r3, r2, r3
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d803      	bhi.n	8007a02 <HAL_SPI_Transmit+0x204>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a00:	d102      	bne.n	8007a08 <HAL_SPI_Transmit+0x20a>
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d102      	bne.n	8007a0e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007a0c:	e026      	b.n	8007a5c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007a12:	b29b      	uxth	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1cd      	bne.n	80079b4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a18:	69ba      	ldr	r2, [r7, #24]
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f000 fce9 	bl	80083f4 <SPI_EndRxTxTransaction>
 8007a22:	4603      	mov	r3, r0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10a      	bne.n	8007a4c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a36:	2300      	movs	r3, #0
 8007a38:	613b      	str	r3, [r7, #16]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	613b      	str	r3, [r7, #16]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	689b      	ldr	r3, [r3, #8]
 8007a48:	613b      	str	r3, [r7, #16]
 8007a4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	77fb      	strb	r3, [r7, #31]
 8007a58:	e000      	b.n	8007a5c <HAL_SPI_Transmit+0x25e>
  }

error:
 8007a5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007a6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3720      	adds	r7, #32
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b088      	sub	sp, #32
 8007a7a:	af02      	add	r7, sp, #8
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	603b      	str	r3, [r7, #0]
 8007a82:	4613      	mov	r3, r2
 8007a84:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007a86:	2300      	movs	r3, #0
 8007a88:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a92:	d112      	bne.n	8007aba <HAL_SPI_Receive+0x44>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d10e      	bne.n	8007aba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2204      	movs	r2, #4
 8007aa0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007aa4:	88fa      	ldrh	r2, [r7, #6]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	9300      	str	r3, [sp, #0]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	68b9      	ldr	r1, [r7, #8]
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f8f1 	bl	8007c98 <HAL_SPI_TransmitReceive>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	e0ea      	b.n	8007c90 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d101      	bne.n	8007ac8 <HAL_SPI_Receive+0x52>
 8007ac4:	2302      	movs	r3, #2
 8007ac6:	e0e3      	b.n	8007c90 <HAL_SPI_Receive+0x21a>
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2201      	movs	r2, #1
 8007acc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007ad0:	f7fc ff20 	bl	8004914 <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d002      	beq.n	8007ae8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007ae2:	2302      	movs	r3, #2
 8007ae4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007ae6:	e0ca      	b.n	8007c7e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d002      	beq.n	8007af4 <HAL_SPI_Receive+0x7e>
 8007aee:	88fb      	ldrh	r3, [r7, #6]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d102      	bne.n	8007afa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007af8:	e0c1      	b.n	8007c7e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2204      	movs	r2, #4
 8007afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	88fa      	ldrh	r2, [r7, #6]
 8007b12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	88fa      	ldrh	r2, [r7, #6]
 8007b18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2200      	movs	r2, #0
 8007b24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b40:	d10f      	bne.n	8007b62 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007b60:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6c:	2b40      	cmp	r3, #64	; 0x40
 8007b6e:	d007      	beq.n	8007b80 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b7e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d162      	bne.n	8007c4e <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007b88:	e02e      	b.n	8007be8 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	f003 0301 	and.w	r3, r3, #1
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d115      	bne.n	8007bc4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f103 020c 	add.w	r2, r3, #12
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba4:	7812      	ldrb	r2, [r2, #0]
 8007ba6:	b2d2      	uxtb	r2, r2
 8007ba8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	1c5a      	adds	r2, r3, #1
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007bc2:	e011      	b.n	8007be8 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007bc4:	f7fc fea6 	bl	8004914 <HAL_GetTick>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	1ad3      	subs	r3, r2, r3
 8007bce:	683a      	ldr	r2, [r7, #0]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d803      	bhi.n	8007bdc <HAL_SPI_Receive+0x166>
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bda:	d102      	bne.n	8007be2 <HAL_SPI_Receive+0x16c>
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d102      	bne.n	8007be8 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007be6:	e04a      	b.n	8007c7e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1cb      	bne.n	8007b8a <HAL_SPI_Receive+0x114>
 8007bf2:	e031      	b.n	8007c58 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689b      	ldr	r3, [r3, #8]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d113      	bne.n	8007c2a <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68da      	ldr	r2, [r3, #12]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c0c:	b292      	uxth	r2, r2
 8007c0e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	1c9a      	adds	r2, r3, #2
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	3b01      	subs	r3, #1
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007c28:	e011      	b.n	8007c4e <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007c2a:	f7fc fe73 	bl	8004914 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d803      	bhi.n	8007c42 <HAL_SPI_Receive+0x1cc>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c40:	d102      	bne.n	8007c48 <HAL_SPI_Receive+0x1d2>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d102      	bne.n	8007c4e <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007c4c:	e017      	b.n	8007c7e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1cd      	bne.n	8007bf4 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	6839      	ldr	r1, [r7, #0]
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 fb63 	bl	8008328 <SPI_EndRxTransaction>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d002      	beq.n	8007c6e <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	2220      	movs	r2, #32
 8007c6c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d002      	beq.n	8007c7c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	75fb      	strb	r3, [r7, #23]
 8007c7a:	e000      	b.n	8007c7e <HAL_SPI_Receive+0x208>
  }

error :
 8007c7c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007c8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b08c      	sub	sp, #48	; 0x30
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	60f8      	str	r0, [r7, #12]
 8007ca0:	60b9      	str	r1, [r7, #8]
 8007ca2:	607a      	str	r2, [r7, #4]
 8007ca4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d101      	bne.n	8007cbe <HAL_SPI_TransmitReceive+0x26>
 8007cba:	2302      	movs	r3, #2
 8007cbc:	e18a      	b.n	8007fd4 <HAL_SPI_TransmitReceive+0x33c>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007cc6:	f7fc fe25 	bl	8004914 <HAL_GetTick>
 8007cca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007cdc:	887b      	ldrh	r3, [r7, #2]
 8007cde:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007ce0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ce4:	2b01      	cmp	r3, #1
 8007ce6:	d00f      	beq.n	8007d08 <HAL_SPI_TransmitReceive+0x70>
 8007ce8:	69fb      	ldr	r3, [r7, #28]
 8007cea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007cee:	d107      	bne.n	8007d00 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d103      	bne.n	8007d00 <HAL_SPI_TransmitReceive+0x68>
 8007cf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d003      	beq.n	8007d08 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007d00:	2302      	movs	r3, #2
 8007d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d06:	e15b      	b.n	8007fc0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <HAL_SPI_TransmitReceive+0x82>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <HAL_SPI_TransmitReceive+0x82>
 8007d14:	887b      	ldrh	r3, [r7, #2]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d103      	bne.n	8007d22 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007d20:	e14e      	b.n	8007fc0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007d28:	b2db      	uxtb	r3, r3
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d003      	beq.n	8007d36 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2205      	movs	r2, #5
 8007d32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	887a      	ldrh	r2, [r7, #2]
 8007d46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	887a      	ldrh	r2, [r7, #2]
 8007d4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	887a      	ldrh	r2, [r7, #2]
 8007d58:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	887a      	ldrh	r2, [r7, #2]
 8007d5e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2200      	movs	r2, #0
 8007d6a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d76:	2b40      	cmp	r3, #64	; 0x40
 8007d78:	d007      	beq.n	8007d8a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d88:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	68db      	ldr	r3, [r3, #12]
 8007d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d92:	d178      	bne.n	8007e86 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d002      	beq.n	8007da2 <HAL_SPI_TransmitReceive+0x10a>
 8007d9c:	8b7b      	ldrh	r3, [r7, #26]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d166      	bne.n	8007e70 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da6:	881a      	ldrh	r2, [r3, #0]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007db2:	1c9a      	adds	r2, r3, #2
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	3b01      	subs	r3, #1
 8007dc0:	b29a      	uxth	r2, r3
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007dc6:	e053      	b.n	8007e70 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689b      	ldr	r3, [r3, #8]
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d11b      	bne.n	8007e0e <HAL_SPI_TransmitReceive+0x176>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d016      	beq.n	8007e0e <HAL_SPI_TransmitReceive+0x176>
 8007de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d113      	bne.n	8007e0e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dea:	881a      	ldrh	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df6:	1c9a      	adds	r2, r3, #2
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	3b01      	subs	r3, #1
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	f003 0301 	and.w	r3, r3, #1
 8007e18:	2b01      	cmp	r3, #1
 8007e1a:	d119      	bne.n	8007e50 <HAL_SPI_TransmitReceive+0x1b8>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d014      	beq.n	8007e50 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68da      	ldr	r2, [r3, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e30:	b292      	uxth	r2, r2
 8007e32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	1c9a      	adds	r2, r3, #2
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e42:	b29b      	uxth	r3, r3
 8007e44:	3b01      	subs	r3, #1
 8007e46:	b29a      	uxth	r2, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007e50:	f7fc fd60 	bl	8004914 <HAL_GetTick>
 8007e54:	4602      	mov	r2, r0
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	1ad3      	subs	r3, r2, r3
 8007e5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	d807      	bhi.n	8007e70 <HAL_SPI_TransmitReceive+0x1d8>
 8007e60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e66:	d003      	beq.n	8007e70 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007e6e:	e0a7      	b.n	8007fc0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007e74:	b29b      	uxth	r3, r3
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1a6      	bne.n	8007dc8 <HAL_SPI_TransmitReceive+0x130>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d1a1      	bne.n	8007dc8 <HAL_SPI_TransmitReceive+0x130>
 8007e84:	e07c      	b.n	8007f80 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d002      	beq.n	8007e94 <HAL_SPI_TransmitReceive+0x1fc>
 8007e8e:	8b7b      	ldrh	r3, [r7, #26]
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d16b      	bne.n	8007f6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	330c      	adds	r3, #12
 8007e9e:	7812      	ldrb	r2, [r2, #0]
 8007ea0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea6:	1c5a      	adds	r2, r3, #1
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	3b01      	subs	r3, #1
 8007eb4:	b29a      	uxth	r2, r3
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007eba:	e057      	b.n	8007f6c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d11c      	bne.n	8007f04 <HAL_SPI_TransmitReceive+0x26c>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d017      	beq.n	8007f04 <HAL_SPI_TransmitReceive+0x26c>
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	2b01      	cmp	r3, #1
 8007ed8:	d114      	bne.n	8007f04 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	330c      	adds	r3, #12
 8007ee4:	7812      	ldrb	r2, [r2, #0]
 8007ee6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	3b01      	subs	r3, #1
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007f00:	2300      	movs	r3, #0
 8007f02:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	689b      	ldr	r3, [r3, #8]
 8007f0a:	f003 0301 	and.w	r3, r3, #1
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d119      	bne.n	8007f46 <HAL_SPI_TransmitReceive+0x2ae>
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d014      	beq.n	8007f46 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68da      	ldr	r2, [r3, #12]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f2e:	1c5a      	adds	r2, r3, #1
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007f42:	2301      	movs	r3, #1
 8007f44:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007f46:	f7fc fce5 	bl	8004914 <HAL_GetTick>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	1ad3      	subs	r3, r2, r3
 8007f50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f52:	429a      	cmp	r2, r3
 8007f54:	d803      	bhi.n	8007f5e <HAL_SPI_TransmitReceive+0x2c6>
 8007f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f5c:	d102      	bne.n	8007f64 <HAL_SPI_TransmitReceive+0x2cc>
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d103      	bne.n	8007f6c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007f64:	2303      	movs	r3, #3
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007f6a:	e029      	b.n	8007fc0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007f70:	b29b      	uxth	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1a2      	bne.n	8007ebc <HAL_SPI_TransmitReceive+0x224>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d19d      	bne.n	8007ebc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f84:	68f8      	ldr	r0, [r7, #12]
 8007f86:	f000 fa35 	bl	80083f4 <SPI_EndRxTxTransaction>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d006      	beq.n	8007f9e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007f9c:	e010      	b.n	8007fc0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10b      	bne.n	8007fbe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	617b      	str	r3, [r7, #20]
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	e000      	b.n	8007fc0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007fbe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007fd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3730      	adds	r7, #48	; 0x30
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b088      	sub	sp, #32
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	689b      	ldr	r3, [r3, #8]
 8007ff2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	099b      	lsrs	r3, r3, #6
 8007ff8:	f003 0301 	and.w	r3, r3, #1
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10f      	bne.n	8008020 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8008006:	2b00      	cmp	r3, #0
 8008008:	d00a      	beq.n	8008020 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800800a:	69fb      	ldr	r3, [r7, #28]
 800800c:	099b      	lsrs	r3, r3, #6
 800800e:	f003 0301 	and.w	r3, r3, #1
 8008012:	2b00      	cmp	r3, #0
 8008014:	d004      	beq.n	8008020 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	4798      	blx	r3
    return;
 800801e:	e0d7      	b.n	80081d0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	085b      	lsrs	r3, r3, #1
 8008024:	f003 0301 	and.w	r3, r3, #1
 8008028:	2b00      	cmp	r3, #0
 800802a:	d00a      	beq.n	8008042 <HAL_SPI_IRQHandler+0x66>
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	09db      	lsrs	r3, r3, #7
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	2b00      	cmp	r3, #0
 8008036:	d004      	beq.n	8008042 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
    return;
 8008040:	e0c6      	b.n	80081d0 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	095b      	lsrs	r3, r3, #5
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	d10c      	bne.n	8008068 <HAL_SPI_IRQHandler+0x8c>
 800804e:	69bb      	ldr	r3, [r7, #24]
 8008050:	099b      	lsrs	r3, r3, #6
 8008052:	f003 0301 	and.w	r3, r3, #1
 8008056:	2b00      	cmp	r3, #0
 8008058:	d106      	bne.n	8008068 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	0a1b      	lsrs	r3, r3, #8
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	2b00      	cmp	r3, #0
 8008064:	f000 80b4 	beq.w	80081d0 <HAL_SPI_IRQHandler+0x1f4>
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	095b      	lsrs	r3, r3, #5
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	2b00      	cmp	r3, #0
 8008072:	f000 80ad 	beq.w	80081d0 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8008076:	69bb      	ldr	r3, [r7, #24]
 8008078:	099b      	lsrs	r3, r3, #6
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b00      	cmp	r3, #0
 8008080:	d023      	beq.n	80080ca <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008088:	b2db      	uxtb	r3, r3
 800808a:	2b03      	cmp	r3, #3
 800808c:	d011      	beq.n	80080b2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008092:	f043 0204 	orr.w	r2, r3, #4
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68db      	ldr	r3, [r3, #12]
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	689b      	ldr	r3, [r3, #8]
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	e00b      	b.n	80080ca <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80080b2:	2300      	movs	r3, #0
 80080b4:	613b      	str	r3, [r7, #16]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	613b      	str	r3, [r7, #16]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	613b      	str	r3, [r7, #16]
 80080c6:	693b      	ldr	r3, [r7, #16]
        return;
 80080c8:	e082      	b.n	80081d0 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	095b      	lsrs	r3, r3, #5
 80080ce:	f003 0301 	and.w	r3, r3, #1
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d014      	beq.n	8008100 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080da:	f043 0201 	orr.w	r2, r3, #1
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80080e2:	2300      	movs	r3, #0
 80080e4:	60fb      	str	r3, [r7, #12]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	60fb      	str	r3, [r7, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080fc:	601a      	str	r2, [r3, #0]
 80080fe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	0a1b      	lsrs	r3, r3, #8
 8008104:	f003 0301 	and.w	r3, r3, #1
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00c      	beq.n	8008126 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008110:	f043 0208 	orr.w	r2, r3, #8
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8008118:	2300      	movs	r3, #0
 800811a:	60bb      	str	r3, [r7, #8]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	60bb      	str	r3, [r7, #8]
 8008124:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800812a:	2b00      	cmp	r3, #0
 800812c:	d04f      	beq.n	80081ce <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685a      	ldr	r2, [r3, #4]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800813c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2201      	movs	r2, #1
 8008142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	f003 0302 	and.w	r3, r3, #2
 800814c:	2b00      	cmp	r3, #0
 800814e:	d104      	bne.n	800815a <HAL_SPI_IRQHandler+0x17e>
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	f003 0301 	and.w	r3, r3, #1
 8008156:	2b00      	cmp	r3, #0
 8008158:	d034      	beq.n	80081c4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0203 	bic.w	r2, r2, #3
 8008168:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800816e:	2b00      	cmp	r3, #0
 8008170:	d011      	beq.n	8008196 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008176:	4a18      	ldr	r2, [pc, #96]	; (80081d8 <HAL_SPI_IRQHandler+0x1fc>)
 8008178:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817e:	4618      	mov	r0, r3
 8008180:	f7fd fa89 	bl	8005696 <HAL_DMA_Abort_IT>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d005      	beq.n	8008196 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800818e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800819a:	2b00      	cmp	r3, #0
 800819c:	d016      	beq.n	80081cc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081a2:	4a0d      	ldr	r2, [pc, #52]	; (80081d8 <HAL_SPI_IRQHandler+0x1fc>)
 80081a4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fd fa73 	bl	8005696 <HAL_DMA_Abort_IT>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80081ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80081c2:	e003      	b.n	80081cc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f809 	bl	80081dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80081ca:	e000      	b.n	80081ce <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80081cc:	bf00      	nop
    return;
 80081ce:	bf00      	nop
  }
}
 80081d0:	3720      	adds	r7, #32
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	080081f1 	.word	0x080081f1

080081dc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80081e4:	bf00      	nop
 80081e6:	370c      	adds	r7, #12
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr

080081f0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2200      	movs	r2, #0
 8008202:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800820a:	68f8      	ldr	r0, [r7, #12]
 800820c:	f7ff ffe6 	bl	80081dc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b088      	sub	sp, #32
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	603b      	str	r3, [r7, #0]
 8008224:	4613      	mov	r3, r2
 8008226:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008228:	f7fc fb74 	bl	8004914 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008230:	1a9b      	subs	r3, r3, r2
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	4413      	add	r3, r2
 8008236:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008238:	f7fc fb6c 	bl	8004914 <HAL_GetTick>
 800823c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800823e:	4b39      	ldr	r3, [pc, #228]	; (8008324 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	015b      	lsls	r3, r3, #5
 8008244:	0d1b      	lsrs	r3, r3, #20
 8008246:	69fa      	ldr	r2, [r7, #28]
 8008248:	fb02 f303 	mul.w	r3, r2, r3
 800824c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800824e:	e054      	b.n	80082fa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008256:	d050      	beq.n	80082fa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008258:	f7fc fb5c 	bl	8004914 <HAL_GetTick>
 800825c:	4602      	mov	r2, r0
 800825e:	69bb      	ldr	r3, [r7, #24]
 8008260:	1ad3      	subs	r3, r2, r3
 8008262:	69fa      	ldr	r2, [r7, #28]
 8008264:	429a      	cmp	r2, r3
 8008266:	d902      	bls.n	800826e <SPI_WaitFlagStateUntilTimeout+0x56>
 8008268:	69fb      	ldr	r3, [r7, #28]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d13d      	bne.n	80082ea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685a      	ldr	r2, [r3, #4]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800827c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008286:	d111      	bne.n	80082ac <SPI_WaitFlagStateUntilTimeout+0x94>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008290:	d004      	beq.n	800829c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	689b      	ldr	r3, [r3, #8]
 8008296:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800829a:	d107      	bne.n	80082ac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	681a      	ldr	r2, [r3, #0]
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082b4:	d10f      	bne.n	80082d6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e017      	b.n	800831a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d101      	bne.n	80082f4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	3b01      	subs	r3, #1
 80082f8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689a      	ldr	r2, [r3, #8]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	4013      	ands	r3, r2
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	429a      	cmp	r2, r3
 8008308:	bf0c      	ite	eq
 800830a:	2301      	moveq	r3, #1
 800830c:	2300      	movne	r3, #0
 800830e:	b2db      	uxtb	r3, r3
 8008310:	461a      	mov	r2, r3
 8008312:	79fb      	ldrb	r3, [r7, #7]
 8008314:	429a      	cmp	r2, r3
 8008316:	d19b      	bne.n	8008250 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008318:	2300      	movs	r3, #0
}
 800831a:	4618      	mov	r0, r3
 800831c:	3720      	adds	r7, #32
 800831e:	46bd      	mov	sp, r7
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	20000020 	.word	0x20000020

08008328 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af02      	add	r7, sp, #8
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800833c:	d111      	bne.n	8008362 <SPI_EndRxTransaction+0x3a>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008346:	d004      	beq.n	8008352 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008350:	d107      	bne.n	8008362 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008360:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800836a:	d12a      	bne.n	80083c2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008374:	d012      	beq.n	800839c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	2200      	movs	r2, #0
 800837e:	2180      	movs	r1, #128	; 0x80
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f7ff ff49 	bl	8008218 <SPI_WaitFlagStateUntilTimeout>
 8008386:	4603      	mov	r3, r0
 8008388:	2b00      	cmp	r3, #0
 800838a:	d02d      	beq.n	80083e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008390:	f043 0220 	orr.w	r2, r3, #32
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	e026      	b.n	80083ea <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2200      	movs	r2, #0
 80083a4:	2101      	movs	r1, #1
 80083a6:	68f8      	ldr	r0, [r7, #12]
 80083a8:	f7ff ff36 	bl	8008218 <SPI_WaitFlagStateUntilTimeout>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d01a      	beq.n	80083e8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b6:	f043 0220 	orr.w	r2, r3, #32
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e013      	b.n	80083ea <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2200      	movs	r2, #0
 80083ca:	2101      	movs	r1, #1
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f7ff ff23 	bl	8008218 <SPI_WaitFlagStateUntilTimeout>
 80083d2:	4603      	mov	r3, r0
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d007      	beq.n	80083e8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083dc:	f043 0220 	orr.w	r2, r3, #32
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80083e4:	2303      	movs	r3, #3
 80083e6:	e000      	b.n	80083ea <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80083e8:	2300      	movs	r3, #0
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}
	...

080083f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b088      	sub	sp, #32
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008400:	4b1b      	ldr	r3, [pc, #108]	; (8008470 <SPI_EndRxTxTransaction+0x7c>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a1b      	ldr	r2, [pc, #108]	; (8008474 <SPI_EndRxTxTransaction+0x80>)
 8008406:	fba2 2303 	umull	r2, r3, r2, r3
 800840a:	0d5b      	lsrs	r3, r3, #21
 800840c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008410:	fb02 f303 	mul.w	r3, r2, r3
 8008414:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800841e:	d112      	bne.n	8008446 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	9300      	str	r3, [sp, #0]
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2200      	movs	r2, #0
 8008428:	2180      	movs	r1, #128	; 0x80
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff fef4 	bl	8008218 <SPI_WaitFlagStateUntilTimeout>
 8008430:	4603      	mov	r3, r0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d016      	beq.n	8008464 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800843a:	f043 0220 	orr.w	r2, r3, #32
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e00f      	b.n	8008466 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008446:	697b      	ldr	r3, [r7, #20]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d00a      	beq.n	8008462 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	3b01      	subs	r3, #1
 8008450:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800845c:	2b80      	cmp	r3, #128	; 0x80
 800845e:	d0f2      	beq.n	8008446 <SPI_EndRxTxTransaction+0x52>
 8008460:	e000      	b.n	8008464 <SPI_EndRxTxTransaction+0x70>
        break;
 8008462:	bf00      	nop
  }

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20000020 	.word	0x20000020
 8008474:	165e9f81 	.word	0x165e9f81

08008478 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e034      	b.n	80084f8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d106      	bne.n	80084a8 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7fc f826 	bl	80044f4 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	3308      	adds	r3, #8
 80084b0:	4619      	mov	r1, r3
 80084b2:	4610      	mov	r0, r2
 80084b4:	f001 f87a 	bl	80095ac <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6818      	ldr	r0, [r3, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	461a      	mov	r2, r3
 80084c2:	68b9      	ldr	r1, [r7, #8]
 80084c4:	f001 f8d6 	bl	8009674 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	6858      	ldr	r0, [r3, #4]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	689a      	ldr	r2, [r3, #8]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d4:	6879      	ldr	r1, [r7, #4]
 80084d6:	f001 f921 	bl	800971c <FMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	6892      	ldr	r2, [r2, #8]
 80084e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	68fa      	ldr	r2, [r7, #12]
 80084ec:	6892      	ldr	r2, [r2, #8]
 80084ee:	f041 0101 	orr.w	r1, r1, #1
 80084f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e041      	b.n	8008596 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008518:	b2db      	uxtb	r3, r3
 800851a:	2b00      	cmp	r3, #0
 800851c:	d106      	bne.n	800852c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7fb fe40 	bl	80041ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2202      	movs	r2, #2
 8008530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	3304      	adds	r3, #4
 800853c:	4619      	mov	r1, r3
 800853e:	4610      	mov	r0, r2
 8008540:	f000 fb54 	bl	8008bec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d001      	beq.n	80085b8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
 80085b6:	e046      	b.n	8008646 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2202      	movs	r2, #2
 80085bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a23      	ldr	r2, [pc, #140]	; (8008654 <HAL_TIM_Base_Start+0xb4>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d022      	beq.n	8008610 <HAL_TIM_Base_Start+0x70>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085d2:	d01d      	beq.n	8008610 <HAL_TIM_Base_Start+0x70>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a1f      	ldr	r2, [pc, #124]	; (8008658 <HAL_TIM_Base_Start+0xb8>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d018      	beq.n	8008610 <HAL_TIM_Base_Start+0x70>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a1e      	ldr	r2, [pc, #120]	; (800865c <HAL_TIM_Base_Start+0xbc>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d013      	beq.n	8008610 <HAL_TIM_Base_Start+0x70>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a1c      	ldr	r2, [pc, #112]	; (8008660 <HAL_TIM_Base_Start+0xc0>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d00e      	beq.n	8008610 <HAL_TIM_Base_Start+0x70>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a1b      	ldr	r2, [pc, #108]	; (8008664 <HAL_TIM_Base_Start+0xc4>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d009      	beq.n	8008610 <HAL_TIM_Base_Start+0x70>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a19      	ldr	r2, [pc, #100]	; (8008668 <HAL_TIM_Base_Start+0xc8>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d004      	beq.n	8008610 <HAL_TIM_Base_Start+0x70>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a18      	ldr	r2, [pc, #96]	; (800866c <HAL_TIM_Base_Start+0xcc>)
 800860c:	4293      	cmp	r3, r2
 800860e:	d111      	bne.n	8008634 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	689b      	ldr	r3, [r3, #8]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2b06      	cmp	r3, #6
 8008620:	d010      	beq.n	8008644 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f042 0201 	orr.w	r2, r2, #1
 8008630:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008632:	e007      	b.n	8008644 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0201 	orr.w	r2, r2, #1
 8008642:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	40010000 	.word	0x40010000
 8008658:	40000400 	.word	0x40000400
 800865c:	40000800 	.word	0x40000800
 8008660:	40000c00 	.word	0x40000c00
 8008664:	40010400 	.word	0x40010400
 8008668:	40014000 	.word	0x40014000
 800866c:	40001800 	.word	0x40001800

08008670 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6a1a      	ldr	r2, [r3, #32]
 800867e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008682:	4013      	ands	r3, r2
 8008684:	2b00      	cmp	r3, #0
 8008686:	d10f      	bne.n	80086a8 <HAL_TIM_Base_Stop+0x38>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6a1a      	ldr	r2, [r3, #32]
 800868e:	f240 4344 	movw	r3, #1092	; 0x444
 8008692:	4013      	ands	r3, r2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d107      	bne.n	80086a8 <HAL_TIM_Base_Stop+0x38>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 0201 	bic.w	r2, r2, #1
 80086a6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2201      	movs	r2, #1
 80086ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	370c      	adds	r7, #12
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
	...

080086c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b01      	cmp	r3, #1
 80086d2:	d001      	beq.n	80086d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80086d4:	2301      	movs	r3, #1
 80086d6:	e04e      	b.n	8008776 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2202      	movs	r2, #2
 80086dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	68da      	ldr	r2, [r3, #12]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f042 0201 	orr.w	r2, r2, #1
 80086ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a23      	ldr	r2, [pc, #140]	; (8008784 <HAL_TIM_Base_Start_IT+0xc4>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d022      	beq.n	8008740 <HAL_TIM_Base_Start_IT+0x80>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008702:	d01d      	beq.n	8008740 <HAL_TIM_Base_Start_IT+0x80>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a1f      	ldr	r2, [pc, #124]	; (8008788 <HAL_TIM_Base_Start_IT+0xc8>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d018      	beq.n	8008740 <HAL_TIM_Base_Start_IT+0x80>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a1e      	ldr	r2, [pc, #120]	; (800878c <HAL_TIM_Base_Start_IT+0xcc>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d013      	beq.n	8008740 <HAL_TIM_Base_Start_IT+0x80>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a1c      	ldr	r2, [pc, #112]	; (8008790 <HAL_TIM_Base_Start_IT+0xd0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d00e      	beq.n	8008740 <HAL_TIM_Base_Start_IT+0x80>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a1b      	ldr	r2, [pc, #108]	; (8008794 <HAL_TIM_Base_Start_IT+0xd4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d009      	beq.n	8008740 <HAL_TIM_Base_Start_IT+0x80>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a19      	ldr	r2, [pc, #100]	; (8008798 <HAL_TIM_Base_Start_IT+0xd8>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d004      	beq.n	8008740 <HAL_TIM_Base_Start_IT+0x80>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	4a18      	ldr	r2, [pc, #96]	; (800879c <HAL_TIM_Base_Start_IT+0xdc>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d111      	bne.n	8008764 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2b06      	cmp	r3, #6
 8008750:	d010      	beq.n	8008774 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f042 0201 	orr.w	r2, r2, #1
 8008760:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008762:	e007      	b.n	8008774 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f042 0201 	orr.w	r2, r2, #1
 8008772:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008774:	2300      	movs	r3, #0
}
 8008776:	4618      	mov	r0, r3
 8008778:	3714      	adds	r7, #20
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr
 8008782:	bf00      	nop
 8008784:	40010000 	.word	0x40010000
 8008788:	40000400 	.word	0x40000400
 800878c:	40000800 	.word	0x40000800
 8008790:	40000c00 	.word	0x40000c00
 8008794:	40010400 	.word	0x40010400
 8008798:	40014000 	.word	0x40014000
 800879c:	40001800 	.word	0x40001800

080087a0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f022 0201 	bic.w	r2, r2, #1
 80087b6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	6a1a      	ldr	r2, [r3, #32]
 80087be:	f241 1311 	movw	r3, #4369	; 0x1111
 80087c2:	4013      	ands	r3, r2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10f      	bne.n	80087e8 <HAL_TIM_Base_Stop_IT+0x48>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6a1a      	ldr	r2, [r3, #32]
 80087ce:	f240 4344 	movw	r3, #1092	; 0x444
 80087d2:	4013      	ands	r3, r2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d107      	bne.n	80087e8 <HAL_TIM_Base_Stop_IT+0x48>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 0201 	bic.w	r2, r2, #1
 80087e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b082      	sub	sp, #8
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	691b      	ldr	r3, [r3, #16]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b02      	cmp	r3, #2
 8008812:	d122      	bne.n	800885a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	68db      	ldr	r3, [r3, #12]
 800881a:	f003 0302 	and.w	r3, r3, #2
 800881e:	2b02      	cmp	r3, #2
 8008820:	d11b      	bne.n	800885a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f06f 0202 	mvn.w	r2, #2
 800882a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	699b      	ldr	r3, [r3, #24]
 8008838:	f003 0303 	and.w	r3, r3, #3
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 f9b5 	bl	8008bb0 <HAL_TIM_IC_CaptureCallback>
 8008846:	e005      	b.n	8008854 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f9a7 	bl	8008b9c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f9b8 	bl	8008bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2200      	movs	r2, #0
 8008858:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b04      	cmp	r3, #4
 8008866:	d122      	bne.n	80088ae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f003 0304 	and.w	r3, r3, #4
 8008872:	2b04      	cmp	r3, #4
 8008874:	d11b      	bne.n	80088ae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f06f 0204 	mvn.w	r2, #4
 800887e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2202      	movs	r2, #2
 8008884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	699b      	ldr	r3, [r3, #24]
 800888c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008890:	2b00      	cmp	r3, #0
 8008892:	d003      	beq.n	800889c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f000 f98b 	bl	8008bb0 <HAL_TIM_IC_CaptureCallback>
 800889a:	e005      	b.n	80088a8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f000 f97d 	bl	8008b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 f98e 	bl	8008bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	f003 0308 	and.w	r3, r3, #8
 80088b8:	2b08      	cmp	r3, #8
 80088ba:	d122      	bne.n	8008902 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	2b08      	cmp	r3, #8
 80088c8:	d11b      	bne.n	8008902 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f06f 0208 	mvn.w	r2, #8
 80088d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2204      	movs	r2, #4
 80088d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	f003 0303 	and.w	r3, r3, #3
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d003      	beq.n	80088f0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f961 	bl	8008bb0 <HAL_TIM_IC_CaptureCallback>
 80088ee:	e005      	b.n	80088fc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 f953 	bl	8008b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 f964 	bl	8008bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2200      	movs	r2, #0
 8008900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f003 0310 	and.w	r3, r3, #16
 800890c:	2b10      	cmp	r3, #16
 800890e:	d122      	bne.n	8008956 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68db      	ldr	r3, [r3, #12]
 8008916:	f003 0310 	and.w	r3, r3, #16
 800891a:	2b10      	cmp	r3, #16
 800891c:	d11b      	bne.n	8008956 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f06f 0210 	mvn.w	r2, #16
 8008926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2208      	movs	r2, #8
 800892c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69db      	ldr	r3, [r3, #28]
 8008934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 f937 	bl	8008bb0 <HAL_TIM_IC_CaptureCallback>
 8008942:	e005      	b.n	8008950 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f929 	bl	8008b9c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f93a 	bl	8008bc4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2200      	movs	r2, #0
 8008954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	691b      	ldr	r3, [r3, #16]
 800895c:	f003 0301 	and.w	r3, r3, #1
 8008960:	2b01      	cmp	r3, #1
 8008962:	d10e      	bne.n	8008982 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b01      	cmp	r3, #1
 8008970:	d107      	bne.n	8008982 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f06f 0201 	mvn.w	r2, #1
 800897a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7fa f97d 	bl	8002c7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	691b      	ldr	r3, [r3, #16]
 8008988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898c:	2b80      	cmp	r3, #128	; 0x80
 800898e:	d10e      	bne.n	80089ae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68db      	ldr	r3, [r3, #12]
 8008996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800899a:	2b80      	cmp	r3, #128	; 0x80
 800899c:	d107      	bne.n	80089ae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 fadf 	bl	8008f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b8:	2b40      	cmp	r3, #64	; 0x40
 80089ba:	d10e      	bne.n	80089da <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089c6:	2b40      	cmp	r3, #64	; 0x40
 80089c8:	d107      	bne.n	80089da <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80089d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f8ff 	bl	8008bd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	f003 0320 	and.w	r3, r3, #32
 80089e4:	2b20      	cmp	r3, #32
 80089e6:	d10e      	bne.n	8008a06 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	f003 0320 	and.w	r3, r3, #32
 80089f2:	2b20      	cmp	r3, #32
 80089f4:	d107      	bne.n	8008a06 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f06f 0220 	mvn.w	r2, #32
 80089fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 faa9 	bl	8008f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a06:	bf00      	nop
 8008a08:	3708      	adds	r7, #8
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
 8008a16:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d101      	bne.n	8008a2a <HAL_TIM_ConfigClockSource+0x1c>
 8008a26:	2302      	movs	r3, #2
 8008a28:	e0b4      	b.n	8008b94 <HAL_TIM_ConfigClockSource+0x186>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2202      	movs	r2, #2
 8008a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a48:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a50:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68ba      	ldr	r2, [r7, #8]
 8008a58:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a62:	d03e      	beq.n	8008ae2 <HAL_TIM_ConfigClockSource+0xd4>
 8008a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a68:	f200 8087 	bhi.w	8008b7a <HAL_TIM_ConfigClockSource+0x16c>
 8008a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a70:	f000 8086 	beq.w	8008b80 <HAL_TIM_ConfigClockSource+0x172>
 8008a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a78:	d87f      	bhi.n	8008b7a <HAL_TIM_ConfigClockSource+0x16c>
 8008a7a:	2b70      	cmp	r3, #112	; 0x70
 8008a7c:	d01a      	beq.n	8008ab4 <HAL_TIM_ConfigClockSource+0xa6>
 8008a7e:	2b70      	cmp	r3, #112	; 0x70
 8008a80:	d87b      	bhi.n	8008b7a <HAL_TIM_ConfigClockSource+0x16c>
 8008a82:	2b60      	cmp	r3, #96	; 0x60
 8008a84:	d050      	beq.n	8008b28 <HAL_TIM_ConfigClockSource+0x11a>
 8008a86:	2b60      	cmp	r3, #96	; 0x60
 8008a88:	d877      	bhi.n	8008b7a <HAL_TIM_ConfigClockSource+0x16c>
 8008a8a:	2b50      	cmp	r3, #80	; 0x50
 8008a8c:	d03c      	beq.n	8008b08 <HAL_TIM_ConfigClockSource+0xfa>
 8008a8e:	2b50      	cmp	r3, #80	; 0x50
 8008a90:	d873      	bhi.n	8008b7a <HAL_TIM_ConfigClockSource+0x16c>
 8008a92:	2b40      	cmp	r3, #64	; 0x40
 8008a94:	d058      	beq.n	8008b48 <HAL_TIM_ConfigClockSource+0x13a>
 8008a96:	2b40      	cmp	r3, #64	; 0x40
 8008a98:	d86f      	bhi.n	8008b7a <HAL_TIM_ConfigClockSource+0x16c>
 8008a9a:	2b30      	cmp	r3, #48	; 0x30
 8008a9c:	d064      	beq.n	8008b68 <HAL_TIM_ConfigClockSource+0x15a>
 8008a9e:	2b30      	cmp	r3, #48	; 0x30
 8008aa0:	d86b      	bhi.n	8008b7a <HAL_TIM_ConfigClockSource+0x16c>
 8008aa2:	2b20      	cmp	r3, #32
 8008aa4:	d060      	beq.n	8008b68 <HAL_TIM_ConfigClockSource+0x15a>
 8008aa6:	2b20      	cmp	r3, #32
 8008aa8:	d867      	bhi.n	8008b7a <HAL_TIM_ConfigClockSource+0x16c>
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d05c      	beq.n	8008b68 <HAL_TIM_ConfigClockSource+0x15a>
 8008aae:	2b10      	cmp	r3, #16
 8008ab0:	d05a      	beq.n	8008b68 <HAL_TIM_ConfigClockSource+0x15a>
 8008ab2:	e062      	b.n	8008b7a <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6818      	ldr	r0, [r3, #0]
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	6899      	ldr	r1, [r3, #8]
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f000 f9ac 	bl	8008e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008ad6:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	68ba      	ldr	r2, [r7, #8]
 8008ade:	609a      	str	r2, [r3, #8]
      break;
 8008ae0:	e04f      	b.n	8008b82 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6818      	ldr	r0, [r3, #0]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	6899      	ldr	r1, [r3, #8]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f000 f995 	bl	8008e20 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689a      	ldr	r2, [r3, #8]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b04:	609a      	str	r2, [r3, #8]
      break;
 8008b06:	e03c      	b.n	8008b82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6818      	ldr	r0, [r3, #0]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	6859      	ldr	r1, [r3, #4]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	461a      	mov	r2, r3
 8008b16:	f000 f909 	bl	8008d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2150      	movs	r1, #80	; 0x50
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 f962 	bl	8008dea <TIM_ITRx_SetConfig>
      break;
 8008b26:	e02c      	b.n	8008b82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	6818      	ldr	r0, [r3, #0]
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	6859      	ldr	r1, [r3, #4]
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	461a      	mov	r2, r3
 8008b36:	f000 f928 	bl	8008d8a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2160      	movs	r1, #96	; 0x60
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 f952 	bl	8008dea <TIM_ITRx_SetConfig>
      break;
 8008b46:	e01c      	b.n	8008b82 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6818      	ldr	r0, [r3, #0]
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	6859      	ldr	r1, [r3, #4]
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	461a      	mov	r2, r3
 8008b56:	f000 f8e9 	bl	8008d2c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	2140      	movs	r1, #64	; 0x40
 8008b60:	4618      	mov	r0, r3
 8008b62:	f000 f942 	bl	8008dea <TIM_ITRx_SetConfig>
      break;
 8008b66:	e00c      	b.n	8008b82 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681a      	ldr	r2, [r3, #0]
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4619      	mov	r1, r3
 8008b72:	4610      	mov	r0, r2
 8008b74:	f000 f939 	bl	8008dea <TIM_ITRx_SetConfig>
      break;
 8008b78:	e003      	b.n	8008b82 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b7e:	e000      	b.n	8008b82 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b80:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2201      	movs	r2, #1
 8008b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
 8008bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	4a40      	ldr	r2, [pc, #256]	; (8008d00 <TIM_Base_SetConfig+0x114>)
 8008c00:	4293      	cmp	r3, r2
 8008c02:	d013      	beq.n	8008c2c <TIM_Base_SetConfig+0x40>
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c0a:	d00f      	beq.n	8008c2c <TIM_Base_SetConfig+0x40>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a3d      	ldr	r2, [pc, #244]	; (8008d04 <TIM_Base_SetConfig+0x118>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d00b      	beq.n	8008c2c <TIM_Base_SetConfig+0x40>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a3c      	ldr	r2, [pc, #240]	; (8008d08 <TIM_Base_SetConfig+0x11c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d007      	beq.n	8008c2c <TIM_Base_SetConfig+0x40>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a3b      	ldr	r2, [pc, #236]	; (8008d0c <TIM_Base_SetConfig+0x120>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d003      	beq.n	8008c2c <TIM_Base_SetConfig+0x40>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a3a      	ldr	r2, [pc, #232]	; (8008d10 <TIM_Base_SetConfig+0x124>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d108      	bne.n	8008c3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a2f      	ldr	r2, [pc, #188]	; (8008d00 <TIM_Base_SetConfig+0x114>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d02b      	beq.n	8008c9e <TIM_Base_SetConfig+0xb2>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c4c:	d027      	beq.n	8008c9e <TIM_Base_SetConfig+0xb2>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a2c      	ldr	r2, [pc, #176]	; (8008d04 <TIM_Base_SetConfig+0x118>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d023      	beq.n	8008c9e <TIM_Base_SetConfig+0xb2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a2b      	ldr	r2, [pc, #172]	; (8008d08 <TIM_Base_SetConfig+0x11c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d01f      	beq.n	8008c9e <TIM_Base_SetConfig+0xb2>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a2a      	ldr	r2, [pc, #168]	; (8008d0c <TIM_Base_SetConfig+0x120>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d01b      	beq.n	8008c9e <TIM_Base_SetConfig+0xb2>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a29      	ldr	r2, [pc, #164]	; (8008d10 <TIM_Base_SetConfig+0x124>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d017      	beq.n	8008c9e <TIM_Base_SetConfig+0xb2>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a28      	ldr	r2, [pc, #160]	; (8008d14 <TIM_Base_SetConfig+0x128>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d013      	beq.n	8008c9e <TIM_Base_SetConfig+0xb2>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a27      	ldr	r2, [pc, #156]	; (8008d18 <TIM_Base_SetConfig+0x12c>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d00f      	beq.n	8008c9e <TIM_Base_SetConfig+0xb2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a26      	ldr	r2, [pc, #152]	; (8008d1c <TIM_Base_SetConfig+0x130>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d00b      	beq.n	8008c9e <TIM_Base_SetConfig+0xb2>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a25      	ldr	r2, [pc, #148]	; (8008d20 <TIM_Base_SetConfig+0x134>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d007      	beq.n	8008c9e <TIM_Base_SetConfig+0xb2>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a24      	ldr	r2, [pc, #144]	; (8008d24 <TIM_Base_SetConfig+0x138>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d003      	beq.n	8008c9e <TIM_Base_SetConfig+0xb2>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a23      	ldr	r2, [pc, #140]	; (8008d28 <TIM_Base_SetConfig+0x13c>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d108      	bne.n	8008cb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ca4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	695b      	ldr	r3, [r3, #20]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	689a      	ldr	r2, [r3, #8]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681a      	ldr	r2, [r3, #0]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a0a      	ldr	r2, [pc, #40]	; (8008d00 <TIM_Base_SetConfig+0x114>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d003      	beq.n	8008ce4 <TIM_Base_SetConfig+0xf8>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a0c      	ldr	r2, [pc, #48]	; (8008d10 <TIM_Base_SetConfig+0x124>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d103      	bne.n	8008cec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	691a      	ldr	r2, [r3, #16]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	615a      	str	r2, [r3, #20]
}
 8008cf2:	bf00      	nop
 8008cf4:	3714      	adds	r7, #20
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	40010000 	.word	0x40010000
 8008d04:	40000400 	.word	0x40000400
 8008d08:	40000800 	.word	0x40000800
 8008d0c:	40000c00 	.word	0x40000c00
 8008d10:	40010400 	.word	0x40010400
 8008d14:	40014000 	.word	0x40014000
 8008d18:	40014400 	.word	0x40014400
 8008d1c:	40014800 	.word	0x40014800
 8008d20:	40001800 	.word	0x40001800
 8008d24:	40001c00 	.word	0x40001c00
 8008d28:	40002000 	.word	0x40002000

08008d2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	6a1b      	ldr	r3, [r3, #32]
 8008d3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	f023 0201 	bic.w	r2, r3, #1
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	699b      	ldr	r3, [r3, #24]
 8008d4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	011b      	lsls	r3, r3, #4
 8008d5c:	693a      	ldr	r2, [r7, #16]
 8008d5e:	4313      	orrs	r3, r2
 8008d60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f023 030a 	bic.w	r3, r3, #10
 8008d68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	697a      	ldr	r2, [r7, #20]
 8008d7c:	621a      	str	r2, [r3, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b087      	sub	sp, #28
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6a1b      	ldr	r3, [r3, #32]
 8008d9a:	f023 0210 	bic.w	r2, r3, #16
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	699b      	ldr	r3, [r3, #24]
 8008da6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	6a1b      	ldr	r3, [r3, #32]
 8008dac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008db4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	031b      	lsls	r3, r3, #12
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008dc6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	011b      	lsls	r3, r3, #4
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	697a      	ldr	r2, [r7, #20]
 8008dd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	693a      	ldr	r2, [r7, #16]
 8008ddc:	621a      	str	r2, [r3, #32]
}
 8008dde:	bf00      	nop
 8008de0:	371c      	adds	r7, #28
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008dea:	b480      	push	{r7}
 8008dec:	b085      	sub	sp, #20
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e02:	683a      	ldr	r2, [r7, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	f043 0307 	orr.w	r3, r3, #7
 8008e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	609a      	str	r2, [r3, #8]
}
 8008e14:	bf00      	nop
 8008e16:	3714      	adds	r7, #20
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b087      	sub	sp, #28
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	607a      	str	r2, [r7, #4]
 8008e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	021a      	lsls	r2, r3, #8
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	431a      	orrs	r2, r3
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	4313      	orrs	r3, r2
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	609a      	str	r2, [r3, #8]
}
 8008e54:	bf00      	nop
 8008e56:	371c      	adds	r7, #28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr

08008e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b085      	sub	sp, #20
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
 8008e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e70:	2b01      	cmp	r3, #1
 8008e72:	d101      	bne.n	8008e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e74:	2302      	movs	r3, #2
 8008e76:	e05a      	b.n	8008f2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	685b      	ldr	r3, [r3, #4]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68fa      	ldr	r2, [r7, #12]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68fa      	ldr	r2, [r7, #12]
 8008eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	4a21      	ldr	r2, [pc, #132]	; (8008f3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d022      	beq.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ec4:	d01d      	beq.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a1d      	ldr	r2, [pc, #116]	; (8008f40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d018      	beq.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a1b      	ldr	r2, [pc, #108]	; (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d013      	beq.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a1a      	ldr	r2, [pc, #104]	; (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d00e      	beq.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	4a18      	ldr	r2, [pc, #96]	; (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d009      	beq.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a17      	ldr	r2, [pc, #92]	; (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d004      	beq.n	8008f02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4a15      	ldr	r2, [pc, #84]	; (8008f54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d10c      	bne.n	8008f1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68ba      	ldr	r2, [r7, #8]
 8008f1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3714      	adds	r7, #20
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	40010000 	.word	0x40010000
 8008f40:	40000400 	.word	0x40000400
 8008f44:	40000800 	.word	0x40000800
 8008f48:	40000c00 	.word	0x40000c00
 8008f4c:	40010400 	.word	0x40010400
 8008f50:	40014000 	.word	0x40014000
 8008f54:	40001800 	.word	0x40001800

08008f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b083      	sub	sp, #12
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008f74:	bf00      	nop
 8008f76:	370c      	adds	r7, #12
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f80:	b580      	push	{r7, lr}
 8008f82:	b082      	sub	sp, #8
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d101      	bne.n	8008f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f8e:	2301      	movs	r3, #1
 8008f90:	e03f      	b.n	8009012 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f98:	b2db      	uxtb	r3, r3
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d106      	bne.n	8008fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fb f9f0 	bl	800438c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2224      	movs	r2, #36	; 0x24
 8008fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f929 	bl	800921c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	691a      	ldr	r2, [r3, #16]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	695a      	ldr	r2, [r3, #20]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68da      	ldr	r2, [r3, #12]
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2220      	movs	r2, #32
 8009004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2220      	movs	r2, #32
 800900c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b08a      	sub	sp, #40	; 0x28
 800901e:	af02      	add	r7, sp, #8
 8009020:	60f8      	str	r0, [r7, #12]
 8009022:	60b9      	str	r1, [r7, #8]
 8009024:	603b      	str	r3, [r7, #0]
 8009026:	4613      	mov	r3, r2
 8009028:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800902a:	2300      	movs	r3, #0
 800902c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b20      	cmp	r3, #32
 8009038:	d17c      	bne.n	8009134 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d002      	beq.n	8009046 <HAL_UART_Transmit+0x2c>
 8009040:	88fb      	ldrh	r3, [r7, #6]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e075      	b.n	8009136 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009050:	2b01      	cmp	r3, #1
 8009052:	d101      	bne.n	8009058 <HAL_UART_Transmit+0x3e>
 8009054:	2302      	movs	r3, #2
 8009056:	e06e      	b.n	8009136 <HAL_UART_Transmit+0x11c>
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2200      	movs	r2, #0
 8009064:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	2221      	movs	r2, #33	; 0x21
 800906a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800906e:	f7fb fc51 	bl	8004914 <HAL_GetTick>
 8009072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	88fa      	ldrh	r2, [r7, #6]
 8009078:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	88fa      	ldrh	r2, [r7, #6]
 800907e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009088:	d108      	bne.n	800909c <HAL_UART_Transmit+0x82>
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d104      	bne.n	800909c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009092:	2300      	movs	r3, #0
 8009094:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	61bb      	str	r3, [r7, #24]
 800909a:	e003      	b.n	80090a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80090a0:	2300      	movs	r3, #0
 80090a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80090ac:	e02a      	b.n	8009104 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2200      	movs	r2, #0
 80090b6:	2180      	movs	r1, #128	; 0x80
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 f840 	bl	800913e <UART_WaitOnFlagUntilTimeout>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e036      	b.n	8009136 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d10b      	bne.n	80090e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	461a      	mov	r2, r3
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	3302      	adds	r3, #2
 80090e2:	61bb      	str	r3, [r7, #24]
 80090e4:	e007      	b.n	80090f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	781a      	ldrb	r2, [r3, #0]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	3301      	adds	r3, #1
 80090f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	3b01      	subs	r3, #1
 80090fe:	b29a      	uxth	r2, r3
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009108:	b29b      	uxth	r3, r3
 800910a:	2b00      	cmp	r3, #0
 800910c:	d1cf      	bne.n	80090ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	9300      	str	r3, [sp, #0]
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2200      	movs	r2, #0
 8009116:	2140      	movs	r1, #64	; 0x40
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 f810 	bl	800913e <UART_WaitOnFlagUntilTimeout>
 800911e:	4603      	mov	r3, r0
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009124:	2303      	movs	r3, #3
 8009126:	e006      	b.n	8009136 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2220      	movs	r2, #32
 800912c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009130:	2300      	movs	r3, #0
 8009132:	e000      	b.n	8009136 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009134:	2302      	movs	r3, #2
  }
}
 8009136:	4618      	mov	r0, r3
 8009138:	3720      	adds	r7, #32
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b090      	sub	sp, #64	; 0x40
 8009142:	af00      	add	r7, sp, #0
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	60b9      	str	r1, [r7, #8]
 8009148:	603b      	str	r3, [r7, #0]
 800914a:	4613      	mov	r3, r2
 800914c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800914e:	e050      	b.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009150:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009156:	d04c      	beq.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800915a:	2b00      	cmp	r3, #0
 800915c:	d007      	beq.n	800916e <UART_WaitOnFlagUntilTimeout+0x30>
 800915e:	f7fb fbd9 	bl	8004914 <HAL_GetTick>
 8009162:	4602      	mov	r2, r0
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800916a:	429a      	cmp	r2, r3
 800916c:	d241      	bcs.n	80091f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	330c      	adds	r3, #12
 8009174:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009180:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	330c      	adds	r3, #12
 800918c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800918e:	637a      	str	r2, [r7, #52]	; 0x34
 8009190:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009194:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009196:	e841 2300 	strex	r3, r2, [r1]
 800919a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800919c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1e5      	bne.n	800916e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3314      	adds	r3, #20
 80091a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	613b      	str	r3, [r7, #16]
   return(result);
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	f023 0301 	bic.w	r3, r3, #1
 80091b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3314      	adds	r3, #20
 80091c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091c2:	623a      	str	r2, [r7, #32]
 80091c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c6:	69f9      	ldr	r1, [r7, #28]
 80091c8:	6a3a      	ldr	r2, [r7, #32]
 80091ca:	e841 2300 	strex	r3, r2, [r1]
 80091ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80091d0:	69bb      	ldr	r3, [r7, #24]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1e5      	bne.n	80091a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2220      	movs	r2, #32
 80091da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2220      	movs	r2, #32
 80091e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e00f      	b.n	8009212 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	4013      	ands	r3, r2
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	429a      	cmp	r2, r3
 8009200:	bf0c      	ite	eq
 8009202:	2301      	moveq	r3, #1
 8009204:	2300      	movne	r3, #0
 8009206:	b2db      	uxtb	r3, r3
 8009208:	461a      	mov	r2, r3
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	429a      	cmp	r2, r3
 800920e:	d09f      	beq.n	8009150 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009210:	2300      	movs	r3, #0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3740      	adds	r7, #64	; 0x40
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800921c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009220:	b09f      	sub	sp, #124	; 0x7c
 8009222:	af00      	add	r7, sp, #0
 8009224:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	691b      	ldr	r3, [r3, #16]
 800922c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009232:	68d9      	ldr	r1, [r3, #12]
 8009234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009236:	681a      	ldr	r2, [r3, #0]
 8009238:	ea40 0301 	orr.w	r3, r0, r1
 800923c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800923e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009240:	689a      	ldr	r2, [r3, #8]
 8009242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	431a      	orrs	r2, r3
 8009248:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800924a:	695b      	ldr	r3, [r3, #20]
 800924c:	431a      	orrs	r2, r3
 800924e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009250:	69db      	ldr	r3, [r3, #28]
 8009252:	4313      	orrs	r3, r2
 8009254:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009256:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009260:	f021 010c 	bic.w	r1, r1, #12
 8009264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800926a:	430b      	orrs	r3, r1
 800926c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800926e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	695b      	ldr	r3, [r3, #20]
 8009274:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009278:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800927a:	6999      	ldr	r1, [r3, #24]
 800927c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	ea40 0301 	orr.w	r3, r0, r1
 8009284:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009286:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	4bc5      	ldr	r3, [pc, #788]	; (80095a0 <UART_SetConfig+0x384>)
 800928c:	429a      	cmp	r2, r3
 800928e:	d004      	beq.n	800929a <UART_SetConfig+0x7e>
 8009290:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	4bc3      	ldr	r3, [pc, #780]	; (80095a4 <UART_SetConfig+0x388>)
 8009296:	429a      	cmp	r2, r3
 8009298:	d103      	bne.n	80092a2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800929a:	f7fe fa13 	bl	80076c4 <HAL_RCC_GetPCLK2Freq>
 800929e:	6778      	str	r0, [r7, #116]	; 0x74
 80092a0:	e002      	b.n	80092a8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092a2:	f7fe f9fb 	bl	800769c <HAL_RCC_GetPCLK1Freq>
 80092a6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092aa:	69db      	ldr	r3, [r3, #28]
 80092ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092b0:	f040 80b6 	bne.w	8009420 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092b6:	461c      	mov	r4, r3
 80092b8:	f04f 0500 	mov.w	r5, #0
 80092bc:	4622      	mov	r2, r4
 80092be:	462b      	mov	r3, r5
 80092c0:	1891      	adds	r1, r2, r2
 80092c2:	6439      	str	r1, [r7, #64]	; 0x40
 80092c4:	415b      	adcs	r3, r3
 80092c6:	647b      	str	r3, [r7, #68]	; 0x44
 80092c8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092cc:	1912      	adds	r2, r2, r4
 80092ce:	eb45 0303 	adc.w	r3, r5, r3
 80092d2:	f04f 0000 	mov.w	r0, #0
 80092d6:	f04f 0100 	mov.w	r1, #0
 80092da:	00d9      	lsls	r1, r3, #3
 80092dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80092e0:	00d0      	lsls	r0, r2, #3
 80092e2:	4602      	mov	r2, r0
 80092e4:	460b      	mov	r3, r1
 80092e6:	1911      	adds	r1, r2, r4
 80092e8:	6639      	str	r1, [r7, #96]	; 0x60
 80092ea:	416b      	adcs	r3, r5
 80092ec:	667b      	str	r3, [r7, #100]	; 0x64
 80092ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	461a      	mov	r2, r3
 80092f4:	f04f 0300 	mov.w	r3, #0
 80092f8:	1891      	adds	r1, r2, r2
 80092fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80092fc:	415b      	adcs	r3, r3
 80092fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009300:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009304:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009308:	f7f7 fcce 	bl	8000ca8 <__aeabi_uldivmod>
 800930c:	4602      	mov	r2, r0
 800930e:	460b      	mov	r3, r1
 8009310:	4ba5      	ldr	r3, [pc, #660]	; (80095a8 <UART_SetConfig+0x38c>)
 8009312:	fba3 2302 	umull	r2, r3, r3, r2
 8009316:	095b      	lsrs	r3, r3, #5
 8009318:	011e      	lsls	r6, r3, #4
 800931a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800931c:	461c      	mov	r4, r3
 800931e:	f04f 0500 	mov.w	r5, #0
 8009322:	4622      	mov	r2, r4
 8009324:	462b      	mov	r3, r5
 8009326:	1891      	adds	r1, r2, r2
 8009328:	6339      	str	r1, [r7, #48]	; 0x30
 800932a:	415b      	adcs	r3, r3
 800932c:	637b      	str	r3, [r7, #52]	; 0x34
 800932e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009332:	1912      	adds	r2, r2, r4
 8009334:	eb45 0303 	adc.w	r3, r5, r3
 8009338:	f04f 0000 	mov.w	r0, #0
 800933c:	f04f 0100 	mov.w	r1, #0
 8009340:	00d9      	lsls	r1, r3, #3
 8009342:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009346:	00d0      	lsls	r0, r2, #3
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	1911      	adds	r1, r2, r4
 800934e:	65b9      	str	r1, [r7, #88]	; 0x58
 8009350:	416b      	adcs	r3, r5
 8009352:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	461a      	mov	r2, r3
 800935a:	f04f 0300 	mov.w	r3, #0
 800935e:	1891      	adds	r1, r2, r2
 8009360:	62b9      	str	r1, [r7, #40]	; 0x28
 8009362:	415b      	adcs	r3, r3
 8009364:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009366:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800936a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800936e:	f7f7 fc9b 	bl	8000ca8 <__aeabi_uldivmod>
 8009372:	4602      	mov	r2, r0
 8009374:	460b      	mov	r3, r1
 8009376:	4b8c      	ldr	r3, [pc, #560]	; (80095a8 <UART_SetConfig+0x38c>)
 8009378:	fba3 1302 	umull	r1, r3, r3, r2
 800937c:	095b      	lsrs	r3, r3, #5
 800937e:	2164      	movs	r1, #100	; 0x64
 8009380:	fb01 f303 	mul.w	r3, r1, r3
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	3332      	adds	r3, #50	; 0x32
 800938a:	4a87      	ldr	r2, [pc, #540]	; (80095a8 <UART_SetConfig+0x38c>)
 800938c:	fba2 2303 	umull	r2, r3, r2, r3
 8009390:	095b      	lsrs	r3, r3, #5
 8009392:	005b      	lsls	r3, r3, #1
 8009394:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009398:	441e      	add	r6, r3
 800939a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800939c:	4618      	mov	r0, r3
 800939e:	f04f 0100 	mov.w	r1, #0
 80093a2:	4602      	mov	r2, r0
 80093a4:	460b      	mov	r3, r1
 80093a6:	1894      	adds	r4, r2, r2
 80093a8:	623c      	str	r4, [r7, #32]
 80093aa:	415b      	adcs	r3, r3
 80093ac:	627b      	str	r3, [r7, #36]	; 0x24
 80093ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093b2:	1812      	adds	r2, r2, r0
 80093b4:	eb41 0303 	adc.w	r3, r1, r3
 80093b8:	f04f 0400 	mov.w	r4, #0
 80093bc:	f04f 0500 	mov.w	r5, #0
 80093c0:	00dd      	lsls	r5, r3, #3
 80093c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80093c6:	00d4      	lsls	r4, r2, #3
 80093c8:	4622      	mov	r2, r4
 80093ca:	462b      	mov	r3, r5
 80093cc:	1814      	adds	r4, r2, r0
 80093ce:	653c      	str	r4, [r7, #80]	; 0x50
 80093d0:	414b      	adcs	r3, r1
 80093d2:	657b      	str	r3, [r7, #84]	; 0x54
 80093d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	461a      	mov	r2, r3
 80093da:	f04f 0300 	mov.w	r3, #0
 80093de:	1891      	adds	r1, r2, r2
 80093e0:	61b9      	str	r1, [r7, #24]
 80093e2:	415b      	adcs	r3, r3
 80093e4:	61fb      	str	r3, [r7, #28]
 80093e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093ea:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80093ee:	f7f7 fc5b 	bl	8000ca8 <__aeabi_uldivmod>
 80093f2:	4602      	mov	r2, r0
 80093f4:	460b      	mov	r3, r1
 80093f6:	4b6c      	ldr	r3, [pc, #432]	; (80095a8 <UART_SetConfig+0x38c>)
 80093f8:	fba3 1302 	umull	r1, r3, r3, r2
 80093fc:	095b      	lsrs	r3, r3, #5
 80093fe:	2164      	movs	r1, #100	; 0x64
 8009400:	fb01 f303 	mul.w	r3, r1, r3
 8009404:	1ad3      	subs	r3, r2, r3
 8009406:	00db      	lsls	r3, r3, #3
 8009408:	3332      	adds	r3, #50	; 0x32
 800940a:	4a67      	ldr	r2, [pc, #412]	; (80095a8 <UART_SetConfig+0x38c>)
 800940c:	fba2 2303 	umull	r2, r3, r2, r3
 8009410:	095b      	lsrs	r3, r3, #5
 8009412:	f003 0207 	and.w	r2, r3, #7
 8009416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4432      	add	r2, r6
 800941c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800941e:	e0b9      	b.n	8009594 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009422:	461c      	mov	r4, r3
 8009424:	f04f 0500 	mov.w	r5, #0
 8009428:	4622      	mov	r2, r4
 800942a:	462b      	mov	r3, r5
 800942c:	1891      	adds	r1, r2, r2
 800942e:	6139      	str	r1, [r7, #16]
 8009430:	415b      	adcs	r3, r3
 8009432:	617b      	str	r3, [r7, #20]
 8009434:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009438:	1912      	adds	r2, r2, r4
 800943a:	eb45 0303 	adc.w	r3, r5, r3
 800943e:	f04f 0000 	mov.w	r0, #0
 8009442:	f04f 0100 	mov.w	r1, #0
 8009446:	00d9      	lsls	r1, r3, #3
 8009448:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800944c:	00d0      	lsls	r0, r2, #3
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	eb12 0804 	adds.w	r8, r2, r4
 8009456:	eb43 0905 	adc.w	r9, r3, r5
 800945a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	4618      	mov	r0, r3
 8009460:	f04f 0100 	mov.w	r1, #0
 8009464:	f04f 0200 	mov.w	r2, #0
 8009468:	f04f 0300 	mov.w	r3, #0
 800946c:	008b      	lsls	r3, r1, #2
 800946e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009472:	0082      	lsls	r2, r0, #2
 8009474:	4640      	mov	r0, r8
 8009476:	4649      	mov	r1, r9
 8009478:	f7f7 fc16 	bl	8000ca8 <__aeabi_uldivmod>
 800947c:	4602      	mov	r2, r0
 800947e:	460b      	mov	r3, r1
 8009480:	4b49      	ldr	r3, [pc, #292]	; (80095a8 <UART_SetConfig+0x38c>)
 8009482:	fba3 2302 	umull	r2, r3, r3, r2
 8009486:	095b      	lsrs	r3, r3, #5
 8009488:	011e      	lsls	r6, r3, #4
 800948a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800948c:	4618      	mov	r0, r3
 800948e:	f04f 0100 	mov.w	r1, #0
 8009492:	4602      	mov	r2, r0
 8009494:	460b      	mov	r3, r1
 8009496:	1894      	adds	r4, r2, r2
 8009498:	60bc      	str	r4, [r7, #8]
 800949a:	415b      	adcs	r3, r3
 800949c:	60fb      	str	r3, [r7, #12]
 800949e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094a2:	1812      	adds	r2, r2, r0
 80094a4:	eb41 0303 	adc.w	r3, r1, r3
 80094a8:	f04f 0400 	mov.w	r4, #0
 80094ac:	f04f 0500 	mov.w	r5, #0
 80094b0:	00dd      	lsls	r5, r3, #3
 80094b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80094b6:	00d4      	lsls	r4, r2, #3
 80094b8:	4622      	mov	r2, r4
 80094ba:	462b      	mov	r3, r5
 80094bc:	1814      	adds	r4, r2, r0
 80094be:	64bc      	str	r4, [r7, #72]	; 0x48
 80094c0:	414b      	adcs	r3, r1
 80094c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80094c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f04f 0100 	mov.w	r1, #0
 80094ce:	f04f 0200 	mov.w	r2, #0
 80094d2:	f04f 0300 	mov.w	r3, #0
 80094d6:	008b      	lsls	r3, r1, #2
 80094d8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80094dc:	0082      	lsls	r2, r0, #2
 80094de:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80094e2:	f7f7 fbe1 	bl	8000ca8 <__aeabi_uldivmod>
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4b2f      	ldr	r3, [pc, #188]	; (80095a8 <UART_SetConfig+0x38c>)
 80094ec:	fba3 1302 	umull	r1, r3, r3, r2
 80094f0:	095b      	lsrs	r3, r3, #5
 80094f2:	2164      	movs	r1, #100	; 0x64
 80094f4:	fb01 f303 	mul.w	r3, r1, r3
 80094f8:	1ad3      	subs	r3, r2, r3
 80094fa:	011b      	lsls	r3, r3, #4
 80094fc:	3332      	adds	r3, #50	; 0x32
 80094fe:	4a2a      	ldr	r2, [pc, #168]	; (80095a8 <UART_SetConfig+0x38c>)
 8009500:	fba2 2303 	umull	r2, r3, r2, r3
 8009504:	095b      	lsrs	r3, r3, #5
 8009506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800950a:	441e      	add	r6, r3
 800950c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800950e:	4618      	mov	r0, r3
 8009510:	f04f 0100 	mov.w	r1, #0
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	1894      	adds	r4, r2, r2
 800951a:	603c      	str	r4, [r7, #0]
 800951c:	415b      	adcs	r3, r3
 800951e:	607b      	str	r3, [r7, #4]
 8009520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009524:	1812      	adds	r2, r2, r0
 8009526:	eb41 0303 	adc.w	r3, r1, r3
 800952a:	f04f 0400 	mov.w	r4, #0
 800952e:	f04f 0500 	mov.w	r5, #0
 8009532:	00dd      	lsls	r5, r3, #3
 8009534:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009538:	00d4      	lsls	r4, r2, #3
 800953a:	4622      	mov	r2, r4
 800953c:	462b      	mov	r3, r5
 800953e:	eb12 0a00 	adds.w	sl, r2, r0
 8009542:	eb43 0b01 	adc.w	fp, r3, r1
 8009546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	4618      	mov	r0, r3
 800954c:	f04f 0100 	mov.w	r1, #0
 8009550:	f04f 0200 	mov.w	r2, #0
 8009554:	f04f 0300 	mov.w	r3, #0
 8009558:	008b      	lsls	r3, r1, #2
 800955a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800955e:	0082      	lsls	r2, r0, #2
 8009560:	4650      	mov	r0, sl
 8009562:	4659      	mov	r1, fp
 8009564:	f7f7 fba0 	bl	8000ca8 <__aeabi_uldivmod>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4b0e      	ldr	r3, [pc, #56]	; (80095a8 <UART_SetConfig+0x38c>)
 800956e:	fba3 1302 	umull	r1, r3, r3, r2
 8009572:	095b      	lsrs	r3, r3, #5
 8009574:	2164      	movs	r1, #100	; 0x64
 8009576:	fb01 f303 	mul.w	r3, r1, r3
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	011b      	lsls	r3, r3, #4
 800957e:	3332      	adds	r3, #50	; 0x32
 8009580:	4a09      	ldr	r2, [pc, #36]	; (80095a8 <UART_SetConfig+0x38c>)
 8009582:	fba2 2303 	umull	r2, r3, r2, r3
 8009586:	095b      	lsrs	r3, r3, #5
 8009588:	f003 020f 	and.w	r2, r3, #15
 800958c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4432      	add	r2, r6
 8009592:	609a      	str	r2, [r3, #8]
}
 8009594:	bf00      	nop
 8009596:	377c      	adds	r7, #124	; 0x7c
 8009598:	46bd      	mov	sp, r7
 800959a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800959e:	bf00      	nop
 80095a0:	40011000 	.word	0x40011000
 80095a4:	40011400 	.word	0x40011400
 80095a8:	51eb851f 	.word	0x51eb851f

080095ac <FMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_InitTypeDef* Init)
{ 
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80095b6:	2300      	movs	r3, #0
 80095b8:	60fb      	str	r3, [r7, #12]
#if defined (STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */

  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	681a      	ldr	r2, [r3, #0]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c4:	60fb      	str	r3, [r7, #12]

#if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE, CBURSTRW and CCLKEN bits */
  tmpr &= ((uint32_t)~(FMC_BCR1_MBKEN     | FMC_BCR1_MUXEN    | FMC_BCR1_MTYP     | \
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	4b29      	ldr	r3, [pc, #164]	; (8009670 <FMC_NORSRAM_Init+0xc4>)
 80095ca:	4013      	ands	r3, r2
 80095cc:	60fb      	str	r3, [r7, #12]
                       FMC_BCR1_WREN      | FMC_BCR1_WAITEN   | FMC_BCR1_EXTMOD   | \
                       FMC_BCR1_ASYNCWAIT | FMC_BCR1_CPSIZE   | FMC_BCR1_CBURSTRW | \
                       FMC_BCR1_CCLKEN));
  
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	685a      	ldr	r2, [r3, #4]
                    Init->MemoryType           |\
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80095d6:	431a      	orrs	r2, r3
                    Init->MemoryDataWidth      |\
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	68db      	ldr	r3, [r3, #12]
                    Init->MemoryType           |\
 80095dc:	431a      	orrs	r2, r3
                    Init->BurstAccessMode      |\
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	691b      	ldr	r3, [r3, #16]
                    Init->MemoryDataWidth      |\
 80095e2:	431a      	orrs	r2, r3
                    Init->WaitSignalPolarity   |\
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	695b      	ldr	r3, [r3, #20]
                    Init->BurstAccessMode      |\
 80095e8:	431a      	orrs	r2, r3
                    Init->WrapMode             |\
 80095ea:	683b      	ldr	r3, [r7, #0]
 80095ec:	699b      	ldr	r3, [r3, #24]
                    Init->WaitSignalPolarity   |\
 80095ee:	431a      	orrs	r2, r3
                    Init->WaitSignalActive     |\
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	69db      	ldr	r3, [r3, #28]
                    Init->WrapMode             |\
 80095f4:	431a      	orrs	r2, r3
                    Init->WriteOperation       |\
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	6a1b      	ldr	r3, [r3, #32]
                    Init->WaitSignalActive     |\
 80095fa:	431a      	orrs	r2, r3
                    Init->WaitSignal           |\
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                    Init->WriteOperation       |\
 8009600:	431a      	orrs	r2, r3
                    Init->ExtendedMode         |\
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                    Init->WaitSignal           |\
 8009606:	431a      	orrs	r2, r3
                    Init->AsynchronousWait     |\
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    Init->ExtendedMode         |\
 800960c:	431a      	orrs	r2, r3
                    Init->PageSize             |\
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                    Init->AsynchronousWait     |\
 8009612:	431a      	orrs	r2, r3
                    Init->WriteBurst           |\
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                    Init->PageSize             |\
 8009618:	431a      	orrs	r2, r3
                    Init->ContinuousClock);
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                    Init->WriteBurst           |\
 800961e:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]
                    Init->ContinuousClock      |\
                    Init->PageSize             |\
                    Init->WriteFifo);
#endif /*  defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) */
                    
  if(Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	2b08      	cmp	r3, #8
 800962c:	d103      	bne.n	8009636 <FMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009634:	60fb      	str	r3, [r7, #12]
  }
  
  Device->BTCR[Init->NSBank] = tmpr;
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68f9      	ldr	r1, [r7, #12]
 800963e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800964a:	d10a      	bne.n	8009662 <FMC_NORSRAM_Init+0xb6>
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d006      	beq.n	8009662 <FMC_NORSRAM_Init+0xb6>
  { 
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965c:	431a      	orrs	r2, r3
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	601a      	str	r2, [r3, #0]
  {
    Device->BTCR[FMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);              
  }
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  
  return HAL_OK;
 8009662:	2300      	movs	r3, #0
}
 8009664:	4618      	mov	r0, r3
 8009666:	3714      	adds	r7, #20
 8009668:	46bd      	mov	sp, r7
 800966a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966e:	4770      	bx	lr
 8009670:	ffe00080 	.word	0xffe00080

08009674 <FMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009674:	b480      	push	{r7}
 8009676:	b087      	sub	sp, #28
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009680:	2300      	movs	r3, #0
 8009682:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FMC_BTR1_ADDSET  | FMC_BTR1_ADDHLD | FMC_BTR1_DATAST | \
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009696:	617b      	str	r3, [r7, #20]
                       FMC_BTR1_BUSTURN | FMC_BTR1_CLKDIV | FMC_BTR1_DATLAT | \
                       FMC_BTR1_ACCMOD));
  
  /* Set FMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)           |\
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 80096a2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)             |\
 80096a4:	68bb      	ldr	r3, [r7, #8]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)           |\
 80096aa:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	68db      	ldr	r3, [r3, #12]
 80096b0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)             |\
 80096b2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	3b01      	subs	r3, #1
 80096ba:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)    |\
 80096bc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency) - 2U) << 24U)         |\
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	695b      	ldr	r3, [r3, #20]
 80096c2:	3b02      	subs	r3, #2
 80096c4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision) - 1U) << 20U)         |\
 80096c6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                   |\
 80096cc:	4313      	orrs	r3, r2
 80096ce:	697a      	ldr	r2, [r7, #20]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1U] = tmpr;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	1c5a      	adds	r2, r3, #1
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	6979      	ldr	r1, [r7, #20]
 80096dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80096e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ec:	d10e      	bne.n	800970c <FMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80096f6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << 20U);
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	691b      	ldr	r3, [r3, #16]
 80096fc:	3b01      	subs	r3, #1
 80096fe:	051b      	lsls	r3, r3, #20
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	4313      	orrs	r3, r2
 8009704:	617b      	str	r3, [r7, #20]
    Device->BTCR[FMC_NORSRAM_BANK1 + 1U] = tmpr;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	697a      	ldr	r2, [r7, #20]
 800970a:	605a      	str	r2, [r3, #4]
  }  
  
  return HAL_OK;   
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	371c      	adds	r7, #28
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr
	...

0800971c <FMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device, FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{  
 800971c:	b480      	push	{r7}
 800971e:	b087      	sub	sp, #28
 8009720:	af00      	add	r7, sp, #0
 8009722:	60f8      	str	r0, [r7, #12]
 8009724:	60b9      	str	r1, [r7, #8]
 8009726:	607a      	str	r2, [r7, #4]
 8009728:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800972a:	2300      	movs	r3, #0
 800972c:	617b      	str	r3, [r7, #20]
 
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));
  
  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009734:	d122      	bne.n	800977c <FMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));  
    
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800973e:	617b      	str	r3, [r7, #20]

    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FMC_BWTR1_ADDSET  | FMC_BWTR1_ADDHLD | FMC_BWTR1_DATAST | \
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	4b15      	ldr	r3, [pc, #84]	; (8009798 <FMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009744:	4013      	ands	r3, r2
 8009746:	617b      	str	r3, [r7, #20]
                         FMC_BWTR1_BUSTURN | FMC_BWTR1_ACCMOD));
    
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009752:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	689b      	ldr	r3, [r3, #8]
 8009758:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800975a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009762:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009768:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800976a:	697a      	ldr	r2, [r7, #20]
 800976c:	4313      	orrs	r3, r2
 800976e:	617b      	str	r3, [r7, #20]

    Device->BWTR[Bank] = tmpr;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	6979      	ldr	r1, [r7, #20]
 8009776:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800977a:	e005      	b.n	8009788 <FMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	371c      	adds	r7, #28
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	cff00000 	.word	0xcff00000

0800979c <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 80097a2:	2300      	movs	r3, #0
 80097a4:	9301      	str	r3, [sp, #4]
 80097a6:	2301      	movs	r3, #1
 80097a8:	9300      	str	r3, [sp, #0]
 80097aa:	2300      	movs	r3, #0
 80097ac:	2200      	movs	r2, #0
 80097ae:	2101      	movs	r1, #1
 80097b0:	2000      	movs	r0, #0
 80097b2:	f000 fdc9 	bl	800a348 <lcdBuildMemoryAccessControlConfig>
 80097b6:	4603      	mov	r3, r0
 80097b8:	461a      	mov	r2, r3
 80097ba:	4b8a      	ldr	r3, [pc, #552]	; (80099e4 <lcdInit+0x248>)
 80097bc:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 80097be:	2300      	movs	r3, #0
 80097c0:	9301      	str	r3, [sp, #4]
 80097c2:	2301      	movs	r3, #1
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	2300      	movs	r3, #0
 80097c8:	2201      	movs	r2, #1
 80097ca:	2100      	movs	r1, #0
 80097cc:	2000      	movs	r0, #0
 80097ce:	f000 fdbb 	bl	800a348 <lcdBuildMemoryAccessControlConfig>
 80097d2:	4603      	mov	r3, r0
 80097d4:	461a      	mov	r2, r3
 80097d6:	4b84      	ldr	r3, [pc, #528]	; (80099e8 <lcdInit+0x24c>)
 80097d8:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80097da:	2300      	movs	r3, #0
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	2301      	movs	r3, #1
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	2300      	movs	r3, #0
 80097e4:	2200      	movs	r2, #0
 80097e6:	2100      	movs	r1, #0
 80097e8:	2001      	movs	r0, #1
 80097ea:	f000 fdad 	bl	800a348 <lcdBuildMemoryAccessControlConfig>
 80097ee:	4603      	mov	r3, r0
 80097f0:	461a      	mov	r2, r3
 80097f2:	4b7e      	ldr	r3, [pc, #504]	; (80099ec <lcdInit+0x250>)
 80097f4:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80097f6:	2300      	movs	r3, #0
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	2301      	movs	r3, #1
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	2300      	movs	r3, #0
 8009800:	2201      	movs	r2, #1
 8009802:	2101      	movs	r1, #1
 8009804:	2001      	movs	r0, #1
 8009806:	f000 fd9f 	bl	800a348 <lcdBuildMemoryAccessControlConfig>
 800980a:	4603      	mov	r3, r0
 800980c:	461a      	mov	r2, r3
 800980e:	4b78      	ldr	r3, [pc, #480]	; (80099f0 <lcdInit+0x254>)
 8009810:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 8009812:	f000 fd6f 	bl	800a2f4 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 8009816:	2028      	movs	r0, #40	; 0x28
 8009818:	f000 fd76 	bl	800a308 <lcdWriteCommand>
//
//  lcdWriteCommand(0xEA);
//  lcdWriteData(0x00);
//  lcdWriteData(0x00);

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 800981c:	20c0      	movs	r0, #192	; 0xc0
 800981e:	f000 fd73 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x26);
 8009822:	2026      	movs	r0, #38	; 0x26
 8009824:	f000 fd80 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8009828:	20c1      	movs	r0, #193	; 0xc1
 800982a:	f000 fd6d 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x11);
 800982e:	2011      	movs	r0, #17
 8009830:	f000 fd7a 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8009834:	20c5      	movs	r0, #197	; 0xc5
 8009836:	f000 fd67 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x35);
 800983a:	2035      	movs	r0, #53	; 0x35
 800983c:	f000 fd74 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x3E);
 8009840:	203e      	movs	r0, #62	; 0x3e
 8009842:	f000 fd71 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8009846:	20c7      	movs	r0, #199	; 0xc7
 8009848:	f000 fd5e 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0xBE);
 800984c:	20be      	movs	r0, #190	; 0xbe
 800984e:	f000 fd6b 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 8009852:	2036      	movs	r0, #54	; 0x36
 8009854:	f000 fd58 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8009858:	4b62      	ldr	r3, [pc, #392]	; (80099e4 <lcdInit+0x248>)
 800985a:	781b      	ldrb	r3, [r3, #0]
 800985c:	b29b      	uxth	r3, r3
 800985e:	4618      	mov	r0, r3
 8009860:	f000 fd62 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 8009864:	203a      	movs	r0, #58	; 0x3a
 8009866:	f000 fd4f 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x55);
 800986a:	2055      	movs	r0, #85	; 0x55
 800986c:	f000 fd5c 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 8009870:	20b1      	movs	r0, #177	; 0xb1
 8009872:	f000 fd49 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x00);
 8009876:	2000      	movs	r0, #0
 8009878:	f000 fd56 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x1B);
 800987c:	201b      	movs	r0, #27
 800987e:	f000 fd53 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(0xF2);
 8009882:	20f2      	movs	r0, #242	; 0xf2
 8009884:	f000 fd40 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x08);
 8009888:	2008      	movs	r0, #8
 800988a:	f000 fd4d 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 800988e:	2026      	movs	r0, #38	; 0x26
 8009890:	f000 fd3a 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x01);
 8009894:	2001      	movs	r0, #1
 8009896:	f000 fd47 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 800989a:	20e0      	movs	r0, #224	; 0xe0
 800989c:	f000 fd34 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80098a0:	201f      	movs	r0, #31
 80098a2:	f000 fd41 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x1A);
 80098a6:	201a      	movs	r0, #26
 80098a8:	f000 fd3e 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x18);
 80098ac:	2018      	movs	r0, #24
 80098ae:	f000 fd3b 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x0A);
 80098b2:	200a      	movs	r0, #10
 80098b4:	f000 fd38 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x0F);
 80098b8:	200f      	movs	r0, #15
 80098ba:	f000 fd35 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x06);
 80098be:	2006      	movs	r0, #6
 80098c0:	f000 fd32 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x45);
 80098c4:	2045      	movs	r0, #69	; 0x45
 80098c6:	f000 fd2f 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x87);
 80098ca:	2087      	movs	r0, #135	; 0x87
 80098cc:	f000 fd2c 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x32);
 80098d0:	2032      	movs	r0, #50	; 0x32
 80098d2:	f000 fd29 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x0A);
 80098d6:	200a      	movs	r0, #10
 80098d8:	f000 fd26 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x07);
 80098dc:	2007      	movs	r0, #7
 80098de:	f000 fd23 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x02);
 80098e2:	2002      	movs	r0, #2
 80098e4:	f000 fd20 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x07);
 80098e8:	2007      	movs	r0, #7
 80098ea:	f000 fd1d 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x05);
 80098ee:	2005      	movs	r0, #5
 80098f0:	f000 fd1a 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x00);
 80098f4:	2000      	movs	r0, #0
 80098f6:	f000 fd17 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 80098fa:	20e1      	movs	r0, #225	; 0xe1
 80098fc:	f000 fd04 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x00);
 8009900:	2000      	movs	r0, #0
 8009902:	f000 fd11 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x25);
 8009906:	2025      	movs	r0, #37	; 0x25
 8009908:	f000 fd0e 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x27);
 800990c:	2027      	movs	r0, #39	; 0x27
 800990e:	f000 fd0b 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x05);
 8009912:	2005      	movs	r0, #5
 8009914:	f000 fd08 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x10);
 8009918:	2010      	movs	r0, #16
 800991a:	f000 fd05 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x09);
 800991e:	2009      	movs	r0, #9
 8009920:	f000 fd02 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x3A);
 8009924:	203a      	movs	r0, #58	; 0x3a
 8009926:	f000 fcff 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x78);
 800992a:	2078      	movs	r0, #120	; 0x78
 800992c:	f000 fcfc 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x4D);
 8009930:	204d      	movs	r0, #77	; 0x4d
 8009932:	f000 fcf9 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x05);
 8009936:	2005      	movs	r0, #5
 8009938:	f000 fcf6 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x18);
 800993c:	2018      	movs	r0, #24
 800993e:	f000 fcf3 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x0D);
 8009942:	200d      	movs	r0, #13
 8009944:	f000 fcf0 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x38);
 8009948:	2038      	movs	r0, #56	; 0x38
 800994a:	f000 fced 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x3A);
 800994e:	203a      	movs	r0, #58	; 0x3a
 8009950:	f000 fcea 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x1F);
 8009954:	201f      	movs	r0, #31
 8009956:	f000 fce7 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 800995a:	202a      	movs	r0, #42	; 0x2a
 800995c:	f000 fcd4 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x00);
 8009960:	2000      	movs	r0, #0
 8009962:	f000 fce1 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x00);
 8009966:	2000      	movs	r0, #0
 8009968:	f000 fcde 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x00);
 800996c:	2000      	movs	r0, #0
 800996e:	f000 fcdb 	bl	800a328 <lcdWriteData>
  lcdWriteData(0xEF);
 8009972:	20ef      	movs	r0, #239	; 0xef
 8009974:	f000 fcd8 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8009978:	202b      	movs	r0, #43	; 0x2b
 800997a:	f000 fcc5 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x00);
 800997e:	2000      	movs	r0, #0
 8009980:	f000 fcd2 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x00);
 8009984:	2000      	movs	r0, #0
 8009986:	f000 fccf 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x01);
 800998a:	2001      	movs	r0, #1
 800998c:	f000 fccc 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x3F);
 8009990:	203f      	movs	r0, #63	; 0x3f
 8009992:	f000 fcc9 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 8009996:	20b7      	movs	r0, #183	; 0xb7
 8009998:	f000 fcb6 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x07);
 800999c:	2007      	movs	r0, #7
 800999e:	f000 fcc3 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80099a2:	20b6      	movs	r0, #182	; 0xb6
 80099a4:	f000 fcb0 	bl	800a308 <lcdWriteCommand>
  lcdWriteData(0x0A);
 80099a8:	200a      	movs	r0, #10
 80099aa:	f000 fcbd 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x82);
 80099ae:	2082      	movs	r0, #130	; 0x82
 80099b0:	f000 fcba 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x27);
 80099b4:	2027      	movs	r0, #39	; 0x27
 80099b6:	f000 fcb7 	bl	800a328 <lcdWriteData>
  lcdWriteData(0x00);
 80099ba:	2000      	movs	r0, #0
 80099bc:	f000 fcb4 	bl	800a328 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80099c0:	2011      	movs	r0, #17
 80099c2:	f000 fca1 	bl	800a308 <lcdWriteCommand>
  HAL_Delay(100);
 80099c6:	2064      	movs	r0, #100	; 0x64
 80099c8:	f7fa ffb0 	bl	800492c <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 80099cc:	2029      	movs	r0, #41	; 0x29
 80099ce:	f000 fc9b 	bl	800a308 <lcdWriteCommand>
  HAL_Delay(100);
 80099d2:	2064      	movs	r0, #100	; 0x64
 80099d4:	f7fa ffaa 	bl	800492c <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80099d8:	202c      	movs	r0, #44	; 0x2c
 80099da:	f000 fc95 	bl	800a308 <lcdWriteCommand>
}
 80099de:	bf00      	nop
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	200002a0 	.word	0x200002a0
 80099e8:	200002a1 	.word	0x200002a1
 80099ec:	200002a2 	.word	0x200002a2
 80099f0:	200002a3 	.word	0x200002a3

080099f4 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	4603      	mov	r3, r0
 80099fc:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 80099fe:	4b11      	ldr	r3, [pc, #68]	; (8009a44 <lcdFillRGB+0x50>)
 8009a00:	881b      	ldrh	r3, [r3, #0]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	b29a      	uxth	r2, r3
 8009a06:	4b0f      	ldr	r3, [pc, #60]	; (8009a44 <lcdFillRGB+0x50>)
 8009a08:	885b      	ldrh	r3, [r3, #2]
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	2100      	movs	r1, #0
 8009a10:	2000      	movs	r0, #0
 8009a12:	f000 fc23 	bl	800a25c <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8009a16:	4b0b      	ldr	r3, [pc, #44]	; (8009a44 <lcdFillRGB+0x50>)
 8009a18:	881b      	ldrh	r3, [r3, #0]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <lcdFillRGB+0x50>)
 8009a1e:	885b      	ldrh	r3, [r3, #2]
 8009a20:	fb03 f302 	mul.w	r3, r3, r2
 8009a24:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8009a26:	e003      	b.n	8009a30 <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8009a28:	88fb      	ldrh	r3, [r7, #6]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f000 fc7c 	bl	800a328 <lcdWriteData>
  while(dimensions--)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	1e5a      	subs	r2, r3, #1
 8009a34:	60fa      	str	r2, [r7, #12]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d1f6      	bne.n	8009a28 <lcdFillRGB+0x34>
  }
}
 8009a3a:	bf00      	nop
 8009a3c:	bf00      	nop
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	20000044 	.word	0x20000044

08009a48 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	4603      	mov	r3, r0
 8009a50:	80fb      	strh	r3, [r7, #6]
 8009a52:	460b      	mov	r3, r1
 8009a54:	80bb      	strh	r3, [r7, #4]
 8009a56:	4613      	mov	r3, r2
 8009a58:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8009a5a:	4b0c      	ldr	r3, [pc, #48]	; (8009a8c <lcdDrawPixel+0x44>)
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	88fa      	ldrh	r2, [r7, #6]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d20f      	bcs.n	8009a84 <lcdDrawPixel+0x3c>
 8009a64:	4b09      	ldr	r3, [pc, #36]	; (8009a8c <lcdDrawPixel+0x44>)
 8009a66:	885b      	ldrh	r3, [r3, #2]
 8009a68:	88ba      	ldrh	r2, [r7, #4]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d20a      	bcs.n	8009a84 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 8009a6e:	88bb      	ldrh	r3, [r7, #4]
 8009a70:	88fa      	ldrh	r2, [r7, #6]
 8009a72:	88b9      	ldrh	r1, [r7, #4]
 8009a74:	88f8      	ldrh	r0, [r7, #6]
 8009a76:	f000 fbf1 	bl	800a25c <lcdSetWindow>
    lcdWriteData(color);
 8009a7a:	887b      	ldrh	r3, [r7, #2]
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f000 fc53 	bl	800a328 <lcdWriteData>
 8009a82:	e000      	b.n	8009a86 <lcdDrawPixel+0x3e>
        return;
 8009a84:	bf00      	nop
}
 8009a86:	3708      	adds	r7, #8
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20000044 	.word	0x20000044

08009a90 <lcdDrawHLine>:

void lcdDrawHLine(uint16_t x0, uint16_t x1, uint16_t y, uint16_t color)
{
 8009a90:	b590      	push	{r4, r7, lr}
 8009a92:	b085      	sub	sp, #20
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4604      	mov	r4, r0
 8009a98:	4608      	mov	r0, r1
 8009a9a:	4611      	mov	r1, r2
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	4623      	mov	r3, r4
 8009aa0:	80fb      	strh	r3, [r7, #6]
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	80bb      	strh	r3, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	807b      	strh	r3, [r7, #2]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	803b      	strh	r3, [r7, #0]
  // Allows for slightly better performance than setting individual pixels

	if (x1 < x0)
 8009aae:	88ba      	ldrh	r2, [r7, #4]
 8009ab0:	88fb      	ldrh	r3, [r7, #6]
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d205      	bcs.n	8009ac2 <lcdDrawHLine+0x32>
	{
		// Switch x1 and x0
		swap(x0, x1);
 8009ab6:	88fb      	ldrh	r3, [r7, #6]
 8009ab8:	817b      	strh	r3, [r7, #10]
 8009aba:	88bb      	ldrh	r3, [r7, #4]
 8009abc:	80fb      	strh	r3, [r7, #6]
 8009abe:	897b      	ldrh	r3, [r7, #10]
 8009ac0:	80bb      	strh	r3, [r7, #4]
	}

	// Check limits
	if (x1 >= lcdProperties.width)
 8009ac2:	4b15      	ldr	r3, [pc, #84]	; (8009b18 <lcdDrawHLine+0x88>)
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	88ba      	ldrh	r2, [r7, #4]
 8009ac8:	429a      	cmp	r2, r3
 8009aca:	d303      	bcc.n	8009ad4 <lcdDrawHLine+0x44>
	{
		x1 = lcdProperties.width - 1;
 8009acc:	4b12      	ldr	r3, [pc, #72]	; (8009b18 <lcdDrawHLine+0x88>)
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	80bb      	strh	r3, [r7, #4]
	}

	if (x0 >= lcdProperties.width)
 8009ad4:	4b10      	ldr	r3, [pc, #64]	; (8009b18 <lcdDrawHLine+0x88>)
 8009ad6:	881b      	ldrh	r3, [r3, #0]
 8009ad8:	88fa      	ldrh	r2, [r7, #6]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d303      	bcc.n	8009ae6 <lcdDrawHLine+0x56>
	{
		x0 = lcdProperties.width - 1;
 8009ade:	4b0e      	ldr	r3, [pc, #56]	; (8009b18 <lcdDrawHLine+0x88>)
 8009ae0:	881b      	ldrh	r3, [r3, #0]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	80fb      	strh	r3, [r7, #6]
	}

	lcdSetWindow(x0, y, x1, y);
 8009ae6:	887b      	ldrh	r3, [r7, #2]
 8009ae8:	88ba      	ldrh	r2, [r7, #4]
 8009aea:	8879      	ldrh	r1, [r7, #2]
 8009aec:	88f8      	ldrh	r0, [r7, #6]
 8009aee:	f000 fbb5 	bl	800a25c <lcdSetWindow>

	for (int line = x0; line <= x1; line++)
 8009af2:	88fb      	ldrh	r3, [r7, #6]
 8009af4:	60fb      	str	r3, [r7, #12]
 8009af6:	e006      	b.n	8009b06 <lcdDrawHLine+0x76>
	{
		lcdWriteData(color);
 8009af8:	883b      	ldrh	r3, [r7, #0]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f000 fc14 	bl	800a328 <lcdWriteData>
	for (int line = x0; line <= x1; line++)
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	3301      	adds	r3, #1
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	88bb      	ldrh	r3, [r7, #4]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	ddf4      	ble.n	8009af8 <lcdDrawHLine+0x68>
	}
}
 8009b0e:	bf00      	nop
 8009b10:	bf00      	nop
 8009b12:	3714      	adds	r7, #20
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd90      	pop	{r4, r7, pc}
 8009b18:	20000044 	.word	0x20000044

08009b1c <lcdDrawVLine>:

void lcdDrawVLine(uint16_t x, uint16_t y0, uint16_t y1, uint16_t color)
{
 8009b1c:	b590      	push	{r4, r7, lr}
 8009b1e:	b085      	sub	sp, #20
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4604      	mov	r4, r0
 8009b24:	4608      	mov	r0, r1
 8009b26:	4611      	mov	r1, r2
 8009b28:	461a      	mov	r2, r3
 8009b2a:	4623      	mov	r3, r4
 8009b2c:	80fb      	strh	r3, [r7, #6]
 8009b2e:	4603      	mov	r3, r0
 8009b30:	80bb      	strh	r3, [r7, #4]
 8009b32:	460b      	mov	r3, r1
 8009b34:	807b      	strh	r3, [r7, #2]
 8009b36:	4613      	mov	r3, r2
 8009b38:	803b      	strh	r3, [r7, #0]
  if (y1 < y0)
 8009b3a:	887a      	ldrh	r2, [r7, #2]
 8009b3c:	88bb      	ldrh	r3, [r7, #4]
 8009b3e:	429a      	cmp	r2, r3
 8009b40:	d205      	bcs.n	8009b4e <lcdDrawVLine+0x32>
  {
	  swap(y0, y1);
 8009b42:	88bb      	ldrh	r3, [r7, #4]
 8009b44:	817b      	strh	r3, [r7, #10]
 8009b46:	887b      	ldrh	r3, [r7, #2]
 8009b48:	80bb      	strh	r3, [r7, #4]
 8009b4a:	897b      	ldrh	r3, [r7, #10]
 8009b4c:	807b      	strh	r3, [r7, #2]
  }

  if (x >= lcdProperties.width)
 8009b4e:	4b1a      	ldr	r3, [pc, #104]	; (8009bb8 <lcdDrawVLine+0x9c>)
 8009b50:	881b      	ldrh	r3, [r3, #0]
 8009b52:	88fa      	ldrh	r2, [r7, #6]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d303      	bcc.n	8009b60 <lcdDrawVLine+0x44>
  {
    x = lcdProperties.width - 1;
 8009b58:	4b17      	ldr	r3, [pc, #92]	; (8009bb8 <lcdDrawVLine+0x9c>)
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	80fb      	strh	r3, [r7, #6]
  }

  if (y0 >= lcdProperties.height)
 8009b60:	4b15      	ldr	r3, [pc, #84]	; (8009bb8 <lcdDrawVLine+0x9c>)
 8009b62:	885b      	ldrh	r3, [r3, #2]
 8009b64:	88ba      	ldrh	r2, [r7, #4]
 8009b66:	429a      	cmp	r2, r3
 8009b68:	d303      	bcc.n	8009b72 <lcdDrawVLine+0x56>
  {
    y0 = lcdProperties.height - 1;
 8009b6a:	4b13      	ldr	r3, [pc, #76]	; (8009bb8 <lcdDrawVLine+0x9c>)
 8009b6c:	885b      	ldrh	r3, [r3, #2]
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	80bb      	strh	r3, [r7, #4]
  }

  if (y1 >= lcdProperties.height)
 8009b72:	4b11      	ldr	r3, [pc, #68]	; (8009bb8 <lcdDrawVLine+0x9c>)
 8009b74:	885b      	ldrh	r3, [r3, #2]
 8009b76:	887a      	ldrh	r2, [r7, #2]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d303      	bcc.n	8009b84 <lcdDrawVLine+0x68>
  {
    y1 = lcdProperties.height - 1;
 8009b7c:	4b0e      	ldr	r3, [pc, #56]	; (8009bb8 <lcdDrawVLine+0x9c>)
 8009b7e:	885b      	ldrh	r3, [r3, #2]
 8009b80:	3b01      	subs	r3, #1
 8009b82:	807b      	strh	r3, [r7, #2]
  }

  lcdSetWindow(x, y0, x, y1);
 8009b84:	887b      	ldrh	r3, [r7, #2]
 8009b86:	88fa      	ldrh	r2, [r7, #6]
 8009b88:	88b9      	ldrh	r1, [r7, #4]
 8009b8a:	88f8      	ldrh	r0, [r7, #6]
 8009b8c:	f000 fb66 	bl	800a25c <lcdSetWindow>

  for(int line = y0; line <= y1; line++)
 8009b90:	88bb      	ldrh	r3, [r7, #4]
 8009b92:	60fb      	str	r3, [r7, #12]
 8009b94:	e006      	b.n	8009ba4 <lcdDrawVLine+0x88>
  {
	  lcdWriteData(color);
 8009b96:	883b      	ldrh	r3, [r7, #0]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f000 fbc5 	bl	800a328 <lcdWriteData>
  for(int line = y0; line <= y1; line++)
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	60fb      	str	r3, [r7, #12]
 8009ba4:	887b      	ldrh	r3, [r7, #2]
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	ddf4      	ble.n	8009b96 <lcdDrawVLine+0x7a>
  }
}
 8009bac:	bf00      	nop
 8009bae:	bf00      	nop
 8009bb0:	3714      	adds	r7, #20
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd90      	pop	{r4, r7, pc}
 8009bb6:	bf00      	nop
 8009bb8:	20000044 	.word	0x20000044

08009bbc <lcdFillCircleHelper>:
 * \param color			Color
 *
 * \return void
 */
void lcdFillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 8009bbc:	b590      	push	{r4, r7, lr}
 8009bbe:	b087      	sub	sp, #28
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	4604      	mov	r4, r0
 8009bc4:	4608      	mov	r0, r1
 8009bc6:	4611      	mov	r1, r2
 8009bc8:	461a      	mov	r2, r3
 8009bca:	4623      	mov	r3, r4
 8009bcc:	80fb      	strh	r3, [r7, #6]
 8009bce:	4603      	mov	r3, r0
 8009bd0:	80bb      	strh	r3, [r7, #4]
 8009bd2:	460b      	mov	r3, r1
 8009bd4:	807b      	strh	r3, [r7, #2]
 8009bd6:	4613      	mov	r3, r2
 8009bd8:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8009bda:	887b      	ldrh	r3, [r7, #2]
 8009bdc:	f1c3 0301 	rsb	r3, r3, #1
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8009be4:	2301      	movs	r3, #1
 8009be6:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8009be8:	887b      	ldrh	r3, [r7, #2]
 8009bea:	461a      	mov	r2, r3
 8009bec:	03d2      	lsls	r2, r2, #15
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	005b      	lsls	r3, r3, #1
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8009bfa:	887b      	ldrh	r3, [r7, #2]
 8009bfc:	81fb      	strh	r3, [r7, #14]

	while (x < y)
 8009bfe:	e07b      	b.n	8009cf8 <lcdFillCircleHelper+0x13c>
	{
		if (f >= 0)
 8009c00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	db0e      	blt.n	8009c26 <lcdFillCircleHelper+0x6a>
		{
			y--;
 8009c08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8009c14:	8a7b      	ldrh	r3, [r7, #18]
 8009c16:	3302      	adds	r3, #2
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8009c1c:	8afa      	ldrh	r2, [r7, #22]
 8009c1e:	8a7b      	ldrh	r3, [r7, #18]
 8009c20:	4413      	add	r3, r2
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8009c26:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	b29b      	uxth	r3, r3
 8009c30:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8009c32:	8abb      	ldrh	r3, [r7, #20]
 8009c34:	3302      	adds	r3, #2
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8009c3a:	8afa      	ldrh	r2, [r7, #22]
 8009c3c:	8abb      	ldrh	r3, [r7, #20]
 8009c3e:	4413      	add	r3, r2
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1)
 8009c44:	787b      	ldrb	r3, [r7, #1]
 8009c46:	f003 0301 	and.w	r3, r3, #1
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d027      	beq.n	8009c9e <lcdFillCircleHelper+0xe2>
		{
			lcdDrawVLine(x0 + x, y0 - y, y0 + y + 1 + delta, color);
 8009c4e:	88fa      	ldrh	r2, [r7, #6]
 8009c50:	8a3b      	ldrh	r3, [r7, #16]
 8009c52:	4413      	add	r3, r2
 8009c54:	b298      	uxth	r0, r3
 8009c56:	88ba      	ldrh	r2, [r7, #4]
 8009c58:	89fb      	ldrh	r3, [r7, #14]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	b299      	uxth	r1, r3
 8009c5e:	88ba      	ldrh	r2, [r7, #4]
 8009c60:	89fb      	ldrh	r3, [r7, #14]
 8009c62:	4413      	add	r3, r2
 8009c64:	b29a      	uxth	r2, r3
 8009c66:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c68:	4413      	add	r3, r2
 8009c6a:	b29b      	uxth	r3, r3
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	b29a      	uxth	r2, r3
 8009c70:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c72:	f7ff ff53 	bl	8009b1c <lcdDrawVLine>
			lcdDrawVLine(x0 + y, y0 - x, y0 + x + 1 + delta, color);
 8009c76:	88fa      	ldrh	r2, [r7, #6]
 8009c78:	89fb      	ldrh	r3, [r7, #14]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	b298      	uxth	r0, r3
 8009c7e:	88ba      	ldrh	r2, [r7, #4]
 8009c80:	8a3b      	ldrh	r3, [r7, #16]
 8009c82:	1ad3      	subs	r3, r2, r3
 8009c84:	b299      	uxth	r1, r3
 8009c86:	88ba      	ldrh	r2, [r7, #4]
 8009c88:	8a3b      	ldrh	r3, [r7, #16]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009c90:	4413      	add	r3, r2
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	3301      	adds	r3, #1
 8009c96:	b29a      	uxth	r2, r3
 8009c98:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009c9a:	f7ff ff3f 	bl	8009b1c <lcdDrawVLine>
		}
		if (cornername & 0x2)
 8009c9e:	787b      	ldrb	r3, [r7, #1]
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d027      	beq.n	8009cf8 <lcdFillCircleHelper+0x13c>
		{
			lcdDrawVLine(x0 - x, y0 - y, y0 + y + 1 + delta, color);
 8009ca8:	88fa      	ldrh	r2, [r7, #6]
 8009caa:	8a3b      	ldrh	r3, [r7, #16]
 8009cac:	1ad3      	subs	r3, r2, r3
 8009cae:	b298      	uxth	r0, r3
 8009cb0:	88ba      	ldrh	r2, [r7, #4]
 8009cb2:	89fb      	ldrh	r3, [r7, #14]
 8009cb4:	1ad3      	subs	r3, r2, r3
 8009cb6:	b299      	uxth	r1, r3
 8009cb8:	88ba      	ldrh	r2, [r7, #4]
 8009cba:	89fb      	ldrh	r3, [r7, #14]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	b29a      	uxth	r2, r3
 8009cc0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009cc2:	4413      	add	r3, r2
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	b29a      	uxth	r2, r3
 8009cca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009ccc:	f7ff ff26 	bl	8009b1c <lcdDrawVLine>
			lcdDrawVLine(x0 - y, y0 - x, y0 + x + 1 + delta, color);
 8009cd0:	88fa      	ldrh	r2, [r7, #6]
 8009cd2:	89fb      	ldrh	r3, [r7, #14]
 8009cd4:	1ad3      	subs	r3, r2, r3
 8009cd6:	b298      	uxth	r0, r3
 8009cd8:	88ba      	ldrh	r2, [r7, #4]
 8009cda:	8a3b      	ldrh	r3, [r7, #16]
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	b299      	uxth	r1, r3
 8009ce0:	88ba      	ldrh	r2, [r7, #4]
 8009ce2:	8a3b      	ldrh	r3, [r7, #16]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009cea:	4413      	add	r3, r2
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	3301      	adds	r3, #1
 8009cf0:	b29a      	uxth	r2, r3
 8009cf2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009cf4:	f7ff ff12 	bl	8009b1c <lcdDrawVLine>
	while (x < y)
 8009cf8:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8009cfc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	f6ff af7d 	blt.w	8009c00 <lcdFillCircleHelper+0x44>
		}
	}
}
 8009d06:	bf00      	nop
 8009d08:	bf00      	nop
 8009d0a:	371c      	adds	r7, #28
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd90      	pop	{r4, r7, pc}

08009d10 <lcdFillRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t fillcolor)
{
 8009d10:	b590      	push	{r4, r7, lr}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	4604      	mov	r4, r0
 8009d18:	4608      	mov	r0, r1
 8009d1a:	4611      	mov	r1, r2
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	4623      	mov	r3, r4
 8009d20:	80fb      	strh	r3, [r7, #6]
 8009d22:	4603      	mov	r3, r0
 8009d24:	80bb      	strh	r3, [r7, #4]
 8009d26:	460b      	mov	r3, r1
 8009d28:	807b      	strh	r3, [r7, #2]
 8009d2a:	4613      	mov	r3, r2
 8009d2c:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8009d2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009d32:	4a24      	ldr	r2, [pc, #144]	; (8009dc4 <lcdFillRect+0xb4>)
 8009d34:	8812      	ldrh	r2, [r2, #0]
 8009d36:	4293      	cmp	r3, r2
 8009d38:	da3f      	bge.n	8009dba <lcdFillRect+0xaa>
 8009d3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009d3e:	4a21      	ldr	r2, [pc, #132]	; (8009dc4 <lcdFillRect+0xb4>)
 8009d40:	8852      	ldrh	r2, [r2, #2]
 8009d42:	4293      	cmp	r3, r2
 8009d44:	da39      	bge.n	8009dba <lcdFillRect+0xaa>
	if((x + w - 1) >= lcdProperties.width) w = lcdProperties.width - x;
 8009d46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009d4a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009d4e:	4413      	add	r3, r2
 8009d50:	4a1c      	ldr	r2, [pc, #112]	; (8009dc4 <lcdFillRect+0xb4>)
 8009d52:	8812      	ldrh	r2, [r2, #0]
 8009d54:	4293      	cmp	r3, r2
 8009d56:	dd05      	ble.n	8009d64 <lcdFillRect+0x54>
 8009d58:	4b1a      	ldr	r3, [pc, #104]	; (8009dc4 <lcdFillRect+0xb4>)
 8009d5a:	881a      	ldrh	r2, [r3, #0]
 8009d5c:	88fb      	ldrh	r3, [r7, #6]
 8009d5e:	1ad3      	subs	r3, r2, r3
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= lcdProperties.height) h = lcdProperties.height - y;
 8009d64:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8009d68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	4a15      	ldr	r2, [pc, #84]	; (8009dc4 <lcdFillRect+0xb4>)
 8009d70:	8852      	ldrh	r2, [r2, #2]
 8009d72:	4293      	cmp	r3, r2
 8009d74:	dd05      	ble.n	8009d82 <lcdFillRect+0x72>
 8009d76:	4b13      	ldr	r3, [pc, #76]	; (8009dc4 <lcdFillRect+0xb4>)
 8009d78:	885a      	ldrh	r2, [r3, #2]
 8009d7a:	88bb      	ldrh	r3, [r7, #4]
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	b29b      	uxth	r3, r3
 8009d80:	803b      	strh	r3, [r7, #0]

	for(int16_t y1 = y; y1 <= y + h; y1++)
 8009d82:	88bb      	ldrh	r3, [r7, #4]
 8009d84:	81fb      	strh	r3, [r7, #14]
 8009d86:	e00e      	b.n	8009da6 <lcdFillRect+0x96>
	{
		lcdDrawHLine(x, x + w, y1, fillcolor);
 8009d88:	88f8      	ldrh	r0, [r7, #6]
 8009d8a:	88fa      	ldrh	r2, [r7, #6]
 8009d8c:	887b      	ldrh	r3, [r7, #2]
 8009d8e:	4413      	add	r3, r2
 8009d90:	b299      	uxth	r1, r3
 8009d92:	89fa      	ldrh	r2, [r7, #14]
 8009d94:	8c3b      	ldrh	r3, [r7, #32]
 8009d96:	f7ff fe7b 	bl	8009a90 <lcdDrawHLine>
	for(int16_t y1 = y; y1 <= y + h; y1++)
 8009d9a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8009d9e:	b29b      	uxth	r3, r3
 8009da0:	3301      	adds	r3, #1
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	81fb      	strh	r3, [r7, #14]
 8009da6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8009daa:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009dae:	f9b7 3000 	ldrsh.w	r3, [r7]
 8009db2:	440b      	add	r3, r1
 8009db4:	429a      	cmp	r2, r3
 8009db6:	dde7      	ble.n	8009d88 <lcdFillRect+0x78>
 8009db8:	e000      	b.n	8009dbc <lcdFillRect+0xac>
	if((x >= lcdProperties.width) || (y >= lcdProperties.height)) return;
 8009dba:	bf00      	nop
	}
}
 8009dbc:	3714      	adds	r7, #20
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd90      	pop	{r4, r7, pc}
 8009dc2:	bf00      	nop
 8009dc4:	20000044 	.word	0x20000044

08009dc8 <lcdFillRoundRect>:
 * \param fillcolor		Color
 *
 * \return void
 */
void lcdFillRoundRect(int16_t x, int16_t y, int16_t w, int16_t h, int16_t r, uint16_t color)
{
 8009dc8:	b590      	push	{r4, r7, lr}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af02      	add	r7, sp, #8
 8009dce:	4604      	mov	r4, r0
 8009dd0:	4608      	mov	r0, r1
 8009dd2:	4611      	mov	r1, r2
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	4623      	mov	r3, r4
 8009dd8:	80fb      	strh	r3, [r7, #6]
 8009dda:	4603      	mov	r3, r0
 8009ddc:	80bb      	strh	r3, [r7, #4]
 8009dde:	460b      	mov	r3, r1
 8009de0:	807b      	strh	r3, [r7, #2]
 8009de2:	4613      	mov	r3, r2
 8009de4:	803b      	strh	r3, [r7, #0]
	// smarter version
	lcdFillRect(x + r, y, w - 2 * r, h, color);
 8009de6:	88fa      	ldrh	r2, [r7, #6]
 8009de8:	8b3b      	ldrh	r3, [r7, #24]
 8009dea:	4413      	add	r3, r2
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	b218      	sxth	r0, r3
 8009df0:	887a      	ldrh	r2, [r7, #2]
 8009df2:	8b3b      	ldrh	r3, [r7, #24]
 8009df4:	005b      	lsls	r3, r3, #1
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	1ad3      	subs	r3, r2, r3
 8009dfa:	b29b      	uxth	r3, r3
 8009dfc:	b21a      	sxth	r2, r3
 8009dfe:	f9b7 4000 	ldrsh.w	r4, [r7]
 8009e02:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8009e06:	8bbb      	ldrh	r3, [r7, #28]
 8009e08:	9300      	str	r3, [sp, #0]
 8009e0a:	4623      	mov	r3, r4
 8009e0c:	f7ff ff80 	bl	8009d10 <lcdFillRect>

	// draw four corners
	lcdFillCircleHelper(x + w - r - 1, y + r, r, 1, h - 2 * r - 1, color);
 8009e10:	88fa      	ldrh	r2, [r7, #6]
 8009e12:	887b      	ldrh	r3, [r7, #2]
 8009e14:	4413      	add	r3, r2
 8009e16:	b29a      	uxth	r2, r3
 8009e18:	8b3b      	ldrh	r3, [r7, #24]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	b29b      	uxth	r3, r3
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	b29b      	uxth	r3, r3
 8009e22:	b218      	sxth	r0, r3
 8009e24:	88ba      	ldrh	r2, [r7, #4]
 8009e26:	8b3b      	ldrh	r3, [r7, #24]
 8009e28:	4413      	add	r3, r2
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	b219      	sxth	r1, r3
 8009e2e:	883a      	ldrh	r2, [r7, #0]
 8009e30:	8b3b      	ldrh	r3, [r7, #24]
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	1ad3      	subs	r3, r2, r3
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	b21b      	sxth	r3, r3
 8009e40:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8009e44:	8bba      	ldrh	r2, [r7, #28]
 8009e46:	9201      	str	r2, [sp, #4]
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4622      	mov	r2, r4
 8009e4e:	f7ff feb5 	bl	8009bbc <lcdFillCircleHelper>
	lcdFillCircleHelper(x + r, y + r, r, 2, h - 2 * r - 1, color);
 8009e52:	88fa      	ldrh	r2, [r7, #6]
 8009e54:	8b3b      	ldrh	r3, [r7, #24]
 8009e56:	4413      	add	r3, r2
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	b218      	sxth	r0, r3
 8009e5c:	88ba      	ldrh	r2, [r7, #4]
 8009e5e:	8b3b      	ldrh	r3, [r7, #24]
 8009e60:	4413      	add	r3, r2
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	b219      	sxth	r1, r3
 8009e66:	883a      	ldrh	r2, [r7, #0]
 8009e68:	8b3b      	ldrh	r3, [r7, #24]
 8009e6a:	005b      	lsls	r3, r3, #1
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	1ad3      	subs	r3, r2, r3
 8009e70:	b29b      	uxth	r3, r3
 8009e72:	3b01      	subs	r3, #1
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	b21b      	sxth	r3, r3
 8009e78:	f9b7 4018 	ldrsh.w	r4, [r7, #24]
 8009e7c:	8bba      	ldrh	r2, [r7, #28]
 8009e7e:	9201      	str	r2, [sp, #4]
 8009e80:	9300      	str	r3, [sp, #0]
 8009e82:	2302      	movs	r3, #2
 8009e84:	4622      	mov	r2, r4
 8009e86:	f7ff fe99 	bl	8009bbc <lcdFillCircleHelper>
}
 8009e8a:	bf00      	nop
 8009e8c:	370c      	adds	r7, #12
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bd90      	pop	{r4, r7, pc}
	...

08009e94 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 8009e94:	b590      	push	{r4, r7, lr}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	4604      	mov	r4, r0
 8009e9c:	4608      	mov	r0, r1
 8009e9e:	4611      	mov	r1, r2
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	4623      	mov	r3, r4
 8009ea4:	80fb      	strh	r3, [r7, #6]
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	80bb      	strh	r3, [r7, #4]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	70fb      	strb	r3, [r7, #3]
 8009eae:	4613      	mov	r3, r2
 8009eb0:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8009eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009eb6:	4a4a      	ldr	r2, [pc, #296]	; (8009fe0 <lcdDrawChar+0x14c>)
 8009eb8:	8812      	ldrh	r2, [r2, #0]
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	f280 808c 	bge.w	8009fd8 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8009ec0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009ec4:	4a46      	ldr	r2, [pc, #280]	; (8009fe0 <lcdDrawChar+0x14c>)
 8009ec6:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	f280 8085 	bge.w	8009fd8 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8009ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009ed2:	4a44      	ldr	r2, [pc, #272]	; (8009fe4 <lcdDrawChar+0x150>)
 8009ed4:	6892      	ldr	r2, [r2, #8]
 8009ed6:	8892      	ldrh	r2, [r2, #4]
 8009ed8:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	db7c      	blt.n	8009fd8 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 8009ede:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009ee2:	4a40      	ldr	r2, [pc, #256]	; (8009fe4 <lcdDrawChar+0x150>)
 8009ee4:	6892      	ldr	r2, [r2, #8]
 8009ee6:	88d2      	ldrh	r2, [r2, #6]
 8009ee8:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	db74      	blt.n	8009fd8 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8009eee:	4b3d      	ldr	r3, [pc, #244]	; (8009fe4 <lcdDrawChar+0x150>)
 8009ef0:	689b      	ldr	r3, [r3, #8]
 8009ef2:	88db      	ldrh	r3, [r3, #6]
 8009ef4:	08db      	lsrs	r3, r3, #3
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8009efa:	2300      	movs	r3, #0
 8009efc:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8009efe:	2300      	movs	r3, #0
 8009f00:	73bb      	strb	r3, [r7, #14]
 8009f02:	e061      	b.n	8009fc8 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8009f04:	2300      	movs	r3, #0
 8009f06:	733b      	strb	r3, [r7, #12]
 8009f08:	e055      	b.n	8009fb6 <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8009f0a:	4b36      	ldr	r3, [pc, #216]	; (8009fe4 <lcdDrawChar+0x150>)
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	78fa      	ldrb	r2, [r7, #3]
 8009f12:	3a20      	subs	r2, #32
 8009f14:	4933      	ldr	r1, [pc, #204]	; (8009fe4 <lcdDrawChar+0x150>)
 8009f16:	6889      	ldr	r1, [r1, #8]
 8009f18:	88c9      	ldrh	r1, [r1, #6]
 8009f1a:	fb01 f202 	mul.w	r2, r1, r2
 8009f1e:	7ab9      	ldrb	r1, [r7, #10]
 8009f20:	fb01 f102 	mul.w	r1, r1, r2
 8009f24:	7bba      	ldrb	r2, [r7, #14]
 8009f26:	7ab8      	ldrb	r0, [r7, #10]
 8009f28:	fb00 f202 	mul.w	r2, r0, r2
 8009f2c:	4411      	add	r1, r2
 8009f2e:	7b3a      	ldrb	r2, [r7, #12]
 8009f30:	440a      	add	r2, r1
 8009f32:	4413      	add	r3, r2
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	72fb      	strb	r3, [r7, #11]
 8009f3c:	e032      	b.n	8009fa4 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8009f3e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	da12      	bge.n	8009f6c <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8009f46:	7afb      	ldrb	r3, [r7, #11]
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	88fb      	ldrh	r3, [r7, #6]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	b29a      	uxth	r2, r3
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
 8009f52:	b29b      	uxth	r3, r3
 8009f54:	4413      	add	r3, r2
 8009f56:	b298      	uxth	r0, r3
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	b29a      	uxth	r2, r3
 8009f5c:	88bb      	ldrh	r3, [r7, #4]
 8009f5e:	4413      	add	r3, r2
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	883a      	ldrh	r2, [r7, #0]
 8009f64:	4619      	mov	r1, r3
 8009f66:	f7ff fd6f 	bl	8009a48 <lcdDrawPixel>
 8009f6a:	e015      	b.n	8009f98 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8009f6c:	8c3a      	ldrh	r2, [r7, #32]
 8009f6e:	883b      	ldrh	r3, [r7, #0]
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d011      	beq.n	8009f98 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8009f74:	7afb      	ldrb	r3, [r7, #11]
 8009f76:	b29a      	uxth	r2, r3
 8009f78:	88fb      	ldrh	r3, [r7, #6]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	b29a      	uxth	r2, r3
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	4413      	add	r3, r2
 8009f84:	b298      	uxth	r0, r3
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	b29a      	uxth	r2, r3
 8009f8a:	88bb      	ldrh	r3, [r7, #4]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	8c3a      	ldrh	r2, [r7, #32]
 8009f92:	4619      	mov	r1, r3
 8009f94:	f7ff fd58 	bl	8009a48 <lcdDrawPixel>
				}
				line <<= 1;
 8009f98:	7b7b      	ldrb	r3, [r7, #13]
 8009f9a:	005b      	lsls	r3, r3, #1
 8009f9c:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 8009f9e:	7afb      	ldrb	r3, [r7, #11]
 8009fa0:	3301      	adds	r3, #1
 8009fa2:	72fb      	strb	r3, [r7, #11]
 8009fa4:	7afb      	ldrb	r3, [r7, #11]
 8009fa6:	2b07      	cmp	r3, #7
 8009fa8:	d9c9      	bls.n	8009f3e <lcdDrawChar+0xaa>
			}

			xP += 8;
 8009faa:	7bfb      	ldrb	r3, [r7, #15]
 8009fac:	3308      	adds	r3, #8
 8009fae:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8009fb0:	7b3b      	ldrb	r3, [r7, #12]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	733b      	strb	r3, [r7, #12]
 8009fb6:	7b3a      	ldrb	r2, [r7, #12]
 8009fb8:	7abb      	ldrb	r3, [r7, #10]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	d3a5      	bcc.n	8009f0a <lcdDrawChar+0x76>
		}

		xP = 0;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8009fc2:	7bbb      	ldrb	r3, [r7, #14]
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	73bb      	strb	r3, [r7, #14]
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
 8009fca:	b29a      	uxth	r2, r3
 8009fcc:	4b05      	ldr	r3, [pc, #20]	; (8009fe4 <lcdDrawChar+0x150>)
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	88db      	ldrh	r3, [r3, #6]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d396      	bcc.n	8009f04 <lcdDrawChar+0x70>
 8009fd6:	e000      	b.n	8009fda <lcdDrawChar+0x146>
		return;
 8009fd8:	bf00      	nop
	}
}
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd90      	pop	{r4, r7, pc}
 8009fe0:	20000044 	.word	0x20000044
 8009fe4:	2000004c 	.word	0x2000004c

08009fe8 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8009fe8:	b40f      	push	{r0, r1, r2, r3}
 8009fea:	b590      	push	{r4, r7, lr}
 8009fec:	b085      	sub	sp, #20
 8009fee:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8009ff0:	f107 031c 	add.w	r3, r7, #28
 8009ff4:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8009ff6:	683a      	ldr	r2, [r7, #0]
 8009ff8:	69b9      	ldr	r1, [r7, #24]
 8009ffa:	483d      	ldr	r0, [pc, #244]	; (800a0f0 <lcdPrintf+0x108>)
 8009ffc:	f003 fa58 	bl	800d4b0 <vsiprintf>
	va_end(lst);

	p = buf;
 800a000:	4b3b      	ldr	r3, [pc, #236]	; (800a0f0 <lcdPrintf+0x108>)
 800a002:	607b      	str	r3, [r7, #4]
	while (*p)
 800a004:	e067      	b.n	800a0d6 <lcdPrintf+0xee>
	{
		if (*p == '\n')
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	2b0a      	cmp	r3, #10
 800a00c:	d10c      	bne.n	800a028 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 800a00e:	4b39      	ldr	r3, [pc, #228]	; (800a0f4 <lcdPrintf+0x10c>)
 800a010:	885a      	ldrh	r2, [r3, #2]
 800a012:	4b39      	ldr	r3, [pc, #228]	; (800a0f8 <lcdPrintf+0x110>)
 800a014:	689b      	ldr	r3, [r3, #8]
 800a016:	88db      	ldrh	r3, [r3, #6]
 800a018:	4413      	add	r3, r2
 800a01a:	b29a      	uxth	r2, r3
 800a01c:	4b35      	ldr	r3, [pc, #212]	; (800a0f4 <lcdPrintf+0x10c>)
 800a01e:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 800a020:	4b34      	ldr	r3, [pc, #208]	; (800a0f4 <lcdPrintf+0x10c>)
 800a022:	2200      	movs	r2, #0
 800a024:	801a      	strh	r2, [r3, #0]
 800a026:	e04a      	b.n	800a0be <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	2b0d      	cmp	r3, #13
 800a02e:	d046      	beq.n	800a0be <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	2b09      	cmp	r3, #9
 800a036:	d10b      	bne.n	800a050 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 800a038:	4b2e      	ldr	r3, [pc, #184]	; (800a0f4 <lcdPrintf+0x10c>)
 800a03a:	881a      	ldrh	r2, [r3, #0]
 800a03c:	4b2e      	ldr	r3, [pc, #184]	; (800a0f8 <lcdPrintf+0x110>)
 800a03e:	689b      	ldr	r3, [r3, #8]
 800a040:	889b      	ldrh	r3, [r3, #4]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	b29b      	uxth	r3, r3
 800a046:	4413      	add	r3, r2
 800a048:	b29a      	uxth	r2, r3
 800a04a:	4b2a      	ldr	r3, [pc, #168]	; (800a0f4 <lcdPrintf+0x10c>)
 800a04c:	801a      	strh	r2, [r3, #0]
 800a04e:	e036      	b.n	800a0be <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 800a050:	4b28      	ldr	r3, [pc, #160]	; (800a0f4 <lcdPrintf+0x10c>)
 800a052:	881b      	ldrh	r3, [r3, #0]
 800a054:	b218      	sxth	r0, r3
 800a056:	4b27      	ldr	r3, [pc, #156]	; (800a0f4 <lcdPrintf+0x10c>)
 800a058:	885b      	ldrh	r3, [r3, #2]
 800a05a:	b219      	sxth	r1, r3
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	781a      	ldrb	r2, [r3, #0]
 800a060:	4b25      	ldr	r3, [pc, #148]	; (800a0f8 <lcdPrintf+0x110>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	b29c      	uxth	r4, r3
 800a066:	4b24      	ldr	r3, [pc, #144]	; (800a0f8 <lcdPrintf+0x110>)
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	4623      	mov	r3, r4
 800a070:	f7ff ff10 	bl	8009e94 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 800a074:	4b1f      	ldr	r3, [pc, #124]	; (800a0f4 <lcdPrintf+0x10c>)
 800a076:	881a      	ldrh	r2, [r3, #0]
 800a078:	4b1f      	ldr	r3, [pc, #124]	; (800a0f8 <lcdPrintf+0x110>)
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	889b      	ldrh	r3, [r3, #4]
 800a07e:	4413      	add	r3, r2
 800a080:	b29a      	uxth	r2, r3
 800a082:	4b1c      	ldr	r3, [pc, #112]	; (800a0f4 <lcdPrintf+0x10c>)
 800a084:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 800a086:	4b1c      	ldr	r3, [pc, #112]	; (800a0f8 <lcdPrintf+0x110>)
 800a088:	7b1b      	ldrb	r3, [r3, #12]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d017      	beq.n	800a0be <lcdPrintf+0xd6>
 800a08e:	4b19      	ldr	r3, [pc, #100]	; (800a0f4 <lcdPrintf+0x10c>)
 800a090:	881b      	ldrh	r3, [r3, #0]
 800a092:	461a      	mov	r2, r3
 800a094:	4b19      	ldr	r3, [pc, #100]	; (800a0fc <lcdPrintf+0x114>)
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	4619      	mov	r1, r3
 800a09a:	4b17      	ldr	r3, [pc, #92]	; (800a0f8 <lcdPrintf+0x110>)
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	889b      	ldrh	r3, [r3, #4]
 800a0a0:	1acb      	subs	r3, r1, r3
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	dd0b      	ble.n	800a0be <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 800a0a6:	4b13      	ldr	r3, [pc, #76]	; (800a0f4 <lcdPrintf+0x10c>)
 800a0a8:	885a      	ldrh	r2, [r3, #2]
 800a0aa:	4b13      	ldr	r3, [pc, #76]	; (800a0f8 <lcdPrintf+0x110>)
 800a0ac:	689b      	ldr	r3, [r3, #8]
 800a0ae:	88db      	ldrh	r3, [r3, #6]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	b29a      	uxth	r2, r3
 800a0b4:	4b0f      	ldr	r3, [pc, #60]	; (800a0f4 <lcdPrintf+0x10c>)
 800a0b6:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 800a0b8:	4b0e      	ldr	r3, [pc, #56]	; (800a0f4 <lcdPrintf+0x10c>)
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 800a0c4:	4b0b      	ldr	r3, [pc, #44]	; (800a0f4 <lcdPrintf+0x10c>)
 800a0c6:	885a      	ldrh	r2, [r3, #2]
 800a0c8:	4b0c      	ldr	r3, [pc, #48]	; (800a0fc <lcdPrintf+0x114>)
 800a0ca:	885b      	ldrh	r3, [r3, #2]
 800a0cc:	429a      	cmp	r2, r3
 800a0ce:	d302      	bcc.n	800a0d6 <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 800a0d0:	4b08      	ldr	r3, [pc, #32]	; (800a0f4 <lcdPrintf+0x10c>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	805a      	strh	r2, [r3, #2]
	while (*p)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	781b      	ldrb	r3, [r3, #0]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d193      	bne.n	800a006 <lcdPrintf+0x1e>
		}
	}
}
 800a0de:	bf00      	nop
 800a0e0:	bf00      	nop
 800a0e2:	370c      	adds	r7, #12
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800a0ea:	b004      	add	sp, #16
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	200002a4 	.word	0x200002a4
 800a0f4:	2000029c 	.word	0x2000029c
 800a0f8:	2000004c 	.word	0x2000004c
 800a0fc:	20000044 	.word	0x20000044

0800a100 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 800a108:	4a04      	ldr	r2, [pc, #16]	; (800a11c <lcdSetTextFont+0x1c>)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6093      	str	r3, [r2, #8]
}
 800a10e:	bf00      	nop
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr
 800a11a:	bf00      	nop
 800a11c:	2000004c 	.word	0x2000004c

0800a120 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	4603      	mov	r3, r0
 800a128:	460a      	mov	r2, r1
 800a12a:	80fb      	strh	r3, [r7, #6]
 800a12c:	4613      	mov	r3, r2
 800a12e:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 800a130:	88fb      	ldrh	r3, [r7, #6]
 800a132:	4a05      	ldr	r2, [pc, #20]	; (800a148 <lcdSetTextColor+0x28>)
 800a134:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 800a136:	88bb      	ldrh	r3, [r7, #4]
 800a138:	4a03      	ldr	r2, [pc, #12]	; (800a148 <lcdSetTextColor+0x28>)
 800a13a:	6053      	str	r3, [r2, #4]
}
 800a13c:	bf00      	nop
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr
 800a148:	2000004c 	.word	0x2000004c

0800a14c <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
 800a152:	4603      	mov	r3, r0
 800a154:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 800a156:	4a2f      	ldr	r2, [pc, #188]	; (800a214 <lcdSetOrientation+0xc8>)
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 800a15c:	2036      	movs	r0, #54	; 0x36
 800a15e:	f000 f8d3 	bl	800a308 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 800a162:	4b2c      	ldr	r3, [pc, #176]	; (800a214 <lcdSetOrientation+0xc8>)
 800a164:	791b      	ldrb	r3, [r3, #4]
 800a166:	2b03      	cmp	r3, #3
 800a168:	d842      	bhi.n	800a1f0 <lcdSetOrientation+0xa4>
 800a16a:	a201      	add	r2, pc, #4	; (adr r2, 800a170 <lcdSetOrientation+0x24>)
 800a16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a170:	0800a181 	.word	0x0800a181
 800a174:	0800a1b9 	.word	0x0800a1b9
 800a178:	0800a19d 	.word	0x0800a19d
 800a17c:	0800a1d5 	.word	0x0800a1d5
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 800a180:	4b25      	ldr	r3, [pc, #148]	; (800a218 <lcdSetOrientation+0xcc>)
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	b29b      	uxth	r3, r3
 800a186:	4618      	mov	r0, r3
 800a188:	f000 f8ce 	bl	800a328 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 800a18c:	4b21      	ldr	r3, [pc, #132]	; (800a214 <lcdSetOrientation+0xc8>)
 800a18e:	22f0      	movs	r2, #240	; 0xf0
 800a190:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 800a192:	4b20      	ldr	r3, [pc, #128]	; (800a214 <lcdSetOrientation+0xc8>)
 800a194:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a198:	805a      	strh	r2, [r3, #2]
			break;
 800a19a:	e02a      	b.n	800a1f2 <lcdSetOrientation+0xa6>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 800a19c:	4b1f      	ldr	r3, [pc, #124]	; (800a21c <lcdSetOrientation+0xd0>)
 800a19e:	781b      	ldrb	r3, [r3, #0]
 800a1a0:	b29b      	uxth	r3, r3
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 f8c0 	bl	800a328 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 800a1a8:	4b1a      	ldr	r3, [pc, #104]	; (800a214 <lcdSetOrientation+0xc8>)
 800a1aa:	22f0      	movs	r2, #240	; 0xf0
 800a1ac:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 800a1ae:	4b19      	ldr	r3, [pc, #100]	; (800a214 <lcdSetOrientation+0xc8>)
 800a1b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a1b4:	805a      	strh	r2, [r3, #2]
			break;
 800a1b6:	e01c      	b.n	800a1f2 <lcdSetOrientation+0xa6>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 800a1b8:	4b19      	ldr	r3, [pc, #100]	; (800a220 <lcdSetOrientation+0xd4>)
 800a1ba:	781b      	ldrb	r3, [r3, #0]
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f000 f8b2 	bl	800a328 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 800a1c4:	4b13      	ldr	r3, [pc, #76]	; (800a214 <lcdSetOrientation+0xc8>)
 800a1c6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a1ca:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 800a1cc:	4b11      	ldr	r3, [pc, #68]	; (800a214 <lcdSetOrientation+0xc8>)
 800a1ce:	22f0      	movs	r2, #240	; 0xf0
 800a1d0:	805a      	strh	r2, [r3, #2]
			break;
 800a1d2:	e00e      	b.n	800a1f2 <lcdSetOrientation+0xa6>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 800a1d4:	4b13      	ldr	r3, [pc, #76]	; (800a224 <lcdSetOrientation+0xd8>)
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	b29b      	uxth	r3, r3
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 f8a4 	bl	800a328 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 800a1e0:	4b0c      	ldr	r3, [pc, #48]	; (800a214 <lcdSetOrientation+0xc8>)
 800a1e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800a1e6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 800a1e8:	4b0a      	ldr	r3, [pc, #40]	; (800a214 <lcdSetOrientation+0xc8>)
 800a1ea:	22f0      	movs	r2, #240	; 0xf0
 800a1ec:	805a      	strh	r2, [r3, #2]
			break;
 800a1ee:	e000      	b.n	800a1f2 <lcdSetOrientation+0xa6>
		default:
			break;
 800a1f0:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 800a1f2:	4b08      	ldr	r3, [pc, #32]	; (800a214 <lcdSetOrientation+0xc8>)
 800a1f4:	881b      	ldrh	r3, [r3, #0]
 800a1f6:	3b01      	subs	r3, #1
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	4b06      	ldr	r3, [pc, #24]	; (800a214 <lcdSetOrientation+0xc8>)
 800a1fc:	885b      	ldrh	r3, [r3, #2]
 800a1fe:	3b01      	subs	r3, #1
 800a200:	b29b      	uxth	r3, r3
 800a202:	2100      	movs	r1, #0
 800a204:	2000      	movs	r0, #0
 800a206:	f000 f829 	bl	800a25c <lcdSetWindow>
}
 800a20a:	bf00      	nop
 800a20c:	3708      	adds	r7, #8
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}
 800a212:	bf00      	nop
 800a214:	20000044 	.word	0x20000044
 800a218:	200002a0 	.word	0x200002a0
 800a21c:	200002a2 	.word	0x200002a2
 800a220:	200002a1 	.word	0x200002a1
 800a224:	200002a3 	.word	0x200002a3

0800a228 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 800a228:	b580      	push	{r7, lr}
 800a22a:	b082      	sub	sp, #8
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	4603      	mov	r3, r0
 800a230:	460a      	mov	r2, r1
 800a232:	80fb      	strh	r3, [r7, #6]
 800a234:	4613      	mov	r3, r2
 800a236:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 800a238:	4a07      	ldr	r2, [pc, #28]	; (800a258 <lcdSetCursor+0x30>)
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 800a23e:	4a06      	ldr	r2, [pc, #24]	; (800a258 <lcdSetCursor+0x30>)
 800a240:	88bb      	ldrh	r3, [r7, #4]
 800a242:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 800a244:	88bb      	ldrh	r3, [r7, #4]
 800a246:	88fa      	ldrh	r2, [r7, #6]
 800a248:	88b9      	ldrh	r1, [r7, #4]
 800a24a:	88f8      	ldrh	r0, [r7, #6]
 800a24c:	f000 f806 	bl	800a25c <lcdSetWindow>
}
 800a250:	bf00      	nop
 800a252:	3708      	adds	r7, #8
 800a254:	46bd      	mov	sp, r7
 800a256:	bd80      	pop	{r7, pc}
 800a258:	2000029c 	.word	0x2000029c

0800a25c <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 800a25c:	b590      	push	{r4, r7, lr}
 800a25e:	b083      	sub	sp, #12
 800a260:	af00      	add	r7, sp, #0
 800a262:	4604      	mov	r4, r0
 800a264:	4608      	mov	r0, r1
 800a266:	4611      	mov	r1, r2
 800a268:	461a      	mov	r2, r3
 800a26a:	4623      	mov	r3, r4
 800a26c:	80fb      	strh	r3, [r7, #6]
 800a26e:	4603      	mov	r3, r0
 800a270:	80bb      	strh	r3, [r7, #4]
 800a272:	460b      	mov	r3, r1
 800a274:	807b      	strh	r3, [r7, #2]
 800a276:	4613      	mov	r3, r2
 800a278:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 800a27a:	202a      	movs	r0, #42	; 0x2a
 800a27c:	f000 f844 	bl	800a308 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 800a280:	88fb      	ldrh	r3, [r7, #6]
 800a282:	0a1b      	lsrs	r3, r3, #8
 800a284:	b29b      	uxth	r3, r3
 800a286:	4618      	mov	r0, r3
 800a288:	f000 f84e 	bl	800a328 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 800a28c:	88fb      	ldrh	r3, [r7, #6]
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	b29b      	uxth	r3, r3
 800a292:	4618      	mov	r0, r3
 800a294:	f000 f848 	bl	800a328 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 800a298:	887b      	ldrh	r3, [r7, #2]
 800a29a:	0a1b      	lsrs	r3, r3, #8
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f000 f842 	bl	800a328 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 800a2a4:	887b      	ldrh	r3, [r7, #2]
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	b29b      	uxth	r3, r3
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f000 f83c 	bl	800a328 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 800a2b0:	202b      	movs	r0, #43	; 0x2b
 800a2b2:	f000 f829 	bl	800a308 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 800a2b6:	88bb      	ldrh	r3, [r7, #4]
 800a2b8:	0a1b      	lsrs	r3, r3, #8
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 f833 	bl	800a328 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 800a2c2:	88bb      	ldrh	r3, [r7, #4]
 800a2c4:	b2db      	uxtb	r3, r3
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 f82d 	bl	800a328 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 800a2ce:	883b      	ldrh	r3, [r7, #0]
 800a2d0:	0a1b      	lsrs	r3, r3, #8
 800a2d2:	b29b      	uxth	r3, r3
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f000 f827 	bl	800a328 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 800a2da:	883b      	ldrh	r3, [r7, #0]
 800a2dc:	b2db      	uxtb	r3, r3
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f000 f821 	bl	800a328 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 800a2e6:	202c      	movs	r0, #44	; 0x2c
 800a2e8:	f000 f80e 	bl	800a308 <lcdWriteCommand>
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd90      	pop	{r4, r7, pc}

0800a2f4 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 800a2f8:	2001      	movs	r0, #1
 800a2fa:	f000 f805 	bl	800a308 <lcdWriteCommand>
	HAL_Delay(50);
 800a2fe:	2032      	movs	r0, #50	; 0x32
 800a300:	f7fa fb14 	bl	800492c <HAL_Delay>
}
 800a304:	bf00      	nop
 800a306:	bd80      	pop	{r7, pc}

0800a308 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	4603      	mov	r3, r0
 800a310:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 800a312:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800a316:	79fa      	ldrb	r2, [r7, #7]
 800a318:	b292      	uxth	r2, r2
 800a31a:	801a      	strh	r2, [r3, #0]
}
 800a31c:	bf00      	nop
 800a31e:	370c      	adds	r7, #12
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 800a328:	b480      	push	{r7}
 800a32a:	b083      	sub	sp, #12
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	4603      	mov	r3, r0
 800a330:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 800a332:	4a04      	ldr	r2, [pc, #16]	; (800a344 <lcdWriteData+0x1c>)
 800a334:	88fb      	ldrh	r3, [r7, #6]
 800a336:	8013      	strh	r3, [r2, #0]
}
 800a338:	bf00      	nop
 800a33a:	370c      	adds	r7, #12
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	60080000 	.word	0x60080000

0800a348 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 800a348:	b490      	push	{r4, r7}
 800a34a:	b084      	sub	sp, #16
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	4604      	mov	r4, r0
 800a350:	4608      	mov	r0, r1
 800a352:	4611      	mov	r1, r2
 800a354:	461a      	mov	r2, r3
 800a356:	4623      	mov	r3, r4
 800a358:	71fb      	strb	r3, [r7, #7]
 800a35a:	4603      	mov	r3, r0
 800a35c:	71bb      	strb	r3, [r7, #6]
 800a35e:	460b      	mov	r3, r1
 800a360:	717b      	strb	r3, [r7, #5]
 800a362:	4613      	mov	r3, r2
 800a364:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 800a366:	2300      	movs	r3, #0
 800a368:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 800a36a:	7f3b      	ldrb	r3, [r7, #28]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <lcdBuildMemoryAccessControlConfig+0x30>
 800a370:	7bfb      	ldrb	r3, [r7, #15]
 800a372:	f043 0304 	orr.w	r3, r3, #4
 800a376:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 800a378:	7e3b      	ldrb	r3, [r7, #24]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d003      	beq.n	800a386 <lcdBuildMemoryAccessControlConfig+0x3e>
 800a37e:	7bfb      	ldrb	r3, [r7, #15]
 800a380:	f043 0308 	orr.w	r3, r3, #8
 800a384:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 800a386:	793b      	ldrb	r3, [r7, #4]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d003      	beq.n	800a394 <lcdBuildMemoryAccessControlConfig+0x4c>
 800a38c:	7bfb      	ldrb	r3, [r7, #15]
 800a38e:	f043 0310 	orr.w	r3, r3, #16
 800a392:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 800a394:	797b      	ldrb	r3, [r7, #5]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d003      	beq.n	800a3a2 <lcdBuildMemoryAccessControlConfig+0x5a>
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
 800a39c:	f043 0320 	orr.w	r3, r3, #32
 800a3a0:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 800a3a2:	79bb      	ldrb	r3, [r7, #6]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d003      	beq.n	800a3b0 <lcdBuildMemoryAccessControlConfig+0x68>
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ae:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 800a3b0:	79fb      	ldrb	r3, [r7, #7]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d003      	beq.n	800a3be <lcdBuildMemoryAccessControlConfig+0x76>
 800a3b6:	7bfb      	ldrb	r3, [r7, #15]
 800a3b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a3bc:	73fb      	strb	r3, [r7, #15]
  return value;
 800a3be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3710      	adds	r7, #16
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bc90      	pop	{r4, r7}
 800a3c8:	4770      	bx	lr
	...

0800a3cc <Read_RFID>:

SPI_HandleTypeDef hspi2;



uint8_t Read_RFID(int ADR){
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
	uint8_t TX_BF[1]={128};
 800a3d4:	2380      	movs	r3, #128	; 0x80
 800a3d6:	733b      	strb	r3, [r7, #12]
	uint8_t RX_BF[1]={0};
 800a3d8:	2300      	movs	r3, #0
 800a3da:	723b      	strb	r3, [r7, #8]
	TX_BF[0] +=(ADR<<1)&0x7E;
 800a3dc:	7b3a      	ldrb	r2, [r7, #12]
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	005b      	lsls	r3, r3, #1
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	4413      	add	r3, r2
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	733b      	strb	r3, [r7, #12]
	SPI_Sel(1);
 800a3f0:	4b0f      	ldr	r3, [pc, #60]	; (800a430 <Read_RFID+0x64>)
 800a3f2:	695b      	ldr	r3, [r3, #20]
 800a3f4:	4a0e      	ldr	r2, [pc, #56]	; (800a430 <Read_RFID+0x64>)
 800a3f6:	f023 0308 	bic.w	r3, r3, #8
 800a3fa:	6153      	str	r3, [r2, #20]


	HAL_SPI_Transmit(&hspi2,TX_BF,1,100);
 800a3fc:	f107 010c 	add.w	r1, r7, #12
 800a400:	2364      	movs	r3, #100	; 0x64
 800a402:	2201      	movs	r2, #1
 800a404:	480b      	ldr	r0, [pc, #44]	; (800a434 <Read_RFID+0x68>)
 800a406:	f7fd f9fa 	bl	80077fe <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,RX_BF,1,100);
 800a40a:	f107 0108 	add.w	r1, r7, #8
 800a40e:	2364      	movs	r3, #100	; 0x64
 800a410:	2201      	movs	r2, #1
 800a412:	4808      	ldr	r0, [pc, #32]	; (800a434 <Read_RFID+0x68>)
 800a414:	f7fd fb2f 	bl	8007a76 <HAL_SPI_Receive>



	SPI_Sel(0);
 800a418:	4b05      	ldr	r3, [pc, #20]	; (800a430 <Read_RFID+0x64>)
 800a41a:	695b      	ldr	r3, [r3, #20]
 800a41c:	4a04      	ldr	r2, [pc, #16]	; (800a430 <Read_RFID+0x64>)
 800a41e:	f043 0308 	orr.w	r3, r3, #8
 800a422:	6153      	str	r3, [r2, #20]
	return RX_BF[0];
 800a424:	7a3b      	ldrb	r3, [r7, #8]
}
 800a426:	4618      	mov	r0, r3
 800a428:	3710      	adds	r7, #16
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	40020400 	.word	0x40020400
 800a434:	20000414 	.word	0x20000414

0800a438 <Write_RFID>:

void Write_RFID(int ADR,int cmd)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
	uint8_t RX_BF[1]={0};
 800a442:	2300      	movs	r3, #0
 800a444:	733b      	strb	r3, [r7, #12]

	uint8_t TX_BF[2];

	TX_BF[0] = (ADR<<1)&0x7E;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	005b      	lsls	r3, r3, #1
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800a450:	b2db      	uxtb	r3, r3
 800a452:	723b      	strb	r3, [r7, #8]
	TX_BF[1] = cmd;
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	b2db      	uxtb	r3, r3
 800a458:	727b      	strb	r3, [r7, #9]
	SPI_Sel(1);
 800a45a:	4b0b      	ldr	r3, [pc, #44]	; (800a488 <Write_RFID+0x50>)
 800a45c:	695b      	ldr	r3, [r3, #20]
 800a45e:	4a0a      	ldr	r2, [pc, #40]	; (800a488 <Write_RFID+0x50>)
 800a460:	f023 0308 	bic.w	r3, r3, #8
 800a464:	6153      	str	r3, [r2, #20]
	HAL_SPI_Transmit(&hspi2,TX_BF,2,100);
 800a466:	f107 0108 	add.w	r1, r7, #8
 800a46a:	2364      	movs	r3, #100	; 0x64
 800a46c:	2202      	movs	r2, #2
 800a46e:	4807      	ldr	r0, [pc, #28]	; (800a48c <Write_RFID+0x54>)
 800a470:	f7fd f9c5 	bl	80077fe <HAL_SPI_Transmit>
	SPI_Sel(0);
 800a474:	4b04      	ldr	r3, [pc, #16]	; (800a488 <Write_RFID+0x50>)
 800a476:	695b      	ldr	r3, [r3, #20]
 800a478:	4a03      	ldr	r2, [pc, #12]	; (800a488 <Write_RFID+0x50>)
 800a47a:	f043 0308 	orr.w	r3, r3, #8
 800a47e:	6153      	str	r3, [r2, #20]
}
 800a480:	bf00      	nop
 800a482:	3710      	adds	r7, #16
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	40020400 	.word	0x40020400
 800a48c:	20000414 	.word	0x20000414

0800a490 <SetAntennaGain>:

void SetAntennaGain(uint8_t mask) {
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	4603      	mov	r3, r0
 800a498:	71fb      	strb	r3, [r7, #7]
	if ((Read_RFID(RFCfgReg) & 0x70) != mask) {						// only bother if there is a change
 800a49a:	2026      	movs	r0, #38	; 0x26
 800a49c:	f7ff ff96 	bl	800a3cc <Read_RFID>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a4a6:	79fb      	ldrb	r3, [r7, #7]
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	d004      	beq.n	800a4b6 <SetAntennaGain+0x26>
		Write_RFID(RFCfgReg, mask);	// only set RxGain[2:0] bits
 800a4ac:	79fb      	ldrb	r3, [r7, #7]
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	2026      	movs	r0, #38	; 0x26
 800a4b2:	f7ff ffc1 	bl	800a438 <Write_RFID>
	}
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
	...

0800a4c0 <Init_RFID>:

void Init_RFID()
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b082      	sub	sp, #8
 800a4c4:	af00      	add	r7, sp, #0
	printf("-------------------------RFID Initial Start-------------------------\r\n");
 800a4c6:	48a0      	ldr	r0, [pc, #640]	; (800a748 <Init_RFID+0x288>)
 800a4c8:	f002 f8fa 	bl	800c6c0 <puts>
	Reset_RFID();
 800a4cc:	f000 f970 	bl	800a7b0 <Reset_RFID>

	uint8_t ReadRegister=0;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	71fb      	strb	r3, [r7, #7]
	uint16_t Prescale=0;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	80bb      	strh	r3, [r7, #4]
	uint16_t Reload=0;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	807b      	strh	r3, [r7, #2]

	ReadRegister = Read_RFID(VersionReg);
 800a4dc:	2037      	movs	r0, #55	; 0x37
 800a4de:	f7ff ff75 	bl	800a3cc <Read_RFID>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	71fb      	strb	r3, [r7, #7]
	if((ReadRegister&0xF0)==0x90)	printf("MFRC522 version %d.0\r\n",ReadRegister&0x0F);
 800a4e6:	79fb      	ldrb	r3, [r7, #7]
 800a4e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4ec:	2b90      	cmp	r3, #144	; 0x90
 800a4ee:	d107      	bne.n	800a500 <Init_RFID+0x40>
 800a4f0:	79fb      	ldrb	r3, [r7, #7]
 800a4f2:	f003 030f 	and.w	r3, r3, #15
 800a4f6:	4619      	mov	r1, r3
 800a4f8:	4894      	ldr	r0, [pc, #592]	; (800a74c <Init_RFID+0x28c>)
 800a4fa:	f002 f85b 	bl	800c5b4 <iprintf>
 800a4fe:	e004      	b.n	800a50a <Init_RFID+0x4a>
	else printf("RC522 Read Failed, data : %x\r\n",ReadRegister);
 800a500:	79fb      	ldrb	r3, [r7, #7]
 800a502:	4619      	mov	r1, r3
 800a504:	4892      	ldr	r0, [pc, #584]	; (800a750 <Init_RFID+0x290>)
 800a506:	f002 f855 	bl	800c5b4 <iprintf>
	printf("--------------------------------------------------------------------\r\n");
 800a50a:	4892      	ldr	r0, [pc, #584]	; (800a754 <Init_RFID+0x294>)
 800a50c:	f002 f8d8 	bl	800c6c0 <puts>
	Write_RFID(TModeReg,0x80);  		//Timer mode setting
 800a510:	2180      	movs	r1, #128	; 0x80
 800a512:	202a      	movs	r0, #42	; 0x2a
 800a514:	f7ff ff90 	bl	800a438 <Write_RFID>

	// Timer auto Start, restart initial : disable
	ReadRegister = Read_RFID(TModeReg);
 800a518:	202a      	movs	r0, #42	; 0x2a
 800a51a:	f7ff ff57 	bl	800a3cc <Read_RFID>
 800a51e:	4603      	mov	r3, r0
 800a520:	71fb      	strb	r3, [r7, #7]
	if((ReadRegister&0x80)==0x80) printf("Timer Auto Start Mode    : Enable\r\n");
 800a522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a526:	2b00      	cmp	r3, #0
 800a528:	da03      	bge.n	800a532 <Init_RFID+0x72>
 800a52a:	488b      	ldr	r0, [pc, #556]	; (800a758 <Init_RFID+0x298>)
 800a52c:	f002 f8c8 	bl	800c6c0 <puts>
 800a530:	e002      	b.n	800a538 <Init_RFID+0x78>
	else 	printf("Timer Auto Start Mode    : Disable\r\n");
 800a532:	488a      	ldr	r0, [pc, #552]	; (800a75c <Init_RFID+0x29c>)
 800a534:	f002 f8c4 	bl	800c6c0 <puts>
	printf("Timer Gated modes        : %d\r\n",(ReadRegister>>5)&0x03); // 0 : non-gated mode
 800a538:	79fb      	ldrb	r3, [r7, #7]
 800a53a:	095b      	lsrs	r3, r3, #5
 800a53c:	b2db      	uxtb	r3, r3
 800a53e:	f003 0303 	and.w	r3, r3, #3
 800a542:	4619      	mov	r1, r3
 800a544:	4886      	ldr	r0, [pc, #536]	; (800a760 <Init_RFID+0x2a0>)
 800a546:	f002 f835 	bl	800c5b4 <iprintf>
	if((ReadRegister&0x10)==0x10) printf("Timer Auto Restart Mode  : Enable\r\n");
 800a54a:	79fb      	ldrb	r3, [r7, #7]
 800a54c:	f003 0310 	and.w	r3, r3, #16
 800a550:	2b00      	cmp	r3, #0
 800a552:	d003      	beq.n	800a55c <Init_RFID+0x9c>
 800a554:	4883      	ldr	r0, [pc, #524]	; (800a764 <Init_RFID+0x2a4>)
 800a556:	f002 f8b3 	bl	800c6c0 <puts>
 800a55a:	e002      	b.n	800a562 <Init_RFID+0xa2>
	else	printf("Timer Auto Restart Mode  : Disable\r\n");
 800a55c:	4882      	ldr	r0, [pc, #520]	; (800a768 <Init_RFID+0x2a8>)
 800a55e:	f002 f8af 	bl	800c6c0 <puts>
	Prescale = ((uint16_t)(ReadRegister&0x0F))<<8;
 800a562:	79fb      	ldrb	r3, [r7, #7]
 800a564:	021b      	lsls	r3, r3, #8
 800a566:	b29b      	uxth	r3, r3
 800a568:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a56c:	80bb      	strh	r3, [r7, #4]

	// f_timer = 13.56 MHz / (2*TPreScaler+1) where TPreScaler = [TPrescaler_Hi:TPrescaler_Lo].

	// Timer Prescale initial = 3328
	Write_RFID(TPrescalerReg, 0xA9);  //Timer Prescaler_low
 800a56e:	21a9      	movs	r1, #169	; 0xa9
 800a570:	202b      	movs	r0, #43	; 0x2b
 800a572:	f7ff ff61 	bl	800a438 <Write_RFID>
	ReadRegister = Read_RFID(TPrescalerReg);
 800a576:	202b      	movs	r0, #43	; 0x2b
 800a578:	f7ff ff28 	bl	800a3cc <Read_RFID>
 800a57c:	4603      	mov	r3, r0
 800a57e:	71fb      	strb	r3, [r7, #7]
	Prescale += ReadRegister;
 800a580:	79fb      	ldrb	r3, [r7, #7]
 800a582:	b29a      	uxth	r2, r3
 800a584:	88bb      	ldrh	r3, [r7, #4]
 800a586:	4413      	add	r3, r2
 800a588:	80bb      	strh	r3, [r7, #4]
	printf("Timer Prescale           : %d\r\n",Prescale);
 800a58a:	88bb      	ldrh	r3, [r7, #4]
 800a58c:	4619      	mov	r1, r3
 800a58e:	4877      	ldr	r0, [pc, #476]	; (800a76c <Init_RFID+0x2ac>)
 800a590:	f002 f810 	bl	800c5b4 <iprintf>

	// t_delay = (2*TPreScaler+1) * (TReload+1)/ 13.56 MHz

	// Timer Reload initial =0
	Write_RFID(TReloadRegH, 0x03);   	//Timer Reload Register 1
 800a594:	2103      	movs	r1, #3
 800a596:	202c      	movs	r0, #44	; 0x2c
 800a598:	f7ff ff4e 	bl	800a438 <Write_RFID>
	Write_RFID(TReloadRegL, 0xE7);		//Timer Reload Register 2
 800a59c:	21e7      	movs	r1, #231	; 0xe7
 800a59e:	202d      	movs	r0, #45	; 0x2d
 800a5a0:	f7ff ff4a 	bl	800a438 <Write_RFID>
	ReadRegister = Read_RFID(TReloadRegH);
 800a5a4:	202c      	movs	r0, #44	; 0x2c
 800a5a6:	f7ff ff11 	bl	800a3cc <Read_RFID>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	71fb      	strb	r3, [r7, #7]
	Reload = ((uint16_t)ReadRegister<<8);
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	021b      	lsls	r3, r3, #8
 800a5b4:	807b      	strh	r3, [r7, #2]
	ReadRegister = Read_RFID(TReloadRegL);
 800a5b6:	202d      	movs	r0, #45	; 0x2d
 800a5b8:	f7ff ff08 	bl	800a3cc <Read_RFID>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	71fb      	strb	r3, [r7, #7]
	Reload += ReadRegister;
 800a5c0:	79fb      	ldrb	r3, [r7, #7]
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	887b      	ldrh	r3, [r7, #2]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	807b      	strh	r3, [r7, #2]
	printf("Timer Reload Value       : %d\r\n",Reload);
 800a5ca:	887b      	ldrh	r3, [r7, #2]
 800a5cc:	4619      	mov	r1, r3
 800a5ce:	4868      	ldr	r0, [pc, #416]	; (800a770 <Init_RFID+0x2b0>)
 800a5d0:	f001 fff0 	bl	800c5b4 <iprintf>
	printf("Total delay time         : (2*%d+1)*(%d+1)/13.56Mhz = %dms\r\n",Prescale,Reload,(Prescale*2+1)*(Reload+1)/13560);
 800a5d4:	88b9      	ldrh	r1, [r7, #4]
 800a5d6:	8878      	ldrh	r0, [r7, #2]
 800a5d8:	88bb      	ldrh	r3, [r7, #4]
 800a5da:	005b      	lsls	r3, r3, #1
 800a5dc:	3301      	adds	r3, #1
 800a5de:	887a      	ldrh	r2, [r7, #2]
 800a5e0:	3201      	adds	r2, #1
 800a5e2:	fb02 f303 	mul.w	r3, r2, r3
 800a5e6:	4a63      	ldr	r2, [pc, #396]	; (800a774 <Init_RFID+0x2b4>)
 800a5e8:	fb82 c203 	smull	ip, r2, r2, r3
 800a5ec:	1312      	asrs	r2, r2, #12
 800a5ee:	17db      	asrs	r3, r3, #31
 800a5f0:	1ad3      	subs	r3, r2, r3
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	4860      	ldr	r0, [pc, #384]	; (800a778 <Init_RFID+0x2b8>)
 800a5f6:	f001 ffdd 	bl	800c5b4 <iprintf>
	// TxASKReg Default  = 0
	Write_RFID(TxASKReg, 0x40);		//Reader to card 100 % ASK, Miller encoded, transfer speed 106 kBd to 848 kBd.
 800a5fa:	2140      	movs	r1, #64	; 0x40
 800a5fc:	2015      	movs	r0, #21
 800a5fe:	f7ff ff1b 	bl	800a438 <Write_RFID>
	ReadRegister = Read_RFID(TxASKReg);
 800a602:	2015      	movs	r0, #21
 800a604:	f7ff fee2 	bl	800a3cc <Read_RFID>
 800a608:	4603      	mov	r3, r0
 800a60a:	71fb      	strb	r3, [r7, #7]
	if(ReadRegister==0) printf("Control Transmit Setting : Disable\r\n");
 800a60c:	79fb      	ldrb	r3, [r7, #7]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d103      	bne.n	800a61a <Init_RFID+0x15a>
 800a612:	485a      	ldr	r0, [pc, #360]	; (800a77c <Init_RFID+0x2bc>)
 800a614:	f002 f854 	bl	800c6c0 <puts>
 800a618:	e002      	b.n	800a620 <Init_RFID+0x160>
	else printf("Control Transmit Setting : forces a 100 Percent ASK modulation\r\n");
 800a61a:	4859      	ldr	r0, [pc, #356]	; (800a780 <Init_RFID+0x2c0>)
 800a61c:	f002 f850 	bl	800c6c0 <puts>

	// ModeReg Default = 3F
	Write_RFID(ModeReg, 0x3D); //Set the preset value for the CRC coprocessor for the CalcCRC command to 0x6363 (ISO 14443-3 part 6.2.4)
 800a620:	213d      	movs	r1, #61	; 0x3d
 800a622:	2011      	movs	r0, #17
 800a624:	f7ff ff08 	bl	800a438 <Write_RFID>
	ReadRegister = Read_RFID(ModeReg);
 800a628:	2011      	movs	r0, #17
 800a62a:	f7ff fecf 	bl	800a3cc <Read_RFID>
 800a62e:	4603      	mov	r3, r0
 800a630:	71fb      	strb	r3, [r7, #7]
	if((ReadRegister&0x03)==0x01) printf("CRC Preset Value         : 6363h\r\n");
 800a632:	79fb      	ldrb	r3, [r7, #7]
 800a634:	f003 0303 	and.w	r3, r3, #3
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d103      	bne.n	800a644 <Init_RFID+0x184>
 800a63c:	4851      	ldr	r0, [pc, #324]	; (800a784 <Init_RFID+0x2c4>)
 800a63e:	f002 f83f 	bl	800c6c0 <puts>
 800a642:	e019      	b.n	800a678 <Init_RFID+0x1b8>
	else if((ReadRegister&0x03)==0x02) printf("CRC Preset Value         : A671h\r\n");
 800a644:	79fb      	ldrb	r3, [r7, #7]
 800a646:	f003 0303 	and.w	r3, r3, #3
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d103      	bne.n	800a656 <Init_RFID+0x196>
 800a64e:	484e      	ldr	r0, [pc, #312]	; (800a788 <Init_RFID+0x2c8>)
 800a650:	f002 f836 	bl	800c6c0 <puts>
 800a654:	e010      	b.n	800a678 <Init_RFID+0x1b8>
	else if((ReadRegister&0x03)==0x03) printf("CRC Preset Value         : FFFFh\r\n");
 800a656:	79fb      	ldrb	r3, [r7, #7]
 800a658:	f003 0303 	and.w	r3, r3, #3
 800a65c:	2b03      	cmp	r3, #3
 800a65e:	d103      	bne.n	800a668 <Init_RFID+0x1a8>
 800a660:	484a      	ldr	r0, [pc, #296]	; (800a78c <Init_RFID+0x2cc>)
 800a662:	f002 f82d 	bl	800c6c0 <puts>
 800a666:	e007      	b.n	800a678 <Init_RFID+0x1b8>
	else if((ReadRegister&0x03)==0x00) printf("CRC Preset Value         : 0000h\r\n");
 800a668:	79fb      	ldrb	r3, [r7, #7]
 800a66a:	f003 0303 	and.w	r3, r3, #3
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d102      	bne.n	800a678 <Init_RFID+0x1b8>
 800a672:	4847      	ldr	r0, [pc, #284]	; (800a790 <Init_RFID+0x2d0>)
 800a674:	f002 f824 	bl	800c6c0 <puts>
	printf("--------------------------------------------------------------------\r\n");
 800a678:	4836      	ldr	r0, [pc, #216]	; (800a754 <Init_RFID+0x294>)
 800a67a:	f002 f821 	bl	800c6c0 <puts>

	SetAntennaGain(RxGain_48dB);
 800a67e:	2070      	movs	r0, #112	; 0x70
 800a680:	f7ff ff06 	bl	800a490 <SetAntennaGain>
	AntennaOn_RFID();
 800a684:	f000 f8ca 	bl	800a81c <AntennaOn_RFID>
	ReadRegister=Read_RFID(RFCfgReg);
 800a688:	2026      	movs	r0, #38	; 0x26
 800a68a:	f7ff fe9f 	bl	800a3cc <Read_RFID>
 800a68e:	4603      	mov	r3, r0
 800a690:	71fb      	strb	r3, [r7, #7]
	if((ReadRegister&0x70)==0x00) 	 printf("Rx Gain              : 18dB\r\n");
 800a692:	79fb      	ldrb	r3, [r7, #7]
 800a694:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d103      	bne.n	800a6a4 <Init_RFID+0x1e4>
 800a69c:	483d      	ldr	r0, [pc, #244]	; (800a794 <Init_RFID+0x2d4>)
 800a69e:	f002 f80f 	bl	800c6c0 <puts>
 800a6a2:	e03d      	b.n	800a720 <Init_RFID+0x260>
	else if((ReadRegister&0x70)==0x10) printf("Rx Gain              : 23dB\r\n");
 800a6a4:	79fb      	ldrb	r3, [r7, #7]
 800a6a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6aa:	2b10      	cmp	r3, #16
 800a6ac:	d103      	bne.n	800a6b6 <Init_RFID+0x1f6>
 800a6ae:	483a      	ldr	r0, [pc, #232]	; (800a798 <Init_RFID+0x2d8>)
 800a6b0:	f002 f806 	bl	800c6c0 <puts>
 800a6b4:	e034      	b.n	800a720 <Init_RFID+0x260>
	else if((ReadRegister&0x70)==0x20) printf("Rx Gain              : 18dB\r\n");
 800a6b6:	79fb      	ldrb	r3, [r7, #7]
 800a6b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6bc:	2b20      	cmp	r3, #32
 800a6be:	d103      	bne.n	800a6c8 <Init_RFID+0x208>
 800a6c0:	4834      	ldr	r0, [pc, #208]	; (800a794 <Init_RFID+0x2d4>)
 800a6c2:	f001 fffd 	bl	800c6c0 <puts>
 800a6c6:	e02b      	b.n	800a720 <Init_RFID+0x260>
	else if((ReadRegister&0x70)==0x30) printf("Rx Gain              : 23dB\r\n");
 800a6c8:	79fb      	ldrb	r3, [r7, #7]
 800a6ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6ce:	2b30      	cmp	r3, #48	; 0x30
 800a6d0:	d103      	bne.n	800a6da <Init_RFID+0x21a>
 800a6d2:	4831      	ldr	r0, [pc, #196]	; (800a798 <Init_RFID+0x2d8>)
 800a6d4:	f001 fff4 	bl	800c6c0 <puts>
 800a6d8:	e022      	b.n	800a720 <Init_RFID+0x260>
	else if((ReadRegister&0x70)==0x40) printf("Rx Gain              : 33dB\r\n");
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6e0:	2b40      	cmp	r3, #64	; 0x40
 800a6e2:	d103      	bne.n	800a6ec <Init_RFID+0x22c>
 800a6e4:	482d      	ldr	r0, [pc, #180]	; (800a79c <Init_RFID+0x2dc>)
 800a6e6:	f001 ffeb 	bl	800c6c0 <puts>
 800a6ea:	e019      	b.n	800a720 <Init_RFID+0x260>
	else if((ReadRegister&0x70)==0x50) printf("Rx Gain              : 38dB\r\n");
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a6f2:	2b50      	cmp	r3, #80	; 0x50
 800a6f4:	d103      	bne.n	800a6fe <Init_RFID+0x23e>
 800a6f6:	482a      	ldr	r0, [pc, #168]	; (800a7a0 <Init_RFID+0x2e0>)
 800a6f8:	f001 ffe2 	bl	800c6c0 <puts>
 800a6fc:	e010      	b.n	800a720 <Init_RFID+0x260>
	else if((ReadRegister&0x70)==0x60) printf("Rx Gain              : 43dB\r\n");
 800a6fe:	79fb      	ldrb	r3, [r7, #7]
 800a700:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a704:	2b60      	cmp	r3, #96	; 0x60
 800a706:	d103      	bne.n	800a710 <Init_RFID+0x250>
 800a708:	4826      	ldr	r0, [pc, #152]	; (800a7a4 <Init_RFID+0x2e4>)
 800a70a:	f001 ffd9 	bl	800c6c0 <puts>
 800a70e:	e007      	b.n	800a720 <Init_RFID+0x260>
	else if((ReadRegister&0x70)==0x70) printf("Rx Gain              : 48dB\r\n");
 800a710:	79fb      	ldrb	r3, [r7, #7]
 800a712:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a716:	2b70      	cmp	r3, #112	; 0x70
 800a718:	d102      	bne.n	800a720 <Init_RFID+0x260>
 800a71a:	4823      	ldr	r0, [pc, #140]	; (800a7a8 <Init_RFID+0x2e8>)
 800a71c:	f001 ffd0 	bl	800c6c0 <puts>

	ReadRegister = Read_RFID(TxControlReg);
 800a720:	2014      	movs	r0, #20
 800a722:	f7ff fe53 	bl	800a3cc <Read_RFID>
 800a726:	4603      	mov	r3, r0
 800a728:	71fb      	strb	r3, [r7, #7]
	if((ReadRegister&0x03)== 0x03) printf("Antenna is on\r\n");
 800a72a:	79fb      	ldrb	r3, [r7, #7]
 800a72c:	f003 0303 	and.w	r3, r3, #3
 800a730:	2b03      	cmp	r3, #3
 800a732:	d102      	bne.n	800a73a <Init_RFID+0x27a>
 800a734:	481d      	ldr	r0, [pc, #116]	; (800a7ac <Init_RFID+0x2ec>)
 800a736:	f001 ffc3 	bl	800c6c0 <puts>
	printf("--------------------------------------------------------------------\r\n");
 800a73a:	4806      	ldr	r0, [pc, #24]	; (800a754 <Init_RFID+0x294>)
 800a73c:	f001 ffc0 	bl	800c6c0 <puts>
}
 800a740:	bf00      	nop
 800a742:	3708      	adds	r7, #8
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	08010890 	.word	0x08010890
 800a74c:	080108d8 	.word	0x080108d8
 800a750:	080108f0 	.word	0x080108f0
 800a754:	08010910 	.word	0x08010910
 800a758:	08010958 	.word	0x08010958
 800a75c:	0801097c 	.word	0x0801097c
 800a760:	080109a0 	.word	0x080109a0
 800a764:	080109c0 	.word	0x080109c0
 800a768:	080109e4 	.word	0x080109e4
 800a76c:	08010a08 	.word	0x08010a08
 800a770:	08010a28 	.word	0x08010a28
 800a774:	4d542005 	.word	0x4d542005
 800a778:	08010a48 	.word	0x08010a48
 800a77c:	08010a88 	.word	0x08010a88
 800a780:	08010aac 	.word	0x08010aac
 800a784:	08010aec 	.word	0x08010aec
 800a788:	08010b10 	.word	0x08010b10
 800a78c:	08010b34 	.word	0x08010b34
 800a790:	08010b58 	.word	0x08010b58
 800a794:	08010b7c 	.word	0x08010b7c
 800a798:	08010b9c 	.word	0x08010b9c
 800a79c:	08010bbc 	.word	0x08010bbc
 800a7a0:	08010bdc 	.word	0x08010bdc
 800a7a4:	08010bfc 	.word	0x08010bfc
 800a7a8:	08010c1c 	.word	0x08010c1c
 800a7ac:	08010c3c 	.word	0x08010c3c

0800a7b0 <Reset_RFID>:

void Reset_RFID()
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
	Read_RFID(CommandReg); 		//reset
 800a7b6:	2001      	movs	r0, #1
 800a7b8:	f7ff fe08 	bl	800a3cc <Read_RFID>
	Write_RFID(CommandReg,PCD_CMD_SoftReset); 		//reset
 800a7bc:	210f      	movs	r1, #15
 800a7be:	2001      	movs	r0, #1
 800a7c0:	f7ff fe3a 	bl	800a438 <Write_RFID>
	for(int i=0;i<3;i++){
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	607b      	str	r3, [r7, #4]
 800a7c8:	e012      	b.n	800a7f0 <Reset_RFID+0x40>
		if((Read_RFID(CommandReg)&0x10)==0x10)
 800a7ca:	2001      	movs	r0, #1
 800a7cc:	f7ff fdfe 	bl	800a3cc <Read_RFID>
 800a7d0:	4603      	mov	r3, r0
 800a7d2:	f003 0310 	and.w	r3, r3, #16
 800a7d6:	2b10      	cmp	r3, #16
 800a7d8:	d103      	bne.n	800a7e2 <Reset_RFID+0x32>
			printf("SoftRest ing...\n\r");
 800a7da:	480e      	ldr	r0, [pc, #56]	; (800a814 <Reset_RFID+0x64>)
 800a7dc:	f001 feea 	bl	800c5b4 <iprintf>
 800a7e0:	e003      	b.n	800a7ea <Reset_RFID+0x3a>
		else {
			printf("SoftRest End\n\r");
 800a7e2:	480d      	ldr	r0, [pc, #52]	; (800a818 <Reset_RFID+0x68>)
 800a7e4:	f001 fee6 	bl	800c5b4 <iprintf>
			return;
 800a7e8:	e011      	b.n	800a80e <Reset_RFID+0x5e>
	for(int i=0;i<3;i++){
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	3301      	adds	r3, #1
 800a7ee:	607b      	str	r3, [r7, #4]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2b02      	cmp	r3, #2
 800a7f4:	dde9      	ble.n	800a7ca <Reset_RFID+0x1a>
		}

	}

	// Reset baud rates
	Write_RFID(TxModeReg, 0x00); // reset value: 00h
 800a7f6:	2100      	movs	r1, #0
 800a7f8:	2012      	movs	r0, #18
 800a7fa:	f7ff fe1d 	bl	800a438 <Write_RFID>
	Write_RFID(RxModeReg, 0x00); // reset value: 00h
 800a7fe:	2100      	movs	r1, #0
 800a800:	2013      	movs	r0, #19
 800a802:	f7ff fe19 	bl	800a438 <Write_RFID>
	// Reset ModWidthReg
	Write_RFID(ModWidthReg, 0x26); // reset value: 26h
 800a806:	2126      	movs	r1, #38	; 0x26
 800a808:	2024      	movs	r0, #36	; 0x24
 800a80a:	f7ff fe15 	bl	800a438 <Write_RFID>
}
 800a80e:	3708      	adds	r7, #8
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	08010c4c 	.word	0x08010c4c
 800a818:	08010c60 	.word	0x08010c60

0800a81c <AntennaOn_RFID>:

void AntennaOn_RFID()
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
	uint8_t value = Read_RFID(TxControlReg);
 800a822:	2014      	movs	r0, #20
 800a824:	f7ff fdd2 	bl	800a3cc <Read_RFID>
 800a828:	4603      	mov	r3, r0
 800a82a:	71fb      	strb	r3, [r7, #7]
	if ((value & 0x03) != 0x03) {
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	f003 0303 	and.w	r3, r3, #3
 800a832:	2b03      	cmp	r3, #3
 800a834:	d003      	beq.n	800a83e <AntennaOn_RFID+0x22>
		SetRegisterBit_RFID(TxControlReg,0x03);
 800a836:	2103      	movs	r1, #3
 800a838:	2014      	movs	r0, #20
 800a83a:	f000 f804 	bl	800a846 <SetRegisterBit_RFID>
	}
}
 800a83e:	bf00      	nop
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <SetRegisterBit_RFID>:
void AntennaOff_RFID()
{
	ClearRegisterBit_RFID(TxControlReg, 0x03);
}

void SetRegisterBit_RFID(uint8_t reg,uint8_t mask) {
 800a846:	b580      	push	{r7, lr}
 800a848:	b084      	sub	sp, #16
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	4603      	mov	r3, r0
 800a84e:	460a      	mov	r2, r1
 800a850:	71fb      	strb	r3, [r7, #7]
 800a852:	4613      	mov	r3, r2
 800a854:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	tmp = Read_RFID(reg);
 800a856:	79fb      	ldrb	r3, [r7, #7]
 800a858:	4618      	mov	r0, r3
 800a85a:	f7ff fdb7 	bl	800a3cc <Read_RFID>
 800a85e:	4603      	mov	r3, r0
 800a860:	73fb      	strb	r3, [r7, #15]
	Write_RFID(reg, tmp | mask);
 800a862:	79f8      	ldrb	r0, [r7, #7]
 800a864:	7bfa      	ldrb	r2, [r7, #15]
 800a866:	79bb      	ldrb	r3, [r7, #6]
 800a868:	4313      	orrs	r3, r2
 800a86a:	b2db      	uxtb	r3, r3
 800a86c:	4619      	mov	r1, r3
 800a86e:	f7ff fde3 	bl	800a438 <Write_RFID>
}
 800a872:	bf00      	nop
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}

0800a87a <ClearRegisterBit_RFID>:

void ClearRegisterBit_RFID(uint8_t reg,uint8_t mask) {
 800a87a:	b580      	push	{r7, lr}
 800a87c:	b084      	sub	sp, #16
 800a87e:	af00      	add	r7, sp, #0
 800a880:	4603      	mov	r3, r0
 800a882:	460a      	mov	r2, r1
 800a884:	71fb      	strb	r3, [r7, #7]
 800a886:	4613      	mov	r3, r2
 800a888:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
	tmp = Read_RFID(reg);
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	4618      	mov	r0, r3
 800a88e:	f7ff fd9d 	bl	800a3cc <Read_RFID>
 800a892:	4603      	mov	r3, r0
 800a894:	73fb      	strb	r3, [r7, #15]
	Write_RFID(reg, tmp & (~mask));
 800a896:	79f8      	ldrb	r0, [r7, #7]
 800a898:	7bfa      	ldrb	r2, [r7, #15]
 800a89a:	79bb      	ldrb	r3, [r7, #6]
 800a89c:	43db      	mvns	r3, r3
 800a89e:	4013      	ands	r3, r2
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	f7ff fdc9 	bl	800a438 <Write_RFID>
}
 800a8a6:	bf00      	nop
 800a8a8:	3710      	adds	r7, #16
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <CalulateCRC>:



void CalulateCRC(uint8_t *pIndata,uint8_t len,uint8_t *pOutData)
{
 800a8ae:	b590      	push	{r4, r7, lr}
 800a8b0:	b087      	sub	sp, #28
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	60f8      	str	r0, [r7, #12]
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	607a      	str	r2, [r7, #4]
 800a8ba:	72fb      	strb	r3, [r7, #11]
	uint8_t i,n;
	ClearRegisterBit_RFID(DivIrqReg,0x04);
 800a8bc:	2104      	movs	r1, #4
 800a8be:	2005      	movs	r0, #5
 800a8c0:	f7ff ffdb 	bl	800a87a <ClearRegisterBit_RFID>
	Write_RFID(CommandReg,PCD_CMD_Idle);
 800a8c4:	2100      	movs	r1, #0
 800a8c6:	2001      	movs	r0, #1
 800a8c8:	f7ff fdb6 	bl	800a438 <Write_RFID>
	SetRegisterBit_RFID(FIFOLevelReg,0x80);//
 800a8cc:	2180      	movs	r1, #128	; 0x80
 800a8ce:	200a      	movs	r0, #10
 800a8d0:	f7ff ffb9 	bl	800a846 <SetRegisterBit_RFID>
	for (i=0; i<len; i++)
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	75fb      	strb	r3, [r7, #23]
 800a8d8:	e00a      	b.n	800a8f0 <CalulateCRC+0x42>
	{   Write_RFID(FIFODataReg, *(pIndata+i));   }
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	4413      	add	r3, r2
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	2009      	movs	r0, #9
 800a8e6:	f7ff fda7 	bl	800a438 <Write_RFID>
	for (i=0; i<len; i++)
 800a8ea:	7dfb      	ldrb	r3, [r7, #23]
 800a8ec:	3301      	adds	r3, #1
 800a8ee:	75fb      	strb	r3, [r7, #23]
 800a8f0:	7dfa      	ldrb	r2, [r7, #23]
 800a8f2:	7afb      	ldrb	r3, [r7, #11]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d3f0      	bcc.n	800a8da <CalulateCRC+0x2c>
	Write_RFID(CommandReg, PCD_CMD_CalcCRC);
 800a8f8:	2103      	movs	r1, #3
 800a8fa:	2001      	movs	r0, #1
 800a8fc:	f7ff fd9c 	bl	800a438 <Write_RFID>
	i = 0xFF;
 800a900:	23ff      	movs	r3, #255	; 0xff
 800a902:	75fb      	strb	r3, [r7, #23]
	do
	{
		n = Read_RFID(DivIrqReg);
 800a904:	2005      	movs	r0, #5
 800a906:	f7ff fd61 	bl	800a3cc <Read_RFID>
 800a90a:	4603      	mov	r3, r0
 800a90c:	75bb      	strb	r3, [r7, #22]
		i--;
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
 800a910:	3b01      	subs	r3, #1
 800a912:	75fb      	strb	r3, [r7, #23]
	}
	while ((i!=0) && !(n&0x04));
 800a914:	7dfb      	ldrb	r3, [r7, #23]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d004      	beq.n	800a924 <CalulateCRC+0x76>
 800a91a:	7dbb      	ldrb	r3, [r7, #22]
 800a91c:	f003 0304 	and.w	r3, r3, #4
 800a920:	2b00      	cmp	r3, #0
 800a922:	d0ef      	beq.n	800a904 <CalulateCRC+0x56>
	pOutData[0] = Read_RFID(CRCResultRegL);
 800a924:	2022      	movs	r0, #34	; 0x22
 800a926:	f7ff fd51 	bl	800a3cc <Read_RFID>
 800a92a:	4603      	mov	r3, r0
 800a92c:	461a      	mov	r2, r3
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	701a      	strb	r2, [r3, #0]
	pOutData[1] = Read_RFID(CRCResultRegH);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	1c5c      	adds	r4, r3, #1
 800a936:	2021      	movs	r0, #33	; 0x21
 800a938:	f7ff fd48 	bl	800a3cc <Read_RFID>
 800a93c:	4603      	mov	r3, r0
 800a93e:	7023      	strb	r3, [r4, #0]
}
 800a940:	bf00      	nop
 800a942:	371c      	adds	r7, #28
 800a944:	46bd      	mov	sp, r7
 800a946:	bd90      	pop	{r4, r7, pc}

0800a948 <Comunicate_PCDPICC>:

	return status;
}

StatusCode Comunicate_PCDPICC(uint8_t Command ,uint8_t *pInData ,uint8_t InLenByte,uint8_t *pOutData,uint8_t *pOutLenBit)
{
 800a948:	b590      	push	{r4, r7, lr}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60b9      	str	r1, [r7, #8]
 800a950:	607b      	str	r3, [r7, #4]
 800a952:	4603      	mov	r3, r0
 800a954:	73fb      	strb	r3, [r7, #15]
 800a956:	4613      	mov	r3, r2
 800a958:	73bb      	strb	r3, [r7, #14]
	StatusCode status = STATUS_ERROR;
 800a95a:	2301      	movs	r3, #1
 800a95c:	74fb      	strb	r3, [r7, #19]
	//	uint8_t irqEn   = 0x00;
	uint8_t waitFor = 0x00;
 800a95e:	2300      	movs	r3, #0
 800a960:	75fb      	strb	r3, [r7, #23]
	uint8_t lastBits= 0;
 800a962:	2300      	movs	r3, #0
 800a964:	74bb      	strb	r3, [r7, #18]
	uint8_t n=0;
 800a966:	2300      	movs	r3, #0
 800a968:	75bb      	strb	r3, [r7, #22]
	uint16_t i=0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	82bb      	strh	r3, [r7, #20]

	switch (Command){
 800a96e:	7bfb      	ldrb	r3, [r7, #15]
 800a970:	2b0c      	cmp	r3, #12
 800a972:	d004      	beq.n	800a97e <Comunicate_PCDPICC+0x36>
 800a974:	2b0e      	cmp	r3, #14
 800a976:	d105      	bne.n	800a984 <Comunicate_PCDPICC+0x3c>
	case PCD_CMD_MFAuthent:
		//			irqEn   = 0x12;
		waitFor = 0x10;	//IdleIRQ
 800a978:	2310      	movs	r3, #16
 800a97a:	75fb      	strb	r3, [r7, #23]
		break;
 800a97c:	e004      	b.n	800a988 <Comunicate_PCDPICC+0x40>
	case PCD_CMD_Transceive:
		//			irqEn   = 0x77;
		waitFor = 0x30; //IdleIRQ,RXIRQ
 800a97e:	2330      	movs	r3, #48	; 0x30
 800a980:	75fb      	strb	r3, [r7, #23]
		break;
 800a982:	e001      	b.n	800a988 <Comunicate_PCDPICC+0x40>
	default:
		return STATUS_CMD_WRONG;
 800a984:	230a      	movs	r3, #10
 800a986:	e0c6      	b.n	800ab16 <Comunicate_PCDPICC+0x1ce>
		break;
	}

	Write_RFID(CommandReg,PCD_CMD_Idle);							// Stop any active command.
 800a988:	2100      	movs	r1, #0
 800a98a:	2001      	movs	r0, #1
 800a98c:	f7ff fd54 	bl	800a438 <Write_RFID>
	ClearRegisterBit_RFID(ComIrqReg, 0x80);						    // Clear all seven interrupt request bits
 800a990:	2180      	movs	r1, #128	; 0x80
 800a992:	2004      	movs	r0, #4
 800a994:	f7ff ff71 	bl	800a87a <ClearRegisterBit_RFID>
	SetRegisterBit_RFID(FIFOLevelReg,0x80);	 					// FlushBuffer = 1, FIFO initialization
 800a998:	2180      	movs	r1, #128	; 0x80
 800a99a:	200a      	movs	r0, #10
 800a99c:	f7ff ff53 	bl	800a846 <SetRegisterBit_RFID>
	for(i=0; i<InLenByte; i++)	Write_RFID(FIFODataReg,pInData[i]); // Write sendData to the FIFO
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	82bb      	strh	r3, [r7, #20]
 800a9a4:	e00a      	b.n	800a9bc <Comunicate_PCDPICC+0x74>
 800a9a6:	8abb      	ldrh	r3, [r7, #20]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	2009      	movs	r0, #9
 800a9b2:	f7ff fd41 	bl	800a438 <Write_RFID>
 800a9b6:	8abb      	ldrh	r3, [r7, #20]
 800a9b8:	3301      	adds	r3, #1
 800a9ba:	82bb      	strh	r3, [r7, #20]
 800a9bc:	7bbb      	ldrb	r3, [r7, #14]
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	8aba      	ldrh	r2, [r7, #20]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d3ef      	bcc.n	800a9a6 <Comunicate_PCDPICC+0x5e>

	//Write_RFID(ComIEnReg,irqEn|0x80); //�������� ���� Ȯ�� �ʿ�

	Write_RFID(CommandReg, Command);								//Command execute
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	f7ff fd34 	bl	800a438 <Write_RFID>

	if(Command == PCD_CMD_Transceive) SetRegisterBit_RFID(BitFramingReg,0x80);
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
 800a9d2:	2b0c      	cmp	r3, #12
 800a9d4:	d103      	bne.n	800a9de <Comunicate_PCDPICC+0x96>
 800a9d6:	2180      	movs	r1, #128	; 0x80
 800a9d8:	200d      	movs	r0, #13
 800a9da:	f7ff ff34 	bl	800a846 <SetRegisterBit_RFID>
	//Each transmit process must be started by setting the BitFramingReg register��s StartSend bit(7bit) to logic 1

	i = 2000; //
 800a9de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a9e2:	82bb      	strh	r3, [r7, #20]
	do
	{
		n = Read_RFID(ComIrqReg);
 800a9e4:	2004      	movs	r0, #4
 800a9e6:	f7ff fcf1 	bl	800a3cc <Read_RFID>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	75bb      	strb	r3, [r7, #22]
		i--;
 800a9ee:	8abb      	ldrh	r3, [r7, #20]
 800a9f0:	3b01      	subs	r3, #1
 800a9f2:	82bb      	strh	r3, [r7, #20]
	}
	while((i!=0)&&!(n&0x01)&&!(n&waitFor));							//  WaitFor is success...
 800a9f4:	8abb      	ldrh	r3, [r7, #20]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d00a      	beq.n	800aa10 <Comunicate_PCDPICC+0xc8>
 800a9fa:	7dbb      	ldrb	r3, [r7, #22]
 800a9fc:	f003 0301 	and.w	r3, r3, #1
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d105      	bne.n	800aa10 <Comunicate_PCDPICC+0xc8>
 800aa04:	7dba      	ldrb	r2, [r7, #22]
 800aa06:	7dfb      	ldrb	r3, [r7, #23]
 800aa08:	4013      	ands	r3, r2
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d0e9      	beq.n	800a9e4 <Comunicate_PCDPICC+0x9c>

	uint8_t err =Read_RFID(ErrorReg);
 800aa10:	2006      	movs	r0, #6
 800aa12:	f7ff fcdb 	bl	800a3cc <Read_RFID>
 800aa16:	4603      	mov	r3, r0
 800aa18:	747b      	strb	r3, [r7, #17]

	if (n&0x01)
 800aa1a:	7dbb      	ldrb	r3, [r7, #22]
 800aa1c:	f003 0301 	and.w	r3, r3, #1
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d001      	beq.n	800aa28 <Comunicate_PCDPICC+0xe0>
		return STATUS_TIMEOUT;								// TimerIRQ Flg Timeout
 800aa24:	2303      	movs	r3, #3
 800aa26:	e076      	b.n	800ab16 <Comunicate_PCDPICC+0x1ce>
	if (i==0)
 800aa28:	8abb      	ldrh	r3, [r7, #20]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <Comunicate_PCDPICC+0xea>
		return STATUS_TIMEOUT;								// do ~ while Timeout
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e071      	b.n	800ab16 <Comunicate_PCDPICC+0x1ce>
	else{
		if(!(err&0x1B))	{
 800aa32:	7c7b      	ldrb	r3, [r7, #17]
 800aa34:	f003 031b 	and.w	r3, r3, #27
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d149      	bne.n	800aad0 <Comunicate_PCDPICC+0x188>
			status = STATUS_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	74fb      	strb	r3, [r7, #19]

			if(Command == PCD_CMD_Transceive)  {
 800aa40:	7bfb      	ldrb	r3, [r7, #15]
 800aa42:	2b0c      	cmp	r3, #12
 800aa44:	d166      	bne.n	800ab14 <Comunicate_PCDPICC+0x1cc>
				n = Read_RFID(FIFOLevelReg);						// number of Bytes in FIFO Buffer
 800aa46:	200a      	movs	r0, #10
 800aa48:	f7ff fcc0 	bl	800a3cc <Read_RFID>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	75bb      	strb	r3, [r7, #22]
				lastBits = Read_RFID(ControlReg)&0x07; 				// RxLastBits[2:0]
 800aa50:	200c      	movs	r0, #12
 800aa52:	f7ff fcbb 	bl	800a3cc <Read_RFID>
 800aa56:	4603      	mov	r3, r0
 800aa58:	f003 0307 	and.w	r3, r3, #7
 800aa5c:	74bb      	strb	r3, [r7, #18]

				if(n==0 && lastBits==0) return STATUS_NO_ROOM;		// FIFO Buffer is zero.
 800aa5e:	7dbb      	ldrb	r3, [r7, #22]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d104      	bne.n	800aa6e <Comunicate_PCDPICC+0x126>
 800aa64:	7cbb      	ldrb	r3, [r7, #18]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d101      	bne.n	800aa6e <Comunicate_PCDPICC+0x126>
 800aa6a:	2304      	movs	r3, #4
 800aa6c:	e053      	b.n	800ab16 <Comunicate_PCDPICC+0x1ce>

				if(lastBits) *pOutLenBit = (n-1)*8 + lastBits;
 800aa6e:	7cbb      	ldrb	r3, [r7, #18]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00a      	beq.n	800aa8a <Comunicate_PCDPICC+0x142>
 800aa74:	7dbb      	ldrb	r3, [r7, #22]
 800aa76:	3b01      	subs	r3, #1
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	00db      	lsls	r3, r3, #3
 800aa7c:	b2da      	uxtb	r2, r3
 800aa7e:	7cbb      	ldrb	r3, [r7, #18]
 800aa80:	4413      	add	r3, r2
 800aa82:	b2da      	uxtb	r2, r3
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	701a      	strb	r2, [r3, #0]
 800aa88:	e004      	b.n	800aa94 <Comunicate_PCDPICC+0x14c>
				else	  	 *pOutLenBit = n*8;
 800aa8a:	7dbb      	ldrb	r3, [r7, #22]
 800aa8c:	00db      	lsls	r3, r3, #3
 800aa8e:	b2da      	uxtb	r2, r3
 800aa90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa92:	701a      	strb	r2, [r3, #0]

				if(n==0) n=1;
 800aa94:	7dbb      	ldrb	r3, [r7, #22]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d101      	bne.n	800aa9e <Comunicate_PCDPICC+0x156>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	75bb      	strb	r3, [r7, #22]
				if(n>MAXRLEN) n = MAXRLEN;
 800aa9e:	7dbb      	ldrb	r3, [r7, #22]
 800aaa0:	2b12      	cmp	r3, #18
 800aaa2:	d901      	bls.n	800aaa8 <Comunicate_PCDPICC+0x160>
 800aaa4:	2312      	movs	r3, #18
 800aaa6:	75bb      	strb	r3, [r7, #22]

				for (i=0; i<n; i++)
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	82bb      	strh	r3, [r7, #20]
 800aaac:	e00a      	b.n	800aac4 <Comunicate_PCDPICC+0x17c>
					pOutData[i] = Read_RFID(FIFODataReg);
 800aaae:	8abb      	ldrh	r3, [r7, #20]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	18d4      	adds	r4, r2, r3
 800aab4:	2009      	movs	r0, #9
 800aab6:	f7ff fc89 	bl	800a3cc <Read_RFID>
 800aaba:	4603      	mov	r3, r0
 800aabc:	7023      	strb	r3, [r4, #0]
				for (i=0; i<n; i++)
 800aabe:	8abb      	ldrh	r3, [r7, #20]
 800aac0:	3301      	adds	r3, #1
 800aac2:	82bb      	strh	r3, [r7, #20]
 800aac4:	7dbb      	ldrb	r3, [r7, #22]
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	8aba      	ldrh	r2, [r7, #20]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d3ef      	bcc.n	800aaae <Comunicate_PCDPICC+0x166>
 800aace:	e021      	b.n	800ab14 <Comunicate_PCDPICC+0x1cc>
			}
		}else {
			if(err&0x01) printf("ErrorReg : Protocol Error\n\r");
 800aad0:	7c7b      	ldrb	r3, [r7, #17]
 800aad2:	f003 0301 	and.w	r3, r3, #1
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d002      	beq.n	800aae0 <Comunicate_PCDPICC+0x198>
 800aada:	4811      	ldr	r0, [pc, #68]	; (800ab20 <Comunicate_PCDPICC+0x1d8>)
 800aadc:	f001 fd6a 	bl	800c5b4 <iprintf>
			if(err&0x02) printf("ErrorReg : Parity check failed\n\r");
 800aae0:	7c7b      	ldrb	r3, [r7, #17]
 800aae2:	f003 0302 	and.w	r3, r3, #2
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d002      	beq.n	800aaf0 <Comunicate_PCDPICC+0x1a8>
 800aaea:	480e      	ldr	r0, [pc, #56]	; (800ab24 <Comunicate_PCDPICC+0x1dc>)
 800aaec:	f001 fd62 	bl	800c5b4 <iprintf>
			if(err&0x08) printf("ErrorReg : Collision Detected\n\r");
 800aaf0:	7c7b      	ldrb	r3, [r7, #17]
 800aaf2:	f003 0308 	and.w	r3, r3, #8
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d002      	beq.n	800ab00 <Comunicate_PCDPICC+0x1b8>
 800aafa:	480b      	ldr	r0, [pc, #44]	; (800ab28 <Comunicate_PCDPICC+0x1e0>)
 800aafc:	f001 fd5a 	bl	800c5b4 <iprintf>
			if(err&0x10) printf("ErrorReg : FIFO buffer is already full\n\r");
 800ab00:	7c7b      	ldrb	r3, [r7, #17]
 800ab02:	f003 0310 	and.w	r3, r3, #16
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d002      	beq.n	800ab10 <Comunicate_PCDPICC+0x1c8>
 800ab0a:	4808      	ldr	r0, [pc, #32]	; (800ab2c <Comunicate_PCDPICC+0x1e4>)
 800ab0c:	f001 fd52 	bl	800c5b4 <iprintf>
			return STATUS_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	e000      	b.n	800ab16 <Comunicate_PCDPICC+0x1ce>
		}
	}
	return status;
 800ab14:	7cfb      	ldrb	r3, [r7, #19]
}
 800ab16:	4618      	mov	r0, r3
 800ab18:	371c      	adds	r7, #28
 800ab1a:	46bd      	mov	sp, r7
 800ab1c:	bd90      	pop	{r4, r7, pc}
 800ab1e:	bf00      	nop
 800ab20:	08010ca8 	.word	0x08010ca8
 800ab24:	08010cc4 	.word	0x08010cc4
 800ab28:	08010ce8 	.word	0x08010ce8
 800ab2c:	08010d08 	.word	0x08010d08

0800ab30 <Check_ATQID>:

void Check_ATQID(uint8_t Casecadeflg)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	4603      	mov	r3, r0
 800ab38:	71fb      	strb	r3, [r7, #7]
	Q_FLAG=1;
 800ab3a:	4b83      	ldr	r3, [pc, #524]	; (800ad48 <Check_ATQID+0x218>)
 800ab3c:	2201      	movs	r2, #1
 800ab3e:	701a      	strb	r2, [r3, #0]

	printf("\nUID : ");
 800ab40:	4882      	ldr	r0, [pc, #520]	; (800ad4c <Check_ATQID+0x21c>)
 800ab42:	f001 fd37 	bl	800c5b4 <iprintf>
	card_check_flag=0;
 800ab46:	4b82      	ldr	r3, [pc, #520]	; (800ad50 <Check_ATQID+0x220>)
 800ab48:	2200      	movs	r2, #0
 800ab4a:	701a      	strb	r2, [r3, #0]

	for(int i=0;i<Casecadeflg*3+1;i++){
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	60fb      	str	r3, [r7, #12]
 800ab50:	e014      	b.n	800ab7c <Check_ATQID+0x4c>

		User_UID[i]=PICC.UID[i];
 800ab52:	4a80      	ldr	r2, [pc, #512]	; (800ad54 <Check_ATQID+0x224>)
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	4413      	add	r3, r2
 800ab58:	3304      	adds	r3, #4
 800ab5a:	7819      	ldrb	r1, [r3, #0]
 800ab5c:	4a7e      	ldr	r2, [pc, #504]	; (800ad58 <Check_ATQID+0x228>)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	4413      	add	r3, r2
 800ab62:	460a      	mov	r2, r1
 800ab64:	701a      	strb	r2, [r3, #0]
		printf("%d ",User_UID[i]);
 800ab66:	4a7c      	ldr	r2, [pc, #496]	; (800ad58 <Check_ATQID+0x228>)
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	4619      	mov	r1, r3
 800ab70:	487a      	ldr	r0, [pc, #488]	; (800ad5c <Check_ATQID+0x22c>)
 800ab72:	f001 fd1f 	bl	800c5b4 <iprintf>
	for(int i=0;i<Casecadeflg*3+1;i++){
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	3301      	adds	r3, #1
 800ab7a:	60fb      	str	r3, [r7, #12]
 800ab7c:	79fa      	ldrb	r2, [r7, #7]
 800ab7e:	4613      	mov	r3, r2
 800ab80:	005b      	lsls	r3, r3, #1
 800ab82:	4413      	add	r3, r2
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	dde3      	ble.n	800ab52 <Check_ATQID+0x22>
	}

	printf("\n\rSAK : %#x\n\r",PICC.SAK);
 800ab8a:	4b72      	ldr	r3, [pc, #456]	; (800ad54 <Check_ATQID+0x224>)
 800ab8c:	7b9b      	ldrb	r3, [r3, #14]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	4873      	ldr	r0, [pc, #460]	; (800ad60 <Check_ATQID+0x230>)
 800ab92:	f001 fd0f 	bl	800c5b4 <iprintf>

	switch(PICC.SAK){
 800ab96:	4b6f      	ldr	r3, [pc, #444]	; (800ad54 <Check_ATQID+0x224>)
 800ab98:	7b9b      	ldrb	r3, [r3, #14]
 800ab9a:	2b40      	cmp	r3, #64	; 0x40
 800ab9c:	f300 808c 	bgt.w	800acb8 <Check_ATQID+0x188>
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	f2c0 80c7 	blt.w	800ad34 <Check_ATQID+0x204>
 800aba6:	2b40      	cmp	r3, #64	; 0x40
 800aba8:	f200 80c4 	bhi.w	800ad34 <Check_ATQID+0x204>
 800abac:	a201      	add	r2, pc, #4	; (adr r2, 800abb4 <Check_ATQID+0x84>)
 800abae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb2:	bf00      	nop
 800abb4:	0800ace7 	.word	0x0800ace7
 800abb8:	0800acff 	.word	0x0800acff
 800abbc:	0800ad35 	.word	0x0800ad35
 800abc0:	0800ad35 	.word	0x0800ad35
 800abc4:	0800acbf 	.word	0x0800acbf
 800abc8:	0800ad35 	.word	0x0800ad35
 800abcc:	0800ad35 	.word	0x0800ad35
 800abd0:	0800ad35 	.word	0x0800ad35
 800abd4:	0800accf 	.word	0x0800accf
 800abd8:	0800acc7 	.word	0x0800acc7
 800abdc:	0800ad35 	.word	0x0800ad35
 800abe0:	0800ad35 	.word	0x0800ad35
 800abe4:	0800ad35 	.word	0x0800ad35
 800abe8:	0800ad35 	.word	0x0800ad35
 800abec:	0800ad35 	.word	0x0800ad35
 800abf0:	0800ad35 	.word	0x0800ad35
 800abf4:	0800acef 	.word	0x0800acef
 800abf8:	0800acf7 	.word	0x0800acf7
 800abfc:	0800ad35 	.word	0x0800ad35
 800ac00:	0800ad35 	.word	0x0800ad35
 800ac04:	0800ad35 	.word	0x0800ad35
 800ac08:	0800ad35 	.word	0x0800ad35
 800ac0c:	0800ad35 	.word	0x0800ad35
 800ac10:	0800ad35 	.word	0x0800ad35
 800ac14:	0800acdf 	.word	0x0800acdf
 800ac18:	0800ad35 	.word	0x0800ad35
 800ac1c:	0800ad35 	.word	0x0800ad35
 800ac20:	0800ad35 	.word	0x0800ad35
 800ac24:	0800ad35 	.word	0x0800ad35
 800ac28:	0800ad35 	.word	0x0800ad35
 800ac2c:	0800ad35 	.word	0x0800ad35
 800ac30:	0800ad35 	.word	0x0800ad35
 800ac34:	0800ad07 	.word	0x0800ad07
 800ac38:	0800ad35 	.word	0x0800ad35
 800ac3c:	0800ad35 	.word	0x0800ad35
 800ac40:	0800ad35 	.word	0x0800ad35
 800ac44:	0800ad35 	.word	0x0800ad35
 800ac48:	0800ad35 	.word	0x0800ad35
 800ac4c:	0800ad35 	.word	0x0800ad35
 800ac50:	0800ad35 	.word	0x0800ad35
 800ac54:	0800ad35 	.word	0x0800ad35
 800ac58:	0800ad35 	.word	0x0800ad35
 800ac5c:	0800ad35 	.word	0x0800ad35
 800ac60:	0800ad35 	.word	0x0800ad35
 800ac64:	0800ad35 	.word	0x0800ad35
 800ac68:	0800ad35 	.word	0x0800ad35
 800ac6c:	0800ad35 	.word	0x0800ad35
 800ac70:	0800ad35 	.word	0x0800ad35
 800ac74:	0800ad35 	.word	0x0800ad35
 800ac78:	0800ad35 	.word	0x0800ad35
 800ac7c:	0800ad35 	.word	0x0800ad35
 800ac80:	0800ad35 	.word	0x0800ad35
 800ac84:	0800ad35 	.word	0x0800ad35
 800ac88:	0800ad35 	.word	0x0800ad35
 800ac8c:	0800ad35 	.word	0x0800ad35
 800ac90:	0800ad35 	.word	0x0800ad35
 800ac94:	0800ad35 	.word	0x0800ad35
 800ac98:	0800ad35 	.word	0x0800ad35
 800ac9c:	0800ad35 	.word	0x0800ad35
 800aca0:	0800ad35 	.word	0x0800ad35
 800aca4:	0800ad35 	.word	0x0800ad35
 800aca8:	0800ad35 	.word	0x0800ad35
 800acac:	0800ad35 	.word	0x0800ad35
 800acb0:	0800ad35 	.word	0x0800ad35
 800acb4:	0800ad2d 	.word	0x0800ad2d
 800acb8:	2b88      	cmp	r3, #136	; 0x88
 800acba:	d00c      	beq.n	800acd6 <Check_ATQID+0x1a6>
 800acbc:	e03a      	b.n	800ad34 <Check_ATQID+0x204>
	case 0x04:	printf("PICC type : SAK indicates UID is not complete\n\r");
 800acbe:	4829      	ldr	r0, [pc, #164]	; (800ad64 <Check_ATQID+0x234>)
 800acc0:	f001 fc78 	bl	800c5b4 <iprintf>
	break;
 800acc4:	e03b      	b.n	800ad3e <Check_ATQID+0x20e>
	case 0x09:	printf("PICC type : MIFARE Mini, 320 bytes\n\r");
 800acc6:	4828      	ldr	r0, [pc, #160]	; (800ad68 <Check_ATQID+0x238>)
 800acc8:	f001 fc74 	bl	800c5b4 <iprintf>
	break;
 800accc:	e037      	b.n	800ad3e <Check_ATQID+0x20e>
	case 0x08:	printf("PICC type : MIFARE 1KB\n\r");
 800acce:	4827      	ldr	r0, [pc, #156]	; (800ad6c <Check_ATQID+0x23c>)
 800acd0:	f001 fc70 	bl	800c5b4 <iprintf>
	break;
 800acd4:	e033      	b.n	800ad3e <Check_ATQID+0x20e>
	case 0x88:	printf("PICC type : MIFARE 1KB by infineon\n\r");
 800acd6:	4826      	ldr	r0, [pc, #152]	; (800ad70 <Check_ATQID+0x240>)
 800acd8:	f001 fc6c 	bl	800c5b4 <iprintf>
	break;
 800acdc:	e02f      	b.n	800ad3e <Check_ATQID+0x20e>
	case 0x18:	printf("PICC type : MIFARE 4KB\n\r");
 800acde:	4825      	ldr	r0, [pc, #148]	; (800ad74 <Check_ATQID+0x244>)
 800ace0:	f001 fc68 	bl	800c5b4 <iprintf>
	break;
 800ace4:	e02b      	b.n	800ad3e <Check_ATQID+0x20e>
	case 0x00:	printf("PICC type : MIFARE Ultralight or Ultralight C\n\r");
 800ace6:	4824      	ldr	r0, [pc, #144]	; (800ad78 <Check_ATQID+0x248>)
 800ace8:	f001 fc64 	bl	800c5b4 <iprintf>
	break;
 800acec:	e027      	b.n	800ad3e <Check_ATQID+0x20e>
	case 0x10:  printf("PICC type : Unknown type\n\r");
 800acee:	4823      	ldr	r0, [pc, #140]	; (800ad7c <Check_ATQID+0x24c>)
 800acf0:	f001 fc60 	bl	800c5b4 <iprintf>
	break;
 800acf4:	e023      	b.n	800ad3e <Check_ATQID+0x20e>
	case 0x11:	printf("PICC type : MIFARE Plus\n\r");
 800acf6:	4822      	ldr	r0, [pc, #136]	; (800ad80 <Check_ATQID+0x250>)
 800acf8:	f001 fc5c 	bl	800c5b4 <iprintf>
	break;
 800acfc:	e01f      	b.n	800ad3e <Check_ATQID+0x20e>
	case 0x01:	printf("PICC type : MIFARE TNP3XXX\n\r");
 800acfe:	4821      	ldr	r0, [pc, #132]	; (800ad84 <Check_ATQID+0x254>)
 800ad00:	f001 fc58 	bl	800c5b4 <iprintf>
	break;
 800ad04:	e01b      	b.n	800ad3e <Check_ATQID+0x20e>
	case 0x20:	printf("PICC type : PICC compliant with ISO/IEC 14443-4\n\r");
 800ad06:	4820      	ldr	r0, [pc, #128]	; (800ad88 <Check_ATQID+0x258>)
 800ad08:	f001 fc54 	bl	800c5b4 <iprintf>
	if (PICC.ATQA16 == Mifare_DESFire) printf("PICC type : MIFARE DESFire\n\r");
 800ad0c:	4b11      	ldr	r3, [pc, #68]	; (800ad54 <Check_ATQID+0x224>)
 800ad0e:	881b      	ldrh	r3, [r3, #0]
 800ad10:	f5b3 7f51 	cmp.w	r3, #836	; 0x344
 800ad14:	d102      	bne.n	800ad1c <Check_ATQID+0x1ec>
 800ad16:	481d      	ldr	r0, [pc, #116]	; (800ad8c <Check_ATQID+0x25c>)
 800ad18:	f001 fc4c 	bl	800c5b4 <iprintf>
	if (PICC.ATQA16 == Mifare_UltraLight) printf("PICC type : Mifare_UltraLight\n\r");
 800ad1c:	4b0d      	ldr	r3, [pc, #52]	; (800ad54 <Check_ATQID+0x224>)
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	2b44      	cmp	r3, #68	; 0x44
 800ad22:	d10b      	bne.n	800ad3c <Check_ATQID+0x20c>
 800ad24:	481a      	ldr	r0, [pc, #104]	; (800ad90 <Check_ATQID+0x260>)
 800ad26:	f001 fc45 	bl	800c5b4 <iprintf>
	break;
 800ad2a:	e007      	b.n	800ad3c <Check_ATQID+0x20c>
	case 0x40:	printf("PICC type : PICC compliant with ISO/IEC 18092 (NFC)\n\r");
 800ad2c:	4819      	ldr	r0, [pc, #100]	; (800ad94 <Check_ATQID+0x264>)
 800ad2e:	f001 fc41 	bl	800c5b4 <iprintf>
	break;
 800ad32:	e004      	b.n	800ad3e <Check_ATQID+0x20e>
	default:	printf("PICC type : Unknown type\n\r");
 800ad34:	4811      	ldr	r0, [pc, #68]	; (800ad7c <Check_ATQID+0x24c>)
 800ad36:	f001 fc3d 	bl	800c5b4 <iprintf>
	break;
 800ad3a:	e000      	b.n	800ad3e <Check_ATQID+0x20e>
	break;
 800ad3c:	bf00      	nop

	}
}
 800ad3e:	bf00      	nop
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}
 800ad46:	bf00      	nop
 800ad48:	200009f8 	.word	0x200009f8
 800ad4c:	08010d34 	.word	0x08010d34
 800ad50:	20000ac1 	.word	0x20000ac1
 800ad54:	200009e0 	.word	0x200009e0
 800ad58:	20000ac4 	.word	0x20000ac4
 800ad5c:	08010d3c 	.word	0x08010d3c
 800ad60:	08010d40 	.word	0x08010d40
 800ad64:	08010d50 	.word	0x08010d50
 800ad68:	08010d80 	.word	0x08010d80
 800ad6c:	08010da8 	.word	0x08010da8
 800ad70:	08010dc4 	.word	0x08010dc4
 800ad74:	08010dec 	.word	0x08010dec
 800ad78:	08010e08 	.word	0x08010e08
 800ad7c:	08010e38 	.word	0x08010e38
 800ad80:	08010e54 	.word	0x08010e54
 800ad84:	08010e70 	.word	0x08010e70
 800ad88:	08010e90 	.word	0x08010e90
 800ad8c:	08010ec4 	.word	0x08010ec4
 800ad90:	08010ee4 	.word	0x08010ee4
 800ad94:	08010f04 	.word	0x08010f04

0800ad98 <Check_ATQA>:
void Check_ATQA()
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	af00      	add	r7, sp, #0
	PICC.ATQA16 = (PICC.ATQA[1]<<8) + PICC.ATQA[0];
 800ad9c:	4b55      	ldr	r3, [pc, #340]	; (800aef4 <Check_ATQA+0x15c>)
 800ad9e:	78db      	ldrb	r3, [r3, #3]
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	021b      	lsls	r3, r3, #8
 800ada4:	b29a      	uxth	r2, r3
 800ada6:	4b53      	ldr	r3, [pc, #332]	; (800aef4 <Check_ATQA+0x15c>)
 800ada8:	789b      	ldrb	r3, [r3, #2]
 800adaa:	b29b      	uxth	r3, r3
 800adac:	4413      	add	r3, r2
 800adae:	b29a      	uxth	r2, r3
 800adb0:	4b50      	ldr	r3, [pc, #320]	; (800aef4 <Check_ATQA+0x15c>)
 800adb2:	801a      	strh	r2, [r3, #0]
	PICC.UIDSize = (PICC.ATQA[0]>>6)&0x03;
 800adb4:	4b4f      	ldr	r3, [pc, #316]	; (800aef4 <Check_ATQA+0x15c>)
 800adb6:	789b      	ldrb	r3, [r3, #2]
 800adb8:	099b      	lsrs	r3, r3, #6
 800adba:	b2da      	uxtb	r2, r3
 800adbc:	4b4d      	ldr	r3, [pc, #308]	; (800aef4 <Check_ATQA+0x15c>)
 800adbe:	73da      	strb	r2, [r3, #15]
	PICC.bit_frame_anticol= PICC.ATQA[0]&0x1F;
 800adc0:	4b4c      	ldr	r3, [pc, #304]	; (800aef4 <Check_ATQA+0x15c>)
 800adc2:	789b      	ldrb	r3, [r3, #2]
 800adc4:	f003 031f 	and.w	r3, r3, #31
 800adc8:	b2da      	uxtb	r2, r3
 800adca:	4b4a      	ldr	r3, [pc, #296]	; (800aef4 <Check_ATQA+0x15c>)
 800adcc:	741a      	strb	r2, [r3, #16]
	switch(PICC.UIDSize){
 800adce:	4b49      	ldr	r3, [pc, #292]	; (800aef4 <Check_ATQA+0x15c>)
 800add0:	7bdb      	ldrb	r3, [r3, #15]
 800add2:	2b03      	cmp	r3, #3
 800add4:	d81a      	bhi.n	800ae0c <Check_ATQA+0x74>
 800add6:	a201      	add	r2, pc, #4	; (adr r2, 800addc <Check_ATQA+0x44>)
 800add8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800addc:	0800aded 	.word	0x0800aded
 800ade0:	0800adf5 	.word	0x0800adf5
 800ade4:	0800adfd 	.word	0x0800adfd
 800ade8:	0800ae05 	.word	0x0800ae05
	case 0:
		printf("UID Size : Single\n\r");
 800adec:	4842      	ldr	r0, [pc, #264]	; (800aef8 <Check_ATQA+0x160>)
 800adee:	f001 fbe1 	bl	800c5b4 <iprintf>
		break;
 800adf2:	e00f      	b.n	800ae14 <Check_ATQA+0x7c>
	case 1:
		printf("UID Size : double\n\r");
 800adf4:	4841      	ldr	r0, [pc, #260]	; (800aefc <Check_ATQA+0x164>)
 800adf6:	f001 fbdd 	bl	800c5b4 <iprintf>
		break;
 800adfa:	e00b      	b.n	800ae14 <Check_ATQA+0x7c>
	case 2:
		printf("UID Size : triple\n\r");
 800adfc:	4840      	ldr	r0, [pc, #256]	; (800af00 <Check_ATQA+0x168>)
 800adfe:	f001 fbd9 	bl	800c5b4 <iprintf>
		break;
 800ae02:	e007      	b.n	800ae14 <Check_ATQA+0x7c>
	case 3:
		printf("UID Size : Reserved\n\r");
 800ae04:	483f      	ldr	r0, [pc, #252]	; (800af04 <Check_ATQA+0x16c>)
 800ae06:	f001 fbd5 	bl	800c5b4 <iprintf>
		break;
 800ae0a:	e003      	b.n	800ae14 <Check_ATQA+0x7c>
	default:
		printf("UID Size : ATQA ERR\n\r");
 800ae0c:	483e      	ldr	r0, [pc, #248]	; (800af08 <Check_ATQA+0x170>)
 800ae0e:	f001 fbd1 	bl	800c5b4 <iprintf>
		break;
 800ae12:	bf00      	nop
	}

	switch(PICC.bit_frame_anticol){
 800ae14:	4b37      	ldr	r3, [pc, #220]	; (800aef4 <Check_ATQA+0x15c>)
 800ae16:	7c1b      	ldrb	r3, [r3, #16]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	2b0f      	cmp	r3, #15
 800ae1c:	d836      	bhi.n	800ae8c <Check_ATQA+0xf4>
 800ae1e:	a201      	add	r2, pc, #4	; (adr r2, 800ae24 <Check_ATQA+0x8c>)
 800ae20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae24:	0800ae65 	.word	0x0800ae65
 800ae28:	0800ae6d 	.word	0x0800ae6d
 800ae2c:	0800ae8d 	.word	0x0800ae8d
 800ae30:	0800ae75 	.word	0x0800ae75
 800ae34:	0800ae8d 	.word	0x0800ae8d
 800ae38:	0800ae8d 	.word	0x0800ae8d
 800ae3c:	0800ae8d 	.word	0x0800ae8d
 800ae40:	0800ae7d 	.word	0x0800ae7d
 800ae44:	0800ae8d 	.word	0x0800ae8d
 800ae48:	0800ae8d 	.word	0x0800ae8d
 800ae4c:	0800ae8d 	.word	0x0800ae8d
 800ae50:	0800ae8d 	.word	0x0800ae8d
 800ae54:	0800ae8d 	.word	0x0800ae8d
 800ae58:	0800ae8d 	.word	0x0800ae8d
 800ae5c:	0800ae8d 	.word	0x0800ae8d
 800ae60:	0800ae85 	.word	0x0800ae85
	case 1:
		printf("1st bit frame anticollision\n\r");
 800ae64:	4829      	ldr	r0, [pc, #164]	; (800af0c <Check_ATQA+0x174>)
 800ae66:	f001 fba5 	bl	800c5b4 <iprintf>
		break;
 800ae6a:	e013      	b.n	800ae94 <Check_ATQA+0xfc>
	case 2:
		printf("2nd bit frame anticollision\n\r");
 800ae6c:	4828      	ldr	r0, [pc, #160]	; (800af10 <Check_ATQA+0x178>)
 800ae6e:	f001 fba1 	bl	800c5b4 <iprintf>
		break;
 800ae72:	e00f      	b.n	800ae94 <Check_ATQA+0xfc>
	case 4:
		printf("3rd bit frame anticollision\n\r");
 800ae74:	4827      	ldr	r0, [pc, #156]	; (800af14 <Check_ATQA+0x17c>)
 800ae76:	f001 fb9d 	bl	800c5b4 <iprintf>
		break;
 800ae7a:	e00b      	b.n	800ae94 <Check_ATQA+0xfc>
	case 8:
		printf("4th bit frame anticollision\n\r");
 800ae7c:	4826      	ldr	r0, [pc, #152]	; (800af18 <Check_ATQA+0x180>)
 800ae7e:	f001 fb99 	bl	800c5b4 <iprintf>
		break;
 800ae82:	e007      	b.n	800ae94 <Check_ATQA+0xfc>
	case 16:
		printf("5th bit frame anticollision\n\r");
 800ae84:	4825      	ldr	r0, [pc, #148]	; (800af1c <Check_ATQA+0x184>)
 800ae86:	f001 fb95 	bl	800c5b4 <iprintf>
		break;
 800ae8a:	e003      	b.n	800ae94 <Check_ATQA+0xfc>
	default:
		printf("bit frame anticollision ERR\n\r");
 800ae8c:	4824      	ldr	r0, [pc, #144]	; (800af20 <Check_ATQA+0x188>)
 800ae8e:	f001 fb91 	bl	800c5b4 <iprintf>
		break;
 800ae92:	bf00      	nop
	}

	switch(PICC.ATQA16){
 800ae94:	4b17      	ldr	r3, [pc, #92]	; (800aef4 <Check_ATQA+0x15c>)
 800ae96:	881b      	ldrh	r3, [r3, #0]
 800ae98:	f5b3 7f51 	cmp.w	r3, #836	; 0x344
 800ae9c:	d01f      	beq.n	800aede <Check_ATQA+0x146>
 800ae9e:	f5b3 7f51 	cmp.w	r3, #836	; 0x344
 800aea2:	dc20      	bgt.n	800aee6 <Check_ATQA+0x14e>
 800aea4:	2b44      	cmp	r3, #68	; 0x44
 800aea6:	d00a      	beq.n	800aebe <Check_ATQA+0x126>
 800aea8:	2b44      	cmp	r3, #68	; 0x44
 800aeaa:	dc1c      	bgt.n	800aee6 <Check_ATQA+0x14e>
 800aeac:	2b08      	cmp	r3, #8
 800aeae:	d012      	beq.n	800aed6 <Check_ATQA+0x13e>
 800aeb0:	2b08      	cmp	r3, #8
 800aeb2:	dc18      	bgt.n	800aee6 <Check_ATQA+0x14e>
 800aeb4:	2b02      	cmp	r3, #2
 800aeb6:	d00a      	beq.n	800aece <Check_ATQA+0x136>
 800aeb8:	2b04      	cmp	r3, #4
 800aeba:	d004      	beq.n	800aec6 <Check_ATQA+0x12e>
 800aebc:	e013      	b.n	800aee6 <Check_ATQA+0x14e>
	case Mifare_UltraLight :
		printf("Card type : Mifare_UltraLight\n\r");
 800aebe:	4819      	ldr	r0, [pc, #100]	; (800af24 <Check_ATQA+0x18c>)
 800aec0:	f001 fb78 	bl	800c5b4 <iprintf>
		break;
 800aec4:	e013      	b.n	800aeee <Check_ATQA+0x156>
	case Mifare_One_S50 :
		printf("Card type : Mifare_One_S50\n\r");
 800aec6:	4818      	ldr	r0, [pc, #96]	; (800af28 <Check_ATQA+0x190>)
 800aec8:	f001 fb74 	bl	800c5b4 <iprintf>
		break;
 800aecc:	e00f      	b.n	800aeee <Check_ATQA+0x156>
	case Mifare_One_S70 :
		printf("Card type : Mifare_One_S70\n\r");
 800aece:	4817      	ldr	r0, [pc, #92]	; (800af2c <Check_ATQA+0x194>)
 800aed0:	f001 fb70 	bl	800c5b4 <iprintf>
		break;
 800aed4:	e00b      	b.n	800aeee <Check_ATQA+0x156>
	case Mifare_Pro_X :
		printf("Card type : Mifare_Pro_X\n\r");
 800aed6:	4816      	ldr	r0, [pc, #88]	; (800af30 <Check_ATQA+0x198>)
 800aed8:	f001 fb6c 	bl	800c5b4 <iprintf>
		break;
 800aedc:	e007      	b.n	800aeee <Check_ATQA+0x156>
	case Mifare_DESFire :
		printf("Card type : Mifare_DESFire\n\r");
 800aede:	4815      	ldr	r0, [pc, #84]	; (800af34 <Check_ATQA+0x19c>)
 800aee0:	f001 fb68 	bl	800c5b4 <iprintf>
		break;
 800aee4:	e003      	b.n	800aeee <Check_ATQA+0x156>
	default:
		printf("Card type : Unknown\n\r");
 800aee6:	4814      	ldr	r0, [pc, #80]	; (800af38 <Check_ATQA+0x1a0>)
 800aee8:	f001 fb64 	bl	800c5b4 <iprintf>
		break;
 800aeec:	bf00      	nop
	}
}
 800aeee:	bf00      	nop
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	200009e0 	.word	0x200009e0
 800aef8:	08010f3c 	.word	0x08010f3c
 800aefc:	08010f50 	.word	0x08010f50
 800af00:	08010f64 	.word	0x08010f64
 800af04:	08010f78 	.word	0x08010f78
 800af08:	08010f90 	.word	0x08010f90
 800af0c:	08010fa8 	.word	0x08010fa8
 800af10:	08010fc8 	.word	0x08010fc8
 800af14:	08010fe8 	.word	0x08010fe8
 800af18:	08011008 	.word	0x08011008
 800af1c:	08011028 	.word	0x08011028
 800af20:	08011048 	.word	0x08011048
 800af24:	08011068 	.word	0x08011068
 800af28:	08011088 	.word	0x08011088
 800af2c:	080110a8 	.word	0x080110a8
 800af30:	080110c8 	.word	0x080110c8
 800af34:	080110e4 	.word	0x080110e4
 800af38:	08011104 	.word	0x08011104

0800af3c <REQA_t>:
void REQA_t()
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b088      	sub	sp, #32
 800af40:	af02      	add	r7, sp, #8
	StatusCode status;
	uint8_t RxbitLen;
	uint8_t TransceiveBFF[MAXRLEN];

	// Reset baud rates
	Write_RFID(TxModeReg, 0x00); // reset value: 00h
 800af42:	2100      	movs	r1, #0
 800af44:	2012      	movs	r0, #18
 800af46:	f7ff fa77 	bl	800a438 <Write_RFID>
	Write_RFID(RxModeReg, 0x00); // reset value: 00h
 800af4a:	2100      	movs	r1, #0
 800af4c:	2013      	movs	r0, #19
 800af4e:	f7ff fa73 	bl	800a438 <Write_RFID>
	// Reset ModWidthReg
	Write_RFID(ModWidthReg, 0x26); // reset value: 26h
 800af52:	2126      	movs	r1, #38	; 0x26
 800af54:	2024      	movs	r0, #36	; 0x24
 800af56:	f7ff fa6f 	bl	800a438 <Write_RFID>
	ClearRegisterBit_RFID(CollReg, 0x80); // ValuesAfterColl=1 => Bits received after collision are cleared.
 800af5a:	2180      	movs	r1, #128	; 0x80
 800af5c:	200e      	movs	r0, #14
 800af5e:	f7ff fc8c 	bl	800a87a <ClearRegisterBit_RFID>

	//REQA&WUPA Command : Short frame 7bit ISO-14443-3 6.1.5.1 / 6.3.1
	uint8_t bit_oriented_frames = 7;
 800af62:	2307      	movs	r3, #7
 800af64:	75fb      	strb	r3, [r7, #23]
	Write_RFID(BitFramingReg,bit_oriented_frames); //TXLastbit write
 800af66:	7dfb      	ldrb	r3, [r7, #23]
 800af68:	4619      	mov	r1, r3
 800af6a:	200d      	movs	r0, #13
 800af6c:	f7ff fa64 	bl	800a438 <Write_RFID>

	TransceiveBFF[0] = PICC_CMD_REQA; // PICC_CMD_REQA//PICC_CMD_WUPA
 800af70:	2326      	movs	r3, #38	; 0x26
 800af72:	703b      	strb	r3, [r7, #0]

	status = Comunicate_PCDPICC(PCD_CMD_Transceive,TransceiveBFF,1,TransceiveBFF,&RxbitLen);
 800af74:	463a      	mov	r2, r7
 800af76:	4639      	mov	r1, r7
 800af78:	f107 0315 	add.w	r3, r7, #21
 800af7c:	9300      	str	r3, [sp, #0]
 800af7e:	4613      	mov	r3, r2
 800af80:	2201      	movs	r2, #1
 800af82:	200c      	movs	r0, #12
 800af84:	f7ff fce0 	bl	800a948 <Comunicate_PCDPICC>
 800af88:	4603      	mov	r3, r0
 800af8a:	75bb      	strb	r3, [r7, #22]

	if(Error_write(status) != STATUS_OK) {
 800af8c:	7dbb      	ldrb	r3, [r7, #22]
 800af8e:	4618      	mov	r0, r3
 800af90:	f000 f946 	bl	800b220 <Error_write>
 800af94:	4603      	mov	r3, r0
 800af96:	2b00      	cmp	r3, #0
 800af98:	d003      	beq.n	800afa2 <REQA_t+0x66>
		PSTATUS = IDLE;
 800af9a:	4b12      	ldr	r3, [pc, #72]	; (800afe4 <REQA_t+0xa8>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	701a      	strb	r2, [r3, #0]
 800afa0:	e01d      	b.n	800afde <REQA_t+0xa2>
		return;
	}

	if(RxbitLen == 16)  //ATQA : 16bit
 800afa2:	7d7b      	ldrb	r3, [r7, #21]
 800afa4:	2b10      	cmp	r3, #16
 800afa6:	d10e      	bne.n	800afc6 <REQA_t+0x8a>
	{
		PICC.ATQA[0] = TransceiveBFF[0];
 800afa8:	783a      	ldrb	r2, [r7, #0]
 800afaa:	4b0f      	ldr	r3, [pc, #60]	; (800afe8 <REQA_t+0xac>)
 800afac:	709a      	strb	r2, [r3, #2]
		PICC.ATQA[1] = TransceiveBFF[1];
 800afae:	787a      	ldrb	r2, [r7, #1]
 800afb0:	4b0d      	ldr	r3, [pc, #52]	; (800afe8 <REQA_t+0xac>)
 800afb2:	70da      	strb	r2, [r3, #3]
		PSTATUS = READY;
 800afb4:	4b0b      	ldr	r3, [pc, #44]	; (800afe4 <REQA_t+0xa8>)
 800afb6:	2201      	movs	r2, #1
 800afb8:	701a      	strb	r2, [r3, #0]
		printf("PICC Sequence IDLE to Ready\n\r");
 800afba:	480c      	ldr	r0, [pc, #48]	; (800afec <REQA_t+0xb0>)
 800afbc:	f001 fafa 	bl	800c5b4 <iprintf>
		Check_ATQA();
 800afc0:	f7ff feea 	bl	800ad98 <Check_ATQA>
 800afc4:	e005      	b.n	800afd2 <REQA_t+0x96>
	}else {
		printf("Error in communication in REQA_t/RxbitLen\n\r");
 800afc6:	480a      	ldr	r0, [pc, #40]	; (800aff0 <REQA_t+0xb4>)
 800afc8:	f001 faf4 	bl	800c5b4 <iprintf>
		PSTATUS = IDLE;
 800afcc:	4b05      	ldr	r3, [pc, #20]	; (800afe4 <REQA_t+0xa8>)
 800afce:	2200      	movs	r2, #0
 800afd0:	701a      	strb	r2, [r3, #0]
	}
	if(PSTATUS==READY){
 800afd2:	4b04      	ldr	r3, [pc, #16]	; (800afe4 <REQA_t+0xa8>)
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b01      	cmp	r3, #1
 800afd8:	d101      	bne.n	800afde <REQA_t+0xa2>
		REQ_ID();
 800afda:	f000 f80b 	bl	800aff4 <REQ_ID>
	}
}
 800afde:	3718      	adds	r7, #24
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}
 800afe4:	200009bc 	.word	0x200009bc
 800afe8:	200009e0 	.word	0x200009e0
 800afec:	0801111c 	.word	0x0801111c
 800aff0:	0801113c 	.word	0x0801113c

0800aff4 <REQ_ID>:

void REQ_ID()
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b08a      	sub	sp, #40	; 0x28
 800aff8:	af02      	add	r7, sp, #8
	StatusCode status;
	uint8_t i,BCC_check=0;
 800affa:	2300      	movs	r3, #0
 800affc:	777b      	strb	r3, [r7, #29]
	uint8_t RxbitLen;
	uint8_t TransceiveBFF[MAXRLEN];
	uint8_t temp[5];
	uint8_t Casecadelevel;
	uint8_t Casecadeflg=0;
 800affe:	2300      	movs	r3, #0
 800b000:	76fb      	strb	r3, [r7, #27]


	//all received bits will be cleared after a collision only used during bitwise anticollision at 106 kBd
	ClearRegisterBit_RFID(CollReg,0x80);
 800b002:	2180      	movs	r1, #128	; 0x80
 800b004:	200e      	movs	r0, #14
 800b006:	f7ff fc38 	bl	800a87a <ClearRegisterBit_RFID>

	Write_RFID(BitFramingReg,0x00); 						 //TXLastbit write = 0
 800b00a:	2100      	movs	r1, #0
 800b00c:	200d      	movs	r0, #13
 800b00e:	f7ff fa13 	bl	800a438 <Write_RFID>


	do{ //Casecade level 1 to 3
		BCC_check=0;
 800b012:	2300      	movs	r3, #0
 800b014:	777b      	strb	r3, [r7, #29]
		Casecadeflg+=1;
 800b016:	7efb      	ldrb	r3, [r7, #27]
 800b018:	3301      	adds	r3, #1
 800b01a:	76fb      	strb	r3, [r7, #27]

		if(Casecadeflg>1){
 800b01c:	7efb      	ldrb	r3, [r7, #27]
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d91a      	bls.n	800b058 <REQ_ID+0x64>
			for(i=0;i<3;i++)	PICC.UID[(Casecadeflg-2)*3+i]= temp[i+1];
 800b022:	2300      	movs	r3, #0
 800b024:	77bb      	strb	r3, [r7, #30]
 800b026:	e014      	b.n	800b052 <REQ_ID+0x5e>
 800b028:	7fbb      	ldrb	r3, [r7, #30]
 800b02a:	1c59      	adds	r1, r3, #1
 800b02c:	7efb      	ldrb	r3, [r7, #27]
 800b02e:	1e9a      	subs	r2, r3, #2
 800b030:	4613      	mov	r3, r2
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	441a      	add	r2, r3
 800b036:	7fbb      	ldrb	r3, [r7, #30]
 800b038:	4413      	add	r3, r2
 800b03a:	f107 0220 	add.w	r2, r7, #32
 800b03e:	440a      	add	r2, r1
 800b040:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800b044:	4a71      	ldr	r2, [pc, #452]	; (800b20c <REQ_ID+0x218>)
 800b046:	4413      	add	r3, r2
 800b048:	460a      	mov	r2, r1
 800b04a:	711a      	strb	r2, [r3, #4]
 800b04c:	7fbb      	ldrb	r3, [r7, #30]
 800b04e:	3301      	adds	r3, #1
 800b050:	77bb      	strb	r3, [r7, #30]
 800b052:	7fbb      	ldrb	r3, [r7, #30]
 800b054:	2b02      	cmp	r3, #2
 800b056:	d9e7      	bls.n	800b028 <REQ_ID+0x34>
		}
		switch (Casecadeflg){//SEL
 800b058:	7efb      	ldrb	r3, [r7, #27]
 800b05a:	2b03      	cmp	r3, #3
 800b05c:	d00c      	beq.n	800b078 <REQ_ID+0x84>
 800b05e:	2b03      	cmp	r3, #3
 800b060:	dc0d      	bgt.n	800b07e <REQ_ID+0x8a>
 800b062:	2b01      	cmp	r3, #1
 800b064:	d002      	beq.n	800b06c <REQ_ID+0x78>
 800b066:	2b02      	cmp	r3, #2
 800b068:	d003      	beq.n	800b072 <REQ_ID+0x7e>
 800b06a:	e008      	b.n	800b07e <REQ_ID+0x8a>
		case 1:
			Casecadelevel = PICC_CMD_SEL_CL1;
 800b06c:	2393      	movs	r3, #147	; 0x93
 800b06e:	773b      	strb	r3, [r7, #28]
			break;
 800b070:	e009      	b.n	800b086 <REQ_ID+0x92>
		case 2:
			Casecadelevel = PICC_CMD_SEL_CL2;
 800b072:	2395      	movs	r3, #149	; 0x95
 800b074:	773b      	strb	r3, [r7, #28]
			break;
 800b076:	e006      	b.n	800b086 <REQ_ID+0x92>
		case 3:
			Casecadelevel = PICC_CMD_SEL_CL3;
 800b078:	2397      	movs	r3, #151	; 0x97
 800b07a:	773b      	strb	r3, [r7, #28]
			break;
 800b07c:	e003      	b.n	800b086 <REQ_ID+0x92>
		default:
			Error_write(STATUS_INTERNAL_ERROR);
 800b07e:	2005      	movs	r0, #5
 800b080:	f000 f8ce 	bl	800b220 <Error_write>
			return;
 800b084:	e0bf      	b.n	800b206 <REQ_ID+0x212>
			break;
		}
		TransceiveBFF[0] = Casecadelevel;
 800b086:	7f3b      	ldrb	r3, [r7, #28]
 800b088:	723b      	strb	r3, [r7, #8]
		TransceiveBFF[1] = 0x20;	//NVB 2Byte
 800b08a:	2320      	movs	r3, #32
 800b08c:	727b      	strb	r3, [r7, #9]

		status = Comunicate_PCDPICC(PCD_CMD_Transceive,TransceiveBFF,2,TransceiveBFF,&RxbitLen);
 800b08e:	f107 0208 	add.w	r2, r7, #8
 800b092:	f107 0108 	add.w	r1, r7, #8
 800b096:	f107 031a 	add.w	r3, r7, #26
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	4613      	mov	r3, r2
 800b09e:	2202      	movs	r2, #2
 800b0a0:	200c      	movs	r0, #12
 800b0a2:	f7ff fc51 	bl	800a948 <Comunicate_PCDPICC>
 800b0a6:	4603      	mov	r3, r0
 800b0a8:	77fb      	strb	r3, [r7, #31]
		if(Error_write(status) != STATUS_OK) {
 800b0aa:	7ffb      	ldrb	r3, [r7, #31]
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f000 f8b7 	bl	800b220 <Error_write>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d003      	beq.n	800b0c0 <REQ_ID+0xcc>
			PSTATUS = IDLE;
 800b0b8:	4b55      	ldr	r3, [pc, #340]	; (800b210 <REQ_ID+0x21c>)
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	701a      	strb	r2, [r3, #0]
			return;
 800b0be:	e0a2      	b.n	800b206 <REQ_ID+0x212>
		} else{
			for (i=0; i<4; i++)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	77bb      	strb	r3, [r7, #30]
 800b0c4:	e017      	b.n	800b0f6 <REQ_ID+0x102>
			{
				temp[i]  = TransceiveBFF[i];
 800b0c6:	7fba      	ldrb	r2, [r7, #30]
 800b0c8:	7fbb      	ldrb	r3, [r7, #30]
 800b0ca:	f107 0120 	add.w	r1, r7, #32
 800b0ce:	440a      	add	r2, r1
 800b0d0:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800b0d4:	f107 0120 	add.w	r1, r7, #32
 800b0d8:	440b      	add	r3, r1
 800b0da:	f803 2c20 	strb.w	r2, [r3, #-32]
				BCC_check ^= TransceiveBFF[i];
 800b0de:	7fbb      	ldrb	r3, [r7, #30]
 800b0e0:	f107 0220 	add.w	r2, r7, #32
 800b0e4:	4413      	add	r3, r2
 800b0e6:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 800b0ea:	7f7b      	ldrb	r3, [r7, #29]
 800b0ec:	4053      	eors	r3, r2
 800b0ee:	777b      	strb	r3, [r7, #29]
			for (i=0; i<4; i++)
 800b0f0:	7fbb      	ldrb	r3, [r7, #30]
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	77bb      	strb	r3, [r7, #30]
 800b0f6:	7fbb      	ldrb	r3, [r7, #30]
 800b0f8:	2b03      	cmp	r3, #3
 800b0fa:	d9e4      	bls.n	800b0c6 <REQ_ID+0xd2>
			}
			if (BCC_check != TransceiveBFF[i]) status = Error_write(STATUS_BCC_WRONG);
 800b0fc:	7fbb      	ldrb	r3, [r7, #30]
 800b0fe:	f107 0220 	add.w	r2, r7, #32
 800b102:	4413      	add	r3, r2
 800b104:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800b108:	7f7a      	ldrb	r2, [r7, #29]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d004      	beq.n	800b118 <REQ_ID+0x124>
 800b10e:	2008      	movs	r0, #8
 800b110:	f000 f886 	bl	800b220 <Error_write>
 800b114:	4603      	mov	r3, r0
 800b116:	77fb      	strb	r3, [r7, #31]


			if (status == STATUS_OK){
 800b118:	7ffb      	ldrb	r3, [r7, #31]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d136      	bne.n	800b18c <REQ_ID+0x198>
				for(i=0;i<5;i++) 	TransceiveBFF[6-i]=TransceiveBFF[4-i];
 800b11e:	2300      	movs	r3, #0
 800b120:	77bb      	strb	r3, [r7, #30]
 800b122:	e012      	b.n	800b14a <REQ_ID+0x156>
 800b124:	7fbb      	ldrb	r3, [r7, #30]
 800b126:	f1c3 0204 	rsb	r2, r3, #4
 800b12a:	7fbb      	ldrb	r3, [r7, #30]
 800b12c:	f1c3 0306 	rsb	r3, r3, #6
 800b130:	f107 0120 	add.w	r1, r7, #32
 800b134:	440a      	add	r2, r1
 800b136:	f812 2c18 	ldrb.w	r2, [r2, #-24]
 800b13a:	f107 0120 	add.w	r1, r7, #32
 800b13e:	440b      	add	r3, r1
 800b140:	f803 2c18 	strb.w	r2, [r3, #-24]
 800b144:	7fbb      	ldrb	r3, [r7, #30]
 800b146:	3301      	adds	r3, #1
 800b148:	77bb      	strb	r3, [r7, #30]
 800b14a:	7fbb      	ldrb	r3, [r7, #30]
 800b14c:	2b04      	cmp	r3, #4
 800b14e:	d9e9      	bls.n	800b124 <REQ_ID+0x130>

				TransceiveBFF[0] = Casecadelevel; //SEL
 800b150:	7f3b      	ldrb	r3, [r7, #28]
 800b152:	723b      	strb	r3, [r7, #8]
				TransceiveBFF[1] = 0x70;	//NVB 2Byte
 800b154:	2370      	movs	r3, #112	; 0x70
 800b156:	727b      	strb	r3, [r7, #9]
				CalulateCRC(TransceiveBFF,7,&TransceiveBFF[7]);
 800b158:	f107 0308 	add.w	r3, r7, #8
 800b15c:	1dda      	adds	r2, r3, #7
 800b15e:	f107 0308 	add.w	r3, r7, #8
 800b162:	2107      	movs	r1, #7
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff fba2 	bl	800a8ae <CalulateCRC>

				status = Comunicate_PCDPICC(PCD_CMD_Transceive,TransceiveBFF,9,TransceiveBFF,&RxbitLen);
 800b16a:	f107 0208 	add.w	r2, r7, #8
 800b16e:	f107 0108 	add.w	r1, r7, #8
 800b172:	f107 031a 	add.w	r3, r7, #26
 800b176:	9300      	str	r3, [sp, #0]
 800b178:	4613      	mov	r3, r2
 800b17a:	2209      	movs	r2, #9
 800b17c:	200c      	movs	r0, #12
 800b17e:	f7ff fbe3 	bl	800a948 <Comunicate_PCDPICC>
 800b182:	4603      	mov	r3, r0
 800b184:	77fb      	strb	r3, [r7, #31]

				PICC.SAK = TransceiveBFF[0];
 800b186:	7a3a      	ldrb	r2, [r7, #8]
 800b188:	4b20      	ldr	r3, [pc, #128]	; (800b20c <REQ_ID+0x218>)
 800b18a:	739a      	strb	r2, [r3, #14]
			}
		}

	}while((PICC.SAK&0x04)==0x04);
 800b18c:	4b1f      	ldr	r3, [pc, #124]	; (800b20c <REQ_ID+0x218>)
 800b18e:	7b9b      	ldrb	r3, [r3, #14]
 800b190:	f003 0304 	and.w	r3, r3, #4
 800b194:	2b00      	cmp	r3, #0
 800b196:	f47f af3c 	bne.w	800b012 <REQ_ID+0x1e>

	printf("Casecade level %d Completed\n\r",Casecadeflg);
 800b19a:	7efb      	ldrb	r3, [r7, #27]
 800b19c:	4619      	mov	r1, r3
 800b19e:	481d      	ldr	r0, [pc, #116]	; (800b214 <REQ_ID+0x220>)
 800b1a0:	f001 fa08 	bl	800c5b4 <iprintf>

	if(Casecadeflg != PICC.UIDSize+1) printf("Check the cascade level\n\r");
 800b1a4:	7efa      	ldrb	r2, [r7, #27]
 800b1a6:	4b19      	ldr	r3, [pc, #100]	; (800b20c <REQ_ID+0x218>)
 800b1a8:	7bdb      	ldrb	r3, [r3, #15]
 800b1aa:	3301      	adds	r3, #1
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d002      	beq.n	800b1b6 <REQ_ID+0x1c2>
 800b1b0:	4819      	ldr	r0, [pc, #100]	; (800b218 <REQ_ID+0x224>)
 800b1b2:	f001 f9ff 	bl	800c5b4 <iprintf>

	for(i=0;i<4;i++)	PICC.UID[(Casecadeflg-1)*3+i]= temp[i];
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	77bb      	strb	r3, [r7, #30]
 800b1ba:	e013      	b.n	800b1e4 <REQ_ID+0x1f0>
 800b1bc:	7fb9      	ldrb	r1, [r7, #30]
 800b1be:	7efb      	ldrb	r3, [r7, #27]
 800b1c0:	1e5a      	subs	r2, r3, #1
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	005b      	lsls	r3, r3, #1
 800b1c6:	441a      	add	r2, r3
 800b1c8:	7fbb      	ldrb	r3, [r7, #30]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	f107 0220 	add.w	r2, r7, #32
 800b1d0:	440a      	add	r2, r1
 800b1d2:	f812 1c20 	ldrb.w	r1, [r2, #-32]
 800b1d6:	4a0d      	ldr	r2, [pc, #52]	; (800b20c <REQ_ID+0x218>)
 800b1d8:	4413      	add	r3, r2
 800b1da:	460a      	mov	r2, r1
 800b1dc:	711a      	strb	r2, [r3, #4]
 800b1de:	7fbb      	ldrb	r3, [r7, #30]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	77bb      	strb	r3, [r7, #30]
 800b1e4:	7fbb      	ldrb	r3, [r7, #30]
 800b1e6:	2b03      	cmp	r3, #3
 800b1e8:	d9e8      	bls.n	800b1bc <REQ_ID+0x1c8>
	Check_ATQID(Casecadeflg);
 800b1ea:	7efb      	ldrb	r3, [r7, #27]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f7ff fc9f 	bl	800ab30 <Check_ATQID>
	PSTATUS = ACTIVE;
 800b1f2:	4b07      	ldr	r3, [pc, #28]	; (800b210 <REQ_ID+0x21c>)
 800b1f4:	2202      	movs	r2, #2
 800b1f6:	701a      	strb	r2, [r3, #0]
	printf("PICC Sequence Ready to ACTIVE\n\r");
 800b1f8:	4808      	ldr	r0, [pc, #32]	; (800b21c <REQ_ID+0x228>)
 800b1fa:	f001 f9db 	bl	800c5b4 <iprintf>
	SetRegisterBit_RFID(CollReg,0x80);//CollRegCollReg �106kbps��
 800b1fe:	2180      	movs	r1, #128	; 0x80
 800b200:	200e      	movs	r0, #14
 800b202:	f7ff fb20 	bl	800a846 <SetRegisterBit_RFID>
}
 800b206:	3720      	adds	r7, #32
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	200009e0 	.word	0x200009e0
 800b210:	200009bc 	.word	0x200009bc
 800b214:	08011168 	.word	0x08011168
 800b218:	08011188 	.word	0x08011188
 800b21c:	080111a4 	.word	0x080111a4

0800b220 <Error_write>:
		break;
	}
}

StatusCode Error_write(StatusCode status)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b082      	sub	sp, #8
 800b224:	af00      	add	r7, sp, #0
 800b226:	4603      	mov	r3, r0
 800b228:	71fb      	strb	r3, [r7, #7]
	switch(status){
 800b22a:	79fb      	ldrb	r3, [r7, #7]
 800b22c:	2b0a      	cmp	r3, #10
 800b22e:	dc1d      	bgt.n	800b26c <Error_write+0x4c>
 800b230:	2b00      	cmp	r3, #0
 800b232:	db50      	blt.n	800b2d6 <Error_write+0xb6>
 800b234:	2b0a      	cmp	r3, #10
 800b236:	d84e      	bhi.n	800b2d6 <Error_write+0xb6>
 800b238:	a201      	add	r2, pc, #4	; (adr r2, 800b240 <Error_write+0x20>)
 800b23a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b23e:	bf00      	nop
 800b240:	0800b273 	.word	0x0800b273
 800b244:	0800b277 	.word	0x0800b277
 800b248:	0800b27f 	.word	0x0800b27f
 800b24c:	0800b287 	.word	0x0800b287
 800b250:	0800b297 	.word	0x0800b297
 800b254:	0800b29f 	.word	0x0800b29f
 800b258:	0800b2a7 	.word	0x0800b2a7
 800b25c:	0800b2af 	.word	0x0800b2af
 800b260:	0800b2b7 	.word	0x0800b2b7
 800b264:	0800b2bf 	.word	0x0800b2bf
 800b268:	0800b2c7 	.word	0x0800b2c7
 800b26c:	2bff      	cmp	r3, #255	; 0xff
 800b26e:	d02e      	beq.n	800b2ce <Error_write+0xae>
		break;
	case STATUS_MIFARE_NACK:
		printf("A MIFARE PICC responded with NAK.\n\r");
		break;
	default:
		break;
 800b270:	e031      	b.n	800b2d6 <Error_write+0xb6>
		return status;
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	e033      	b.n	800b2de <Error_write+0xbe>
		printf("Error in communication\n\r");
 800b276:	481c      	ldr	r0, [pc, #112]	; (800b2e8 <Error_write+0xc8>)
 800b278:	f001 f99c 	bl	800c5b4 <iprintf>
		break;
 800b27c:	e02e      	b.n	800b2dc <Error_write+0xbc>
		printf("Collision detected\n\ r");
 800b27e:	481b      	ldr	r0, [pc, #108]	; (800b2ec <Error_write+0xcc>)
 800b280:	f001 f998 	bl	800c5b4 <iprintf>
		break;
 800b284:	e02a      	b.n	800b2dc <Error_write+0xbc>
		if(PSTATUS!=IDLE) printf("Timeout in communication\n\r");
 800b286:	4b1a      	ldr	r3, [pc, #104]	; (800b2f0 <Error_write+0xd0>)
 800b288:	781b      	ldrb	r3, [r3, #0]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d025      	beq.n	800b2da <Error_write+0xba>
 800b28e:	4819      	ldr	r0, [pc, #100]	; (800b2f4 <Error_write+0xd4>)
 800b290:	f001 f990 	bl	800c5b4 <iprintf>
		break;
 800b294:	e021      	b.n	800b2da <Error_write+0xba>
		printf("A buffer is not big enough.\n\r");
 800b296:	4818      	ldr	r0, [pc, #96]	; (800b2f8 <Error_write+0xd8>)
 800b298:	f001 f98c 	bl	800c5b4 <iprintf>
		break;
 800b29c:	e01e      	b.n	800b2dc <Error_write+0xbc>
		printf("Internal error in the code. Should not happen\n\r");
 800b29e:	4817      	ldr	r0, [pc, #92]	; (800b2fc <Error_write+0xdc>)
 800b2a0:	f001 f988 	bl	800c5b4 <iprintf>
		break;
 800b2a4:	e01a      	b.n	800b2dc <Error_write+0xbc>
		printf("Invalid argument.\n\r");
 800b2a6:	4816      	ldr	r0, [pc, #88]	; (800b300 <Error_write+0xe0>)
 800b2a8:	f001 f984 	bl	800c5b4 <iprintf>
		break;
 800b2ac:	e016      	b.n	800b2dc <Error_write+0xbc>
		printf("Error in KEY\n\r");
 800b2ae:	4815      	ldr	r0, [pc, #84]	; (800b304 <Error_write+0xe4>)
 800b2b0:	f001 f980 	bl	800c5b4 <iprintf>
		break;
 800b2b4:	e012      	b.n	800b2dc <Error_write+0xbc>
		printf("The BCC does not match\n\r");
 800b2b6:	4814      	ldr	r0, [pc, #80]	; (800b308 <Error_write+0xe8>)
 800b2b8:	f001 f97c 	bl	800c5b4 <iprintf>
		break;
 800b2bc:	e00e      	b.n	800b2dc <Error_write+0xbc>
		printf("The CRC_A does not match\n\r");
 800b2be:	4813      	ldr	r0, [pc, #76]	; (800b30c <Error_write+0xec>)
 800b2c0:	f001 f978 	bl	800c5b4 <iprintf>
		break;
 800b2c4:	e00a      	b.n	800b2dc <Error_write+0xbc>
		printf("Command does not match\n\r");
 800b2c6:	4812      	ldr	r0, [pc, #72]	; (800b310 <Error_write+0xf0>)
 800b2c8:	f001 f974 	bl	800c5b4 <iprintf>
		break;
 800b2cc:	e006      	b.n	800b2dc <Error_write+0xbc>
		printf("A MIFARE PICC responded with NAK.\n\r");
 800b2ce:	4811      	ldr	r0, [pc, #68]	; (800b314 <Error_write+0xf4>)
 800b2d0:	f001 f970 	bl	800c5b4 <iprintf>
		break;
 800b2d4:	e002      	b.n	800b2dc <Error_write+0xbc>
		break;
 800b2d6:	bf00      	nop
 800b2d8:	e000      	b.n	800b2dc <Error_write+0xbc>
		break;
 800b2da:	bf00      	nop
	}
	return status;
 800b2dc:	79fb      	ldrb	r3, [r7, #7]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3708      	adds	r7, #8
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	080117d4 	.word	0x080117d4
 800b2ec:	080117f0 	.word	0x080117f0
 800b2f0:	200009bc 	.word	0x200009bc
 800b2f4:	08011808 	.word	0x08011808
 800b2f8:	08011824 	.word	0x08011824
 800b2fc:	08011844 	.word	0x08011844
 800b300:	08011874 	.word	0x08011874
 800b304:	08011888 	.word	0x08011888
 800b308:	08011898 	.word	0x08011898
 800b30c:	080118b4 	.word	0x080118b4
 800b310:	080118d0 	.word	0x080118d0
 800b314:	080118ec 	.word	0x080118ec

0800b318 <MPU6050_reset>:
	lcdPrintf(MPU6050_str);
	#endif
}

void MPU6050_reset(void)
{
 800b318:	b480      	push	{r7}
 800b31a:	af00      	add	r7, sp, #0
	flag.angle_offset=1;
 800b31c:	4b05      	ldr	r3, [pc, #20]	; (800b334 <MPU6050_reset+0x1c>)
 800b31e:	2201      	movs	r2, #1
 800b320:	705a      	strb	r2, [r3, #1]
	preTimeMPU=0;
 800b322:	4b05      	ldr	r3, [pc, #20]	; (800b338 <MPU6050_reset+0x20>)
 800b324:	2200      	movs	r2, #0
 800b326:	601a      	str	r2, [r3, #0]
}
 800b328:	bf00      	nop
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr
 800b332:	bf00      	nop
 800b334:	2000005c 	.word	0x2000005c
 800b338:	20000ad8 	.word	0x20000ad8
 800b33c:	00000000 	.word	0x00000000

0800b340 <MPU6050_load_Angle>:
	sprintf(MPU6050_str,"%.2f C",MPU6050_Temperature);
}


void MPU6050_load_Angle(unsigned long milliseconds)
{
 800b340:	b5b0      	push	{r4, r5, r7, lr}
 800b342:	b08a      	sub	sp, #40	; 0x28
 800b344:	af04      	add	r7, sp, #16
 800b346:	6078      	str	r0, [r7, #4]
	double timePass;
	unsigned long present;
	static const double k = 3.0;
	HAL_I2C_Mem_Write(&hi2c1, I2C_DEVICE_ADDRESS, 0x6B, I2C_MEMADD_SIZE_8BIT, pData, 1, 500);								// Set Mode
 800b348:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b34c:	9302      	str	r3, [sp, #8]
 800b34e:	2301      	movs	r3, #1
 800b350:	9301      	str	r3, [sp, #4]
 800b352:	4b4f      	ldr	r3, [pc, #316]	; (800b490 <MPU6050_load_Angle+0x150>)
 800b354:	9300      	str	r3, [sp, #0]
 800b356:	2301      	movs	r3, #1
 800b358:	226b      	movs	r2, #107	; 0x6b
 800b35a:	21d0      	movs	r1, #208	; 0xd0
 800b35c:	484d      	ldr	r0, [pc, #308]	; (800b494 <MPU6050_load_Angle+0x154>)
 800b35e:	f7fa fd11 	bl	8005d84 <HAL_I2C_Mem_Write>
	MPU6050_getAccel(&accXangle, &accYangle);						// get accel value
 800b362:	494d      	ldr	r1, [pc, #308]	; (800b498 <MPU6050_load_Angle+0x158>)
 800b364:	484d      	ldr	r0, [pc, #308]	; (800b49c <MPU6050_load_Angle+0x15c>)
 800b366:	f000 f907 	bl	800b578 <MPU6050_getAccel>
	MPU6050_getGyro(&gyroXrate, &gyroYrate);						// get gyro value
 800b36a:	494d      	ldr	r1, [pc, #308]	; (800b4a0 <MPU6050_load_Angle+0x160>)
 800b36c:	484d      	ldr	r0, [pc, #308]	; (800b4a4 <MPU6050_load_Angle+0x164>)
 800b36e:	f000 f8af 	bl	800b4d0 <MPU6050_getGyro>

	present = milliseconds;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	617b      	str	r3, [r7, #20]
	timePass = (present - preTimeMPU)/1000.0;
 800b376:	4b4c      	ldr	r3, [pc, #304]	; (800b4a8 <MPU6050_load_Angle+0x168>)
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	697a      	ldr	r2, [r7, #20]
 800b37c:	1ad3      	subs	r3, r2, r3
 800b37e:	4618      	mov	r0, r3
 800b380:	f7f5 f8d0 	bl	8000524 <__aeabi_ui2d>
 800b384:	f04f 0200 	mov.w	r2, #0
 800b388:	4b48      	ldr	r3, [pc, #288]	; (800b4ac <MPU6050_load_Angle+0x16c>)
 800b38a:	f7f5 fa6f 	bl	800086c <__aeabi_ddiv>
 800b38e:	4602      	mov	r2, r0
 800b390:	460b      	mov	r3, r1
 800b392:	e9c7 2302 	strd	r2, r3, [r7, #8]
	preTimeMPU = present;
 800b396:	4a44      	ldr	r2, [pc, #272]	; (800b4a8 <MPU6050_load_Angle+0x168>)
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	6013      	str	r3, [r2, #0]
	A = k/(k+timePass);
 800b39c:	4b44      	ldr	r3, [pc, #272]	; (800b4b0 <MPU6050_load_Angle+0x170>)
 800b39e:	e9d3 4500 	ldrd	r4, r5, [r3]
 800b3a2:	4b43      	ldr	r3, [pc, #268]	; (800b4b0 <MPU6050_load_Angle+0x170>)
 800b3a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3ac:	f7f4 ff7e 	bl	80002ac <__adddf3>
 800b3b0:	4602      	mov	r2, r0
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	f7f5 fa58 	bl	800086c <__aeabi_ddiv>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	460b      	mov	r3, r1
 800b3c0:	493c      	ldr	r1, [pc, #240]	; (800b4b4 <MPU6050_load_Angle+0x174>)
 800b3c2:	e9c1 2300 	strd	r2, r3, [r1]

	if(flag.angle_offset){											// initial state
 800b3c6:	4b3c      	ldr	r3, [pc, #240]	; (800b4b8 <MPU6050_load_Angle+0x178>)
 800b3c8:	785b      	ldrb	r3, [r3, #1]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d009      	beq.n	800b3e2 <MPU6050_load_Angle+0xa2>
		flag.angle_offset = 0;
 800b3ce:	4b3a      	ldr	r3, [pc, #232]	; (800b4b8 <MPU6050_load_Angle+0x178>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	705a      	strb	r2, [r3, #1]
		//		gotXangle = accXangle;
		gotYangle = accYangle;
 800b3d4:	4b30      	ldr	r3, [pc, #192]	; (800b498 <MPU6050_load_Angle+0x158>)
 800b3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3da:	4938      	ldr	r1, [pc, #224]	; (800b4bc <MPU6050_load_Angle+0x17c>)
 800b3dc:	e9c1 2300 	strd	r2, r3, [r1]
 800b3e0:	e038      	b.n	800b454 <MPU6050_load_Angle+0x114>
	}
	else{
		//		gotXangle = A*(gotXangle + gyroXrate*timePass) + (1.0 - A)*accXangle;
		gotYangle = A*(gotYangle + gyroYrate*timePass) + (1.0 - A)*accYangle;
 800b3e2:	4b2f      	ldr	r3, [pc, #188]	; (800b4a0 <MPU6050_load_Angle+0x160>)
 800b3e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b3e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b3ec:	f7f5 f914 	bl	8000618 <__aeabi_dmul>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	4619      	mov	r1, r3
 800b3f8:	4b30      	ldr	r3, [pc, #192]	; (800b4bc <MPU6050_load_Angle+0x17c>)
 800b3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fe:	f7f4 ff55 	bl	80002ac <__adddf3>
 800b402:	4602      	mov	r2, r0
 800b404:	460b      	mov	r3, r1
 800b406:	4610      	mov	r0, r2
 800b408:	4619      	mov	r1, r3
 800b40a:	4b2a      	ldr	r3, [pc, #168]	; (800b4b4 <MPU6050_load_Angle+0x174>)
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	f7f5 f902 	bl	8000618 <__aeabi_dmul>
 800b414:	4602      	mov	r2, r0
 800b416:	460b      	mov	r3, r1
 800b418:	4614      	mov	r4, r2
 800b41a:	461d      	mov	r5, r3
 800b41c:	4b25      	ldr	r3, [pc, #148]	; (800b4b4 <MPU6050_load_Angle+0x174>)
 800b41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b422:	f04f 0000 	mov.w	r0, #0
 800b426:	4926      	ldr	r1, [pc, #152]	; (800b4c0 <MPU6050_load_Angle+0x180>)
 800b428:	f7f4 ff3e 	bl	80002a8 <__aeabi_dsub>
 800b42c:	4602      	mov	r2, r0
 800b42e:	460b      	mov	r3, r1
 800b430:	4610      	mov	r0, r2
 800b432:	4619      	mov	r1, r3
 800b434:	4b18      	ldr	r3, [pc, #96]	; (800b498 <MPU6050_load_Angle+0x158>)
 800b436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43a:	f7f5 f8ed 	bl	8000618 <__aeabi_dmul>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	4620      	mov	r0, r4
 800b444:	4629      	mov	r1, r5
 800b446:	f7f4 ff31 	bl	80002ac <__adddf3>
 800b44a:	4602      	mov	r2, r0
 800b44c:	460b      	mov	r3, r1
 800b44e:	491b      	ldr	r1, [pc, #108]	; (800b4bc <MPU6050_load_Angle+0x17c>)
 800b450:	e9c1 2300 	strd	r2, r3, [r1]
	}
	//	angleX = gotXangle -180.0+1.8;
	angleY = gotYangle -180.0-18.4;
 800b454:	4b19      	ldr	r3, [pc, #100]	; (800b4bc <MPU6050_load_Angle+0x17c>)
 800b456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b45a:	f04f 0200 	mov.w	r2, #0
 800b45e:	4b19      	ldr	r3, [pc, #100]	; (800b4c4 <MPU6050_load_Angle+0x184>)
 800b460:	f7f4 ff22 	bl	80002a8 <__aeabi_dsub>
 800b464:	4602      	mov	r2, r0
 800b466:	460b      	mov	r3, r1
 800b468:	4610      	mov	r0, r2
 800b46a:	4619      	mov	r1, r3
 800b46c:	a306      	add	r3, pc, #24	; (adr r3, 800b488 <MPU6050_load_Angle+0x148>)
 800b46e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b472:	f7f4 ff19 	bl	80002a8 <__aeabi_dsub>
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4913      	ldr	r1, [pc, #76]	; (800b4c8 <MPU6050_load_Angle+0x188>)
 800b47c:	e9c1 2300 	strd	r2, r3, [r1]

}
 800b480:	bf00      	nop
 800b482:	3718      	adds	r7, #24
 800b484:	46bd      	mov	sp, r7
 800b486:	bdb0      	pop	{r4, r5, r7, pc}
 800b488:	66666666 	.word	0x66666666
 800b48c:	40326666 	.word	0x40326666
 800b490:	20000060 	.word	0x20000060
 800b494:	200004b4 	.word	0x200004b4
 800b498:	20000b38 	.word	0x20000b38
 800b49c:	20000b08 	.word	0x20000b08
 800b4a0:	20000b00 	.word	0x20000b00
 800b4a4:	20000b18 	.word	0x20000b18
 800b4a8:	20000ad8 	.word	0x20000ad8
 800b4ac:	408f4000 	.word	0x408f4000
 800b4b0:	08014730 	.word	0x08014730
 800b4b4:	20000ad0 	.word	0x20000ad0
 800b4b8:	2000005c 	.word	0x2000005c
 800b4bc:	20000b10 	.word	0x20000b10
 800b4c0:	3ff00000 	.word	0x3ff00000
 800b4c4:	40668000 	.word	0x40668000
 800b4c8:	20000b50 	.word	0x20000b50
 800b4cc:	00000000 	.word	0x00000000

0800b4d0 <MPU6050_getGyro>:

void MPU6050_getGyro(double *gyroXrate, double *gyroYrate)
{
 800b4d0:	b580      	push	{r7, lr}
 800b4d2:	b088      	sub	sp, #32
 800b4d4:	af04      	add	r7, sp, #16
 800b4d6:	6078      	str	r0, [r7, #4]
 800b4d8:	6039      	str	r1, [r7, #0]
	uint8_t buffer[6] = {0, };
 800b4da:	2300      	movs	r3, #0
 800b4dc:	60bb      	str	r3, [r7, #8]
 800b4de:	2300      	movs	r3, #0
 800b4e0:	81bb      	strh	r3, [r7, #12]
	int16_t gyroX, gyroY, gyroZ;
	//	HAL_I2C_Mem_Read(&hi2c1, I2C_DEVICE_ADDRESS, 0x43, I2C_MEMADD_SIZE_8BIT, &buffer[0], 1, 500);
	//	HAL_I2C_Mem_Read(&hi2c1, I2C_DEVICE_ADDRESS, 0x44, I2C_MEMADD_SIZE_8BIT, &buffer[1], 1, 500);
	HAL_I2C_Mem_Read(&hi2c1, I2C_DEVICE_ADDRESS, 0x45, I2C_MEMADD_SIZE_8BIT, &buffer[2], 1, 500);
 800b4e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b4e6:	9302      	str	r3, [sp, #8]
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	9301      	str	r3, [sp, #4]
 800b4ec:	f107 0308 	add.w	r3, r7, #8
 800b4f0:	3302      	adds	r3, #2
 800b4f2:	9300      	str	r3, [sp, #0]
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	2245      	movs	r2, #69	; 0x45
 800b4f8:	21d0      	movs	r1, #208	; 0xd0
 800b4fa:	481d      	ldr	r0, [pc, #116]	; (800b570 <MPU6050_getGyro+0xa0>)
 800b4fc:	f7fa fd3c 	bl	8005f78 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, I2C_DEVICE_ADDRESS, 0x46, I2C_MEMADD_SIZE_8BIT, &buffer[3], 1, 500);
 800b500:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b504:	9302      	str	r3, [sp, #8]
 800b506:	2301      	movs	r3, #1
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	f107 0308 	add.w	r3, r7, #8
 800b50e:	3303      	adds	r3, #3
 800b510:	9300      	str	r3, [sp, #0]
 800b512:	2301      	movs	r3, #1
 800b514:	2246      	movs	r2, #70	; 0x46
 800b516:	21d0      	movs	r1, #208	; 0xd0
 800b518:	4815      	ldr	r0, [pc, #84]	; (800b570 <MPU6050_getGyro+0xa0>)
 800b51a:	f7fa fd2d 	bl	8005f78 <HAL_I2C_Mem_Read>
	//	HAL_I2C_Mem_Read(&hi2c1, I2C_DEVICE_ADDRESS, 0x47, I2C_MEMADD_SIZE_8BIT, &buffer[4], 1, 500);
	//	HAL_I2C_Mem_Read(&hi2c1, I2C_DEVICE_ADDRESS, 0x48, I2C_MEMADD_SIZE_8BIT, &buffer[5], 1, 500);
	//	gyroX = (int)buffer[0] << 8 | (int)buffer[1];
	gyroY = (int)buffer[2] << 8 | (int)buffer[3];
 800b51e:	7abb      	ldrb	r3, [r7, #10]
 800b520:	021b      	lsls	r3, r3, #8
 800b522:	b21a      	sxth	r2, r3
 800b524:	7afb      	ldrb	r3, [r7, #11]
 800b526:	b21b      	sxth	r3, r3
 800b528:	4313      	orrs	r3, r2
 800b52a:	81fb      	strh	r3, [r7, #14]
	//	gyroZ = (int)buffer[4] << 8 | (int)buffer[5];
	//	*gyroXrate = (double)gyroX/131.0+6.2;
	*gyroYrate = -((double)gyroY/131.0)+0.8;
 800b52c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b530:	4618      	mov	r0, r3
 800b532:	f7f5 f807 	bl	8000544 <__aeabi_i2d>
 800b536:	a30a      	add	r3, pc, #40	; (adr r3, 800b560 <MPU6050_getGyro+0x90>)
 800b538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53c:	f7f5 f996 	bl	800086c <__aeabi_ddiv>
 800b540:	4602      	mov	r2, r0
 800b542:	460b      	mov	r3, r1
 800b544:	a108      	add	r1, pc, #32	; (adr r1, 800b568 <MPU6050_getGyro+0x98>)
 800b546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b54a:	f7f4 fead 	bl	80002a8 <__aeabi_dsub>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	e9c1 2300 	strd	r2, r3, [r1]
}
 800b558:	bf00      	nop
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	00000000 	.word	0x00000000
 800b564:	40606000 	.word	0x40606000
 800b568:	9999999a 	.word	0x9999999a
 800b56c:	3fe99999 	.word	0x3fe99999
 800b570:	200004b4 	.word	0x200004b4
 800b574:	00000000 	.word	0x00000000

0800b578 <MPU6050_getAccel>:

void MPU6050_getAccel(double *accXangle, double *accYangle)
{
 800b578:	b5b0      	push	{r4, r5, r7, lr}
 800b57a:	b088      	sub	sp, #32
 800b57c:	af04      	add	r7, sp, #16
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
	uint8_t buffer[6] = {0, };
 800b582:	2300      	movs	r3, #0
 800b584:	60bb      	str	r3, [r7, #8]
 800b586:	2300      	movs	r3, #0
 800b588:	81bb      	strh	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, I2C_DEVICE_ADDRESS, 0x3B, I2C_MEMADD_SIZE_8BIT, &buffer[0], 1, 500);
 800b58a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b58e:	9302      	str	r3, [sp, #8]
 800b590:	2301      	movs	r3, #1
 800b592:	9301      	str	r3, [sp, #4]
 800b594:	f107 0308 	add.w	r3, r7, #8
 800b598:	9300      	str	r3, [sp, #0]
 800b59a:	2301      	movs	r3, #1
 800b59c:	223b      	movs	r2, #59	; 0x3b
 800b59e:	21d0      	movs	r1, #208	; 0xd0
 800b5a0:	483d      	ldr	r0, [pc, #244]	; (800b698 <MPU6050_getAccel+0x120>)
 800b5a2:	f7fa fce9 	bl	8005f78 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, I2C_DEVICE_ADDRESS, 0x3C, I2C_MEMADD_SIZE_8BIT, &buffer[1], 1, 500);
 800b5a6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b5aa:	9302      	str	r3, [sp, #8]
 800b5ac:	2301      	movs	r3, #1
 800b5ae:	9301      	str	r3, [sp, #4]
 800b5b0:	f107 0308 	add.w	r3, r7, #8
 800b5b4:	3301      	adds	r3, #1
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	223c      	movs	r2, #60	; 0x3c
 800b5bc:	21d0      	movs	r1, #208	; 0xd0
 800b5be:	4836      	ldr	r0, [pc, #216]	; (800b698 <MPU6050_getAccel+0x120>)
 800b5c0:	f7fa fcda 	bl	8005f78 <HAL_I2C_Mem_Read>
//	HAL_I2C_Mem_Read(&hi2c1, I2C_DEVICE_ADDRESS, 0x3D, I2C_MEMADD_SIZE_8BIT, &buffer[2], 1, 500);
//	HAL_I2C_Mem_Read(&hi2c1, I2C_DEVICE_ADDRESS, 0x3E, I2C_MEMADD_SIZE_8BIT, &buffer[3], 1, 500);
	HAL_I2C_Mem_Read(&hi2c1, I2C_DEVICE_ADDRESS, 0x3F, I2C_MEMADD_SIZE_8BIT, &buffer[4], 1, 500);
 800b5c4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b5c8:	9302      	str	r3, [sp, #8]
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	9301      	str	r3, [sp, #4]
 800b5ce:	f107 0308 	add.w	r3, r7, #8
 800b5d2:	3304      	adds	r3, #4
 800b5d4:	9300      	str	r3, [sp, #0]
 800b5d6:	2301      	movs	r3, #1
 800b5d8:	223f      	movs	r2, #63	; 0x3f
 800b5da:	21d0      	movs	r1, #208	; 0xd0
 800b5dc:	482e      	ldr	r0, [pc, #184]	; (800b698 <MPU6050_getAccel+0x120>)
 800b5de:	f7fa fccb 	bl	8005f78 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, I2C_DEVICE_ADDRESS, 0x40, I2C_MEMADD_SIZE_8BIT, &buffer[5], 1, 500);
 800b5e2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b5e6:	9302      	str	r3, [sp, #8]
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	9301      	str	r3, [sp, #4]
 800b5ec:	f107 0308 	add.w	r3, r7, #8
 800b5f0:	3305      	adds	r3, #5
 800b5f2:	9300      	str	r3, [sp, #0]
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	2240      	movs	r2, #64	; 0x40
 800b5f8:	21d0      	movs	r1, #208	; 0xd0
 800b5fa:	4827      	ldr	r0, [pc, #156]	; (800b698 <MPU6050_getAccel+0x120>)
 800b5fc:	f7fa fcbc 	bl	8005f78 <HAL_I2C_Mem_Read>
	accX = (int)buffer[0] << 8 | (int)buffer[1];
 800b600:	7a3b      	ldrb	r3, [r7, #8]
 800b602:	021b      	lsls	r3, r3, #8
 800b604:	b21a      	sxth	r2, r3
 800b606:	7a7b      	ldrb	r3, [r7, #9]
 800b608:	b21b      	sxth	r3, r3
 800b60a:	4313      	orrs	r3, r2
 800b60c:	b21a      	sxth	r2, r3
 800b60e:	4b23      	ldr	r3, [pc, #140]	; (800b69c <MPU6050_getAccel+0x124>)
 800b610:	801a      	strh	r2, [r3, #0]
	//	accY = (int)buffer[2] << 8 | (int)buffer[3];
	accZ = (int)buffer[4] << 8 | (int)buffer[5];
 800b612:	7b3b      	ldrb	r3, [r7, #12]
 800b614:	021b      	lsls	r3, r3, #8
 800b616:	b21a      	sxth	r2, r3
 800b618:	7b7b      	ldrb	r3, [r7, #13]
 800b61a:	b21b      	sxth	r3, r3
 800b61c:	4313      	orrs	r3, r2
 800b61e:	b21a      	sxth	r2, r3
 800b620:	4b1f      	ldr	r3, [pc, #124]	; (800b6a0 <MPU6050_getAccel+0x128>)
 800b622:	801a      	strh	r2, [r3, #0]
	//	*accXangle = (atan2(accY,accZ)+PI)*RAD2DEG;
	*accYangle = (atan2(accX,accZ)+PI)*RAD2DEG;
 800b624:	4b1d      	ldr	r3, [pc, #116]	; (800b69c <MPU6050_getAccel+0x124>)
 800b626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b62a:	4618      	mov	r0, r3
 800b62c:	f7f4 ff8a 	bl	8000544 <__aeabi_i2d>
 800b630:	4604      	mov	r4, r0
 800b632:	460d      	mov	r5, r1
 800b634:	4b1a      	ldr	r3, [pc, #104]	; (800b6a0 <MPU6050_getAccel+0x128>)
 800b636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7f4 ff82 	bl	8000544 <__aeabi_i2d>
 800b640:	4602      	mov	r2, r0
 800b642:	460b      	mov	r3, r1
 800b644:	ec43 2b11 	vmov	d1, r2, r3
 800b648:	ec45 4b10 	vmov	d0, r4, r5
 800b64c:	f004 fe0a 	bl	8010264 <atan2>
 800b650:	ec51 0b10 	vmov	r0, r1, d0
 800b654:	a30c      	add	r3, pc, #48	; (adr r3, 800b688 <MPU6050_getAccel+0x110>)
 800b656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65a:	f7f4 fe27 	bl	80002ac <__adddf3>
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	4610      	mov	r0, r2
 800b664:	4619      	mov	r1, r3
 800b666:	a30a      	add	r3, pc, #40	; (adr r3, 800b690 <MPU6050_getAccel+0x118>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	f7f4 ffd4 	bl	8000618 <__aeabi_dmul>
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	6839      	ldr	r1, [r7, #0]
 800b676:	e9c1 2300 	strd	r2, r3, [r1]
}
 800b67a:	bf00      	nop
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bdb0      	pop	{r4, r5, r7, pc}
 800b682:	bf00      	nop
 800b684:	f3af 8000 	nop.w
 800b688:	53c8d4f1 	.word	0x53c8d4f1
 800b68c:	400921fb 	.word	0x400921fb
 800b690:	12baeda7 	.word	0x12baeda7
 800b694:	404ca5dc 	.word	0x404ca5dc
 800b698:	200004b4 	.word	0x200004b4
 800b69c:	20000b58 	.word	0x20000b58
 800b6a0:	20000adc 	.word	0x20000adc

0800b6a4 <XPT2046_TouchSelect>:

#define READ_X 0x90
#define READ_Y 0xD0

static void XPT2046_TouchSelect()
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_RESET);
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	2104      	movs	r1, #4
 800b6ac:	4802      	ldr	r0, [pc, #8]	; (800b6b8 <XPT2046_TouchSelect+0x14>)
 800b6ae:	f7fa f9d9 	bl	8005a64 <HAL_GPIO_WritePin>
}
 800b6b2:	bf00      	nop
 800b6b4:	bd80      	pop	{r7, pc}
 800b6b6:	bf00      	nop
 800b6b8:	40021400 	.word	0x40021400

0800b6bc <XPT2046_TouchUnselect>:

static void XPT2046_TouchUnselect()
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(XPT2046_CS_GPIO_Port, XPT2046_CS_Pin, GPIO_PIN_SET);
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	2104      	movs	r1, #4
 800b6c4:	4802      	ldr	r0, [pc, #8]	; (800b6d0 <XPT2046_TouchUnselect+0x14>)
 800b6c6:	f7fa f9cd 	bl	8005a64 <HAL_GPIO_WritePin>
}
 800b6ca:	bf00      	nop
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	40021400 	.word	0x40021400

0800b6d4 <XPT2046_TouchPressed>:

bool XPT2046_TouchPressed()
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(XPT2046_IRQ_GPIO_Port, XPT2046_IRQ_Pin) == GPIO_PIN_RESET;
 800b6d8:	2120      	movs	r1, #32
 800b6da:	4805      	ldr	r0, [pc, #20]	; (800b6f0 <XPT2046_TouchPressed+0x1c>)
 800b6dc:	f7fa f9aa 	bl	8005a34 <HAL_GPIO_ReadPin>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	bf0c      	ite	eq
 800b6e6:	2301      	moveq	r3, #1
 800b6e8:	2300      	movne	r3, #0
 800b6ea:	b2db      	uxtb	r3, r3
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	40021400 	.word	0x40021400

0800b6f4 <XPT2046_TouchGetCoordinates>:

bool XPT2046_TouchGetCoordinates(uint16_t* x, uint16_t* y)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08c      	sub	sp, #48	; 0x30
 800b6f8:	af02      	add	r7, sp, #8
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
    static const uint8_t cmd_read_x[] = { READ_X };
    static const uint8_t cmd_read_y[] = { READ_Y };
    static const uint8_t zeroes_tx[] = { 0x00, 0x00 };

    XPT2046_TouchSelect();
 800b6fe:	f7ff ffd1 	bl	800b6a4 <XPT2046_TouchSelect>

    uint32_t avg_x = 0;
 800b702:	2300      	movs	r3, #0
 800b704:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 800b706:	2300      	movs	r3, #0
 800b708:	623b      	str	r3, [r7, #32]
    uint8_t nsamples = 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	77fb      	strb	r3, [r7, #31]

    for(uint8_t i = 0; i < 16; i++)
 800b70e:	2300      	movs	r3, #0
 800b710:	77bb      	strb	r3, [r7, #30]
 800b712:	e03f      	b.n	800b794 <XPT2046_TouchGetCoordinates+0xa0>
    {
        if(!XPT2046_TouchPressed())
 800b714:	f7ff ffde 	bl	800b6d4 <XPT2046_TouchPressed>
 800b718:	4603      	mov	r3, r0
 800b71a:	f083 0301 	eor.w	r3, r3, #1
 800b71e:	b2db      	uxtb	r3, r3
 800b720:	2b00      	cmp	r3, #0
 800b722:	d13b      	bne.n	800b79c <XPT2046_TouchGetCoordinates+0xa8>
            break;

        nsamples++;
 800b724:	7ffb      	ldrb	r3, [r7, #31]
 800b726:	3301      	adds	r3, #1
 800b728:	77fb      	strb	r3, [r7, #31]

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_y, sizeof(cmd_read_y), HAL_MAX_DELAY);
 800b72a:	f04f 33ff 	mov.w	r3, #4294967295
 800b72e:	2201      	movs	r2, #1
 800b730:	4944      	ldr	r1, [pc, #272]	; (800b844 <XPT2046_TouchGetCoordinates+0x150>)
 800b732:	4845      	ldr	r0, [pc, #276]	; (800b848 <XPT2046_TouchGetCoordinates+0x154>)
 800b734:	f7fc f863 	bl	80077fe <HAL_SPI_Transmit>
        uint8_t y_raw[2];
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, y_raw, sizeof(y_raw), HAL_MAX_DELAY);
 800b738:	f107 0210 	add.w	r2, r7, #16
 800b73c:	f04f 33ff 	mov.w	r3, #4294967295
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	2302      	movs	r3, #2
 800b744:	4941      	ldr	r1, [pc, #260]	; (800b84c <XPT2046_TouchGetCoordinates+0x158>)
 800b746:	4840      	ldr	r0, [pc, #256]	; (800b848 <XPT2046_TouchGetCoordinates+0x154>)
 800b748:	f7fc faa6 	bl	8007c98 <HAL_SPI_TransmitReceive>

        HAL_SPI_Transmit(&XPT2046_SPI_PORT, (uint8_t*)cmd_read_x, sizeof(cmd_read_x), HAL_MAX_DELAY);
 800b74c:	f04f 33ff 	mov.w	r3, #4294967295
 800b750:	2201      	movs	r2, #1
 800b752:	493f      	ldr	r1, [pc, #252]	; (800b850 <XPT2046_TouchGetCoordinates+0x15c>)
 800b754:	483c      	ldr	r0, [pc, #240]	; (800b848 <XPT2046_TouchGetCoordinates+0x154>)
 800b756:	f7fc f852 	bl	80077fe <HAL_SPI_Transmit>
        uint8_t x_raw[2];
        HAL_SPI_TransmitReceive(&XPT2046_SPI_PORT, (uint8_t*)zeroes_tx, x_raw, sizeof(x_raw), HAL_MAX_DELAY);
 800b75a:	f107 020c 	add.w	r2, r7, #12
 800b75e:	f04f 33ff 	mov.w	r3, #4294967295
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	2302      	movs	r3, #2
 800b766:	4939      	ldr	r1, [pc, #228]	; (800b84c <XPT2046_TouchGetCoordinates+0x158>)
 800b768:	4837      	ldr	r0, [pc, #220]	; (800b848 <XPT2046_TouchGetCoordinates+0x154>)
 800b76a:	f7fc fa95 	bl	8007c98 <HAL_SPI_TransmitReceive>

        avg_x += (((uint16_t)x_raw[0]) << 8) | ((uint16_t)x_raw[1]);
 800b76e:	7b3b      	ldrb	r3, [r7, #12]
 800b770:	021b      	lsls	r3, r3, #8
 800b772:	7b7a      	ldrb	r2, [r7, #13]
 800b774:	4313      	orrs	r3, r2
 800b776:	461a      	mov	r2, r3
 800b778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b77a:	4413      	add	r3, r2
 800b77c:	627b      	str	r3, [r7, #36]	; 0x24
        avg_y += (((uint16_t)y_raw[0]) << 8) | ((uint16_t)y_raw[1]);
 800b77e:	7c3b      	ldrb	r3, [r7, #16]
 800b780:	021b      	lsls	r3, r3, #8
 800b782:	7c7a      	ldrb	r2, [r7, #17]
 800b784:	4313      	orrs	r3, r2
 800b786:	461a      	mov	r2, r3
 800b788:	6a3b      	ldr	r3, [r7, #32]
 800b78a:	4413      	add	r3, r2
 800b78c:	623b      	str	r3, [r7, #32]
    for(uint8_t i = 0; i < 16; i++)
 800b78e:	7fbb      	ldrb	r3, [r7, #30]
 800b790:	3301      	adds	r3, #1
 800b792:	77bb      	strb	r3, [r7, #30]
 800b794:	7fbb      	ldrb	r3, [r7, #30]
 800b796:	2b0f      	cmp	r3, #15
 800b798:	d9bc      	bls.n	800b714 <XPT2046_TouchGetCoordinates+0x20>
 800b79a:	e000      	b.n	800b79e <XPT2046_TouchGetCoordinates+0xaa>
            break;
 800b79c:	bf00      	nop
    }

    XPT2046_TouchUnselect();
 800b79e:	f7ff ff8d 	bl	800b6bc <XPT2046_TouchUnselect>

    if(nsamples < 16)
 800b7a2:	7ffb      	ldrb	r3, [r7, #31]
 800b7a4:	2b0f      	cmp	r3, #15
 800b7a6:	d801      	bhi.n	800b7ac <XPT2046_TouchGetCoordinates+0xb8>
        return false;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	e047      	b.n	800b83c <XPT2046_TouchGetCoordinates+0x148>

    uint32_t raw_x = (avg_x / 16);
 800b7ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7ae:	091b      	lsrs	r3, r3, #4
 800b7b0:	61bb      	str	r3, [r7, #24]
    if(raw_x < XPT2046_MIN_RAW_X) raw_x = XPT2046_MIN_RAW_X;
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	f240 52db 	movw	r2, #1499	; 0x5db
 800b7b8:	4293      	cmp	r3, r2
 800b7ba:	d802      	bhi.n	800b7c2 <XPT2046_TouchGetCoordinates+0xce>
 800b7bc:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800b7c0:	61bb      	str	r3, [r7, #24]
    if(raw_x > XPT2046_MAX_RAW_X) raw_x = XPT2046_MAX_RAW_X;
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	f647 1218 	movw	r2, #31000	; 0x7918
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d902      	bls.n	800b7d2 <XPT2046_TouchGetCoordinates+0xde>
 800b7cc:	f647 1318 	movw	r3, #31000	; 0x7918
 800b7d0:	61bb      	str	r3, [r7, #24]

    uint32_t raw_y = (avg_y / 16);
 800b7d2:	6a3b      	ldr	r3, [r7, #32]
 800b7d4:	091b      	lsrs	r3, r3, #4
 800b7d6:	617b      	str	r3, [r7, #20]
    if(raw_y < XPT2046_MIN_RAW_Y) raw_y = XPT2046_MIN_RAW_Y;
 800b7d8:	697b      	ldr	r3, [r7, #20]
 800b7da:	f640 42cb 	movw	r2, #3275	; 0xccb
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d802      	bhi.n	800b7e8 <XPT2046_TouchGetCoordinates+0xf4>
 800b7e2:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b7e6:	617b      	str	r3, [r7, #20]
    if(raw_y > XPT2046_MAX_RAW_Y) raw_y = XPT2046_MAX_RAW_Y;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	f247 529e 	movw	r2, #30110	; 0x759e
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d902      	bls.n	800b7f8 <XPT2046_TouchGetCoordinates+0x104>
 800b7f2:	f247 539e 	movw	r3, #30110	; 0x759e
 800b7f6:	617b      	str	r3, [r7, #20]

    *x = (raw_x - XPT2046_MIN_RAW_X) * XPT2046_SCALE_X / (XPT2046_MAX_RAW_X - XPT2046_MIN_RAW_X);
 800b7f8:	69ba      	ldr	r2, [r7, #24]
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	009b      	lsls	r3, r3, #2
 800b7fe:	4413      	add	r3, r2
 800b800:	019b      	lsls	r3, r3, #6
 800b802:	f5a3 23ea 	sub.w	r3, r3, #479232	; 0x75000
 800b806:	f5a3 7340 	sub.w	r3, r3, #768	; 0x300
 800b80a:	4a12      	ldr	r2, [pc, #72]	; (800b854 <XPT2046_TouchGetCoordinates+0x160>)
 800b80c:	fba2 2303 	umull	r2, r3, r2, r3
 800b810:	0b9b      	lsrs	r3, r3, #14
 800b812:	b29a      	uxth	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	801a      	strh	r2, [r3, #0]
    *y = (raw_y - XPT2046_MIN_RAW_Y) * XPT2046_SCALE_Y / (XPT2046_MAX_RAW_Y - XPT2046_MIN_RAW_Y);
 800b818:	697a      	ldr	r2, [r7, #20]
 800b81a:	4613      	mov	r3, r2
 800b81c:	011b      	lsls	r3, r3, #4
 800b81e:	1a9b      	subs	r3, r3, r2
 800b820:	011b      	lsls	r3, r3, #4
 800b822:	f5a3 233f 	sub.w	r3, r3, #782336	; 0xbf000
 800b826:	f5a3 6374 	sub.w	r3, r3, #3904	; 0xf40
 800b82a:	085b      	lsrs	r3, r3, #1
 800b82c:	4a0a      	ldr	r2, [pc, #40]	; (800b858 <XPT2046_TouchGetCoordinates+0x164>)
 800b82e:	fba2 2303 	umull	r2, r3, r2, r3
 800b832:	0a9b      	lsrs	r3, r3, #10
 800b834:	b29a      	uxth	r2, r3
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	801a      	strh	r2, [r3, #0]

    return true;
 800b83a:	2301      	movs	r3, #1
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3728      	adds	r7, #40	; 0x28
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	08014738 	.word	0x08014738
 800b848:	200007ec 	.word	0x200007ec
 800b84c:	0801473c 	.word	0x0801473c
 800b850:	08014740 	.word	0x08014740
 800b854:	8e2e0727 	.word	0x8e2e0727
 800b858:	1389c755 	.word	0x1389c755

0800b85c <__errno>:
 800b85c:	4b01      	ldr	r3, [pc, #4]	; (800b864 <__errno+0x8>)
 800b85e:	6818      	ldr	r0, [r3, #0]
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	20000064 	.word	0x20000064

0800b868 <__libc_init_array>:
 800b868:	b570      	push	{r4, r5, r6, lr}
 800b86a:	4d0d      	ldr	r5, [pc, #52]	; (800b8a0 <__libc_init_array+0x38>)
 800b86c:	4c0d      	ldr	r4, [pc, #52]	; (800b8a4 <__libc_init_array+0x3c>)
 800b86e:	1b64      	subs	r4, r4, r5
 800b870:	10a4      	asrs	r4, r4, #2
 800b872:	2600      	movs	r6, #0
 800b874:	42a6      	cmp	r6, r4
 800b876:	d109      	bne.n	800b88c <__libc_init_array+0x24>
 800b878:	4d0b      	ldr	r5, [pc, #44]	; (800b8a8 <__libc_init_array+0x40>)
 800b87a:	4c0c      	ldr	r4, [pc, #48]	; (800b8ac <__libc_init_array+0x44>)
 800b87c:	f004 ff6a 	bl	8010754 <_init>
 800b880:	1b64      	subs	r4, r4, r5
 800b882:	10a4      	asrs	r4, r4, #2
 800b884:	2600      	movs	r6, #0
 800b886:	42a6      	cmp	r6, r4
 800b888:	d105      	bne.n	800b896 <__libc_init_array+0x2e>
 800b88a:	bd70      	pop	{r4, r5, r6, pc}
 800b88c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b890:	4798      	blx	r3
 800b892:	3601      	adds	r6, #1
 800b894:	e7ee      	b.n	800b874 <__libc_init_array+0xc>
 800b896:	f855 3b04 	ldr.w	r3, [r5], #4
 800b89a:	4798      	blx	r3
 800b89c:	3601      	adds	r6, #1
 800b89e:	e7f2      	b.n	800b886 <__libc_init_array+0x1e>
 800b8a0:	08014c78 	.word	0x08014c78
 800b8a4:	08014c78 	.word	0x08014c78
 800b8a8:	08014c78 	.word	0x08014c78
 800b8ac:	08014c7c 	.word	0x08014c7c

0800b8b0 <memset>:
 800b8b0:	4402      	add	r2, r0
 800b8b2:	4603      	mov	r3, r0
 800b8b4:	4293      	cmp	r3, r2
 800b8b6:	d100      	bne.n	800b8ba <memset+0xa>
 800b8b8:	4770      	bx	lr
 800b8ba:	f803 1b01 	strb.w	r1, [r3], #1
 800b8be:	e7f9      	b.n	800b8b4 <memset+0x4>

0800b8c0 <__cvt>:
 800b8c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b8c4:	ec55 4b10 	vmov	r4, r5, d0
 800b8c8:	2d00      	cmp	r5, #0
 800b8ca:	460e      	mov	r6, r1
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	462b      	mov	r3, r5
 800b8d0:	bfbb      	ittet	lt
 800b8d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b8d6:	461d      	movlt	r5, r3
 800b8d8:	2300      	movge	r3, #0
 800b8da:	232d      	movlt	r3, #45	; 0x2d
 800b8dc:	700b      	strb	r3, [r1, #0]
 800b8de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b8e4:	4691      	mov	r9, r2
 800b8e6:	f023 0820 	bic.w	r8, r3, #32
 800b8ea:	bfbc      	itt	lt
 800b8ec:	4622      	movlt	r2, r4
 800b8ee:	4614      	movlt	r4, r2
 800b8f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b8f4:	d005      	beq.n	800b902 <__cvt+0x42>
 800b8f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b8fa:	d100      	bne.n	800b8fe <__cvt+0x3e>
 800b8fc:	3601      	adds	r6, #1
 800b8fe:	2102      	movs	r1, #2
 800b900:	e000      	b.n	800b904 <__cvt+0x44>
 800b902:	2103      	movs	r1, #3
 800b904:	ab03      	add	r3, sp, #12
 800b906:	9301      	str	r3, [sp, #4]
 800b908:	ab02      	add	r3, sp, #8
 800b90a:	9300      	str	r3, [sp, #0]
 800b90c:	ec45 4b10 	vmov	d0, r4, r5
 800b910:	4653      	mov	r3, sl
 800b912:	4632      	mov	r2, r6
 800b914:	f001 ff24 	bl	800d760 <_dtoa_r>
 800b918:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b91c:	4607      	mov	r7, r0
 800b91e:	d102      	bne.n	800b926 <__cvt+0x66>
 800b920:	f019 0f01 	tst.w	r9, #1
 800b924:	d022      	beq.n	800b96c <__cvt+0xac>
 800b926:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b92a:	eb07 0906 	add.w	r9, r7, r6
 800b92e:	d110      	bne.n	800b952 <__cvt+0x92>
 800b930:	783b      	ldrb	r3, [r7, #0]
 800b932:	2b30      	cmp	r3, #48	; 0x30
 800b934:	d10a      	bne.n	800b94c <__cvt+0x8c>
 800b936:	2200      	movs	r2, #0
 800b938:	2300      	movs	r3, #0
 800b93a:	4620      	mov	r0, r4
 800b93c:	4629      	mov	r1, r5
 800b93e:	f7f5 f8d3 	bl	8000ae8 <__aeabi_dcmpeq>
 800b942:	b918      	cbnz	r0, 800b94c <__cvt+0x8c>
 800b944:	f1c6 0601 	rsb	r6, r6, #1
 800b948:	f8ca 6000 	str.w	r6, [sl]
 800b94c:	f8da 3000 	ldr.w	r3, [sl]
 800b950:	4499      	add	r9, r3
 800b952:	2200      	movs	r2, #0
 800b954:	2300      	movs	r3, #0
 800b956:	4620      	mov	r0, r4
 800b958:	4629      	mov	r1, r5
 800b95a:	f7f5 f8c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800b95e:	b108      	cbz	r0, 800b964 <__cvt+0xa4>
 800b960:	f8cd 900c 	str.w	r9, [sp, #12]
 800b964:	2230      	movs	r2, #48	; 0x30
 800b966:	9b03      	ldr	r3, [sp, #12]
 800b968:	454b      	cmp	r3, r9
 800b96a:	d307      	bcc.n	800b97c <__cvt+0xbc>
 800b96c:	9b03      	ldr	r3, [sp, #12]
 800b96e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b970:	1bdb      	subs	r3, r3, r7
 800b972:	4638      	mov	r0, r7
 800b974:	6013      	str	r3, [r2, #0]
 800b976:	b004      	add	sp, #16
 800b978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b97c:	1c59      	adds	r1, r3, #1
 800b97e:	9103      	str	r1, [sp, #12]
 800b980:	701a      	strb	r2, [r3, #0]
 800b982:	e7f0      	b.n	800b966 <__cvt+0xa6>

0800b984 <__exponent>:
 800b984:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b986:	4603      	mov	r3, r0
 800b988:	2900      	cmp	r1, #0
 800b98a:	bfb8      	it	lt
 800b98c:	4249      	neglt	r1, r1
 800b98e:	f803 2b02 	strb.w	r2, [r3], #2
 800b992:	bfb4      	ite	lt
 800b994:	222d      	movlt	r2, #45	; 0x2d
 800b996:	222b      	movge	r2, #43	; 0x2b
 800b998:	2909      	cmp	r1, #9
 800b99a:	7042      	strb	r2, [r0, #1]
 800b99c:	dd2a      	ble.n	800b9f4 <__exponent+0x70>
 800b99e:	f10d 0407 	add.w	r4, sp, #7
 800b9a2:	46a4      	mov	ip, r4
 800b9a4:	270a      	movs	r7, #10
 800b9a6:	46a6      	mov	lr, r4
 800b9a8:	460a      	mov	r2, r1
 800b9aa:	fb91 f6f7 	sdiv	r6, r1, r7
 800b9ae:	fb07 1516 	mls	r5, r7, r6, r1
 800b9b2:	3530      	adds	r5, #48	; 0x30
 800b9b4:	2a63      	cmp	r2, #99	; 0x63
 800b9b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800b9ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b9be:	4631      	mov	r1, r6
 800b9c0:	dcf1      	bgt.n	800b9a6 <__exponent+0x22>
 800b9c2:	3130      	adds	r1, #48	; 0x30
 800b9c4:	f1ae 0502 	sub.w	r5, lr, #2
 800b9c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b9cc:	1c44      	adds	r4, r0, #1
 800b9ce:	4629      	mov	r1, r5
 800b9d0:	4561      	cmp	r1, ip
 800b9d2:	d30a      	bcc.n	800b9ea <__exponent+0x66>
 800b9d4:	f10d 0209 	add.w	r2, sp, #9
 800b9d8:	eba2 020e 	sub.w	r2, r2, lr
 800b9dc:	4565      	cmp	r5, ip
 800b9de:	bf88      	it	hi
 800b9e0:	2200      	movhi	r2, #0
 800b9e2:	4413      	add	r3, r2
 800b9e4:	1a18      	subs	r0, r3, r0
 800b9e6:	b003      	add	sp, #12
 800b9e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b9f2:	e7ed      	b.n	800b9d0 <__exponent+0x4c>
 800b9f4:	2330      	movs	r3, #48	; 0x30
 800b9f6:	3130      	adds	r1, #48	; 0x30
 800b9f8:	7083      	strb	r3, [r0, #2]
 800b9fa:	70c1      	strb	r1, [r0, #3]
 800b9fc:	1d03      	adds	r3, r0, #4
 800b9fe:	e7f1      	b.n	800b9e4 <__exponent+0x60>

0800ba00 <_printf_float>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	ed2d 8b02 	vpush	{d8}
 800ba08:	b08d      	sub	sp, #52	; 0x34
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ba10:	4616      	mov	r6, r2
 800ba12:	461f      	mov	r7, r3
 800ba14:	4605      	mov	r5, r0
 800ba16:	f003 f9b5 	bl	800ed84 <_localeconv_r>
 800ba1a:	f8d0 a000 	ldr.w	sl, [r0]
 800ba1e:	4650      	mov	r0, sl
 800ba20:	f7f4 fbe6 	bl	80001f0 <strlen>
 800ba24:	2300      	movs	r3, #0
 800ba26:	930a      	str	r3, [sp, #40]	; 0x28
 800ba28:	6823      	ldr	r3, [r4, #0]
 800ba2a:	9305      	str	r3, [sp, #20]
 800ba2c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba30:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ba34:	3307      	adds	r3, #7
 800ba36:	f023 0307 	bic.w	r3, r3, #7
 800ba3a:	f103 0208 	add.w	r2, r3, #8
 800ba3e:	f8c8 2000 	str.w	r2, [r8]
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ba4a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ba4e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ba52:	9307      	str	r3, [sp, #28]
 800ba54:	f8cd 8018 	str.w	r8, [sp, #24]
 800ba58:	ee08 0a10 	vmov	s16, r0
 800ba5c:	4b9f      	ldr	r3, [pc, #636]	; (800bcdc <_printf_float+0x2dc>)
 800ba5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba62:	f04f 32ff 	mov.w	r2, #4294967295
 800ba66:	f7f5 f871 	bl	8000b4c <__aeabi_dcmpun>
 800ba6a:	bb88      	cbnz	r0, 800bad0 <_printf_float+0xd0>
 800ba6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba70:	4b9a      	ldr	r3, [pc, #616]	; (800bcdc <_printf_float+0x2dc>)
 800ba72:	f04f 32ff 	mov.w	r2, #4294967295
 800ba76:	f7f5 f84b 	bl	8000b10 <__aeabi_dcmple>
 800ba7a:	bb48      	cbnz	r0, 800bad0 <_printf_float+0xd0>
 800ba7c:	2200      	movs	r2, #0
 800ba7e:	2300      	movs	r3, #0
 800ba80:	4640      	mov	r0, r8
 800ba82:	4649      	mov	r1, r9
 800ba84:	f7f5 f83a 	bl	8000afc <__aeabi_dcmplt>
 800ba88:	b110      	cbz	r0, 800ba90 <_printf_float+0x90>
 800ba8a:	232d      	movs	r3, #45	; 0x2d
 800ba8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba90:	4b93      	ldr	r3, [pc, #588]	; (800bce0 <_printf_float+0x2e0>)
 800ba92:	4894      	ldr	r0, [pc, #592]	; (800bce4 <_printf_float+0x2e4>)
 800ba94:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ba98:	bf94      	ite	ls
 800ba9a:	4698      	movls	r8, r3
 800ba9c:	4680      	movhi	r8, r0
 800ba9e:	2303      	movs	r3, #3
 800baa0:	6123      	str	r3, [r4, #16]
 800baa2:	9b05      	ldr	r3, [sp, #20]
 800baa4:	f023 0204 	bic.w	r2, r3, #4
 800baa8:	6022      	str	r2, [r4, #0]
 800baaa:	f04f 0900 	mov.w	r9, #0
 800baae:	9700      	str	r7, [sp, #0]
 800bab0:	4633      	mov	r3, r6
 800bab2:	aa0b      	add	r2, sp, #44	; 0x2c
 800bab4:	4621      	mov	r1, r4
 800bab6:	4628      	mov	r0, r5
 800bab8:	f000 f9d8 	bl	800be6c <_printf_common>
 800babc:	3001      	adds	r0, #1
 800babe:	f040 8090 	bne.w	800bbe2 <_printf_float+0x1e2>
 800bac2:	f04f 30ff 	mov.w	r0, #4294967295
 800bac6:	b00d      	add	sp, #52	; 0x34
 800bac8:	ecbd 8b02 	vpop	{d8}
 800bacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad0:	4642      	mov	r2, r8
 800bad2:	464b      	mov	r3, r9
 800bad4:	4640      	mov	r0, r8
 800bad6:	4649      	mov	r1, r9
 800bad8:	f7f5 f838 	bl	8000b4c <__aeabi_dcmpun>
 800badc:	b140      	cbz	r0, 800baf0 <_printf_float+0xf0>
 800bade:	464b      	mov	r3, r9
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	bfbc      	itt	lt
 800bae4:	232d      	movlt	r3, #45	; 0x2d
 800bae6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800baea:	487f      	ldr	r0, [pc, #508]	; (800bce8 <_printf_float+0x2e8>)
 800baec:	4b7f      	ldr	r3, [pc, #508]	; (800bcec <_printf_float+0x2ec>)
 800baee:	e7d1      	b.n	800ba94 <_printf_float+0x94>
 800baf0:	6863      	ldr	r3, [r4, #4]
 800baf2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800baf6:	9206      	str	r2, [sp, #24]
 800baf8:	1c5a      	adds	r2, r3, #1
 800bafa:	d13f      	bne.n	800bb7c <_printf_float+0x17c>
 800bafc:	2306      	movs	r3, #6
 800bafe:	6063      	str	r3, [r4, #4]
 800bb00:	9b05      	ldr	r3, [sp, #20]
 800bb02:	6861      	ldr	r1, [r4, #4]
 800bb04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bb08:	2300      	movs	r3, #0
 800bb0a:	9303      	str	r3, [sp, #12]
 800bb0c:	ab0a      	add	r3, sp, #40	; 0x28
 800bb0e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bb12:	ab09      	add	r3, sp, #36	; 0x24
 800bb14:	ec49 8b10 	vmov	d0, r8, r9
 800bb18:	9300      	str	r3, [sp, #0]
 800bb1a:	6022      	str	r2, [r4, #0]
 800bb1c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb20:	4628      	mov	r0, r5
 800bb22:	f7ff fecd 	bl	800b8c0 <__cvt>
 800bb26:	9b06      	ldr	r3, [sp, #24]
 800bb28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb2a:	2b47      	cmp	r3, #71	; 0x47
 800bb2c:	4680      	mov	r8, r0
 800bb2e:	d108      	bne.n	800bb42 <_printf_float+0x142>
 800bb30:	1cc8      	adds	r0, r1, #3
 800bb32:	db02      	blt.n	800bb3a <_printf_float+0x13a>
 800bb34:	6863      	ldr	r3, [r4, #4]
 800bb36:	4299      	cmp	r1, r3
 800bb38:	dd41      	ble.n	800bbbe <_printf_float+0x1be>
 800bb3a:	f1ab 0b02 	sub.w	fp, fp, #2
 800bb3e:	fa5f fb8b 	uxtb.w	fp, fp
 800bb42:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bb46:	d820      	bhi.n	800bb8a <_printf_float+0x18a>
 800bb48:	3901      	subs	r1, #1
 800bb4a:	465a      	mov	r2, fp
 800bb4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bb50:	9109      	str	r1, [sp, #36]	; 0x24
 800bb52:	f7ff ff17 	bl	800b984 <__exponent>
 800bb56:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb58:	1813      	adds	r3, r2, r0
 800bb5a:	2a01      	cmp	r2, #1
 800bb5c:	4681      	mov	r9, r0
 800bb5e:	6123      	str	r3, [r4, #16]
 800bb60:	dc02      	bgt.n	800bb68 <_printf_float+0x168>
 800bb62:	6822      	ldr	r2, [r4, #0]
 800bb64:	07d2      	lsls	r2, r2, #31
 800bb66:	d501      	bpl.n	800bb6c <_printf_float+0x16c>
 800bb68:	3301      	adds	r3, #1
 800bb6a:	6123      	str	r3, [r4, #16]
 800bb6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d09c      	beq.n	800baae <_printf_float+0xae>
 800bb74:	232d      	movs	r3, #45	; 0x2d
 800bb76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb7a:	e798      	b.n	800baae <_printf_float+0xae>
 800bb7c:	9a06      	ldr	r2, [sp, #24]
 800bb7e:	2a47      	cmp	r2, #71	; 0x47
 800bb80:	d1be      	bne.n	800bb00 <_printf_float+0x100>
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d1bc      	bne.n	800bb00 <_printf_float+0x100>
 800bb86:	2301      	movs	r3, #1
 800bb88:	e7b9      	b.n	800bafe <_printf_float+0xfe>
 800bb8a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bb8e:	d118      	bne.n	800bbc2 <_printf_float+0x1c2>
 800bb90:	2900      	cmp	r1, #0
 800bb92:	6863      	ldr	r3, [r4, #4]
 800bb94:	dd0b      	ble.n	800bbae <_printf_float+0x1ae>
 800bb96:	6121      	str	r1, [r4, #16]
 800bb98:	b913      	cbnz	r3, 800bba0 <_printf_float+0x1a0>
 800bb9a:	6822      	ldr	r2, [r4, #0]
 800bb9c:	07d0      	lsls	r0, r2, #31
 800bb9e:	d502      	bpl.n	800bba6 <_printf_float+0x1a6>
 800bba0:	3301      	adds	r3, #1
 800bba2:	440b      	add	r3, r1
 800bba4:	6123      	str	r3, [r4, #16]
 800bba6:	65a1      	str	r1, [r4, #88]	; 0x58
 800bba8:	f04f 0900 	mov.w	r9, #0
 800bbac:	e7de      	b.n	800bb6c <_printf_float+0x16c>
 800bbae:	b913      	cbnz	r3, 800bbb6 <_printf_float+0x1b6>
 800bbb0:	6822      	ldr	r2, [r4, #0]
 800bbb2:	07d2      	lsls	r2, r2, #31
 800bbb4:	d501      	bpl.n	800bbba <_printf_float+0x1ba>
 800bbb6:	3302      	adds	r3, #2
 800bbb8:	e7f4      	b.n	800bba4 <_printf_float+0x1a4>
 800bbba:	2301      	movs	r3, #1
 800bbbc:	e7f2      	b.n	800bba4 <_printf_float+0x1a4>
 800bbbe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bbc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbc4:	4299      	cmp	r1, r3
 800bbc6:	db05      	blt.n	800bbd4 <_printf_float+0x1d4>
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	6121      	str	r1, [r4, #16]
 800bbcc:	07d8      	lsls	r0, r3, #31
 800bbce:	d5ea      	bpl.n	800bba6 <_printf_float+0x1a6>
 800bbd0:	1c4b      	adds	r3, r1, #1
 800bbd2:	e7e7      	b.n	800bba4 <_printf_float+0x1a4>
 800bbd4:	2900      	cmp	r1, #0
 800bbd6:	bfd4      	ite	le
 800bbd8:	f1c1 0202 	rsble	r2, r1, #2
 800bbdc:	2201      	movgt	r2, #1
 800bbde:	4413      	add	r3, r2
 800bbe0:	e7e0      	b.n	800bba4 <_printf_float+0x1a4>
 800bbe2:	6823      	ldr	r3, [r4, #0]
 800bbe4:	055a      	lsls	r2, r3, #21
 800bbe6:	d407      	bmi.n	800bbf8 <_printf_float+0x1f8>
 800bbe8:	6923      	ldr	r3, [r4, #16]
 800bbea:	4642      	mov	r2, r8
 800bbec:	4631      	mov	r1, r6
 800bbee:	4628      	mov	r0, r5
 800bbf0:	47b8      	blx	r7
 800bbf2:	3001      	adds	r0, #1
 800bbf4:	d12c      	bne.n	800bc50 <_printf_float+0x250>
 800bbf6:	e764      	b.n	800bac2 <_printf_float+0xc2>
 800bbf8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bbfc:	f240 80e0 	bls.w	800bdc0 <_printf_float+0x3c0>
 800bc00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc04:	2200      	movs	r2, #0
 800bc06:	2300      	movs	r3, #0
 800bc08:	f7f4 ff6e 	bl	8000ae8 <__aeabi_dcmpeq>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d034      	beq.n	800bc7a <_printf_float+0x27a>
 800bc10:	4a37      	ldr	r2, [pc, #220]	; (800bcf0 <_printf_float+0x2f0>)
 800bc12:	2301      	movs	r3, #1
 800bc14:	4631      	mov	r1, r6
 800bc16:	4628      	mov	r0, r5
 800bc18:	47b8      	blx	r7
 800bc1a:	3001      	adds	r0, #1
 800bc1c:	f43f af51 	beq.w	800bac2 <_printf_float+0xc2>
 800bc20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc24:	429a      	cmp	r2, r3
 800bc26:	db02      	blt.n	800bc2e <_printf_float+0x22e>
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	07d8      	lsls	r0, r3, #31
 800bc2c:	d510      	bpl.n	800bc50 <_printf_float+0x250>
 800bc2e:	ee18 3a10 	vmov	r3, s16
 800bc32:	4652      	mov	r2, sl
 800bc34:	4631      	mov	r1, r6
 800bc36:	4628      	mov	r0, r5
 800bc38:	47b8      	blx	r7
 800bc3a:	3001      	adds	r0, #1
 800bc3c:	f43f af41 	beq.w	800bac2 <_printf_float+0xc2>
 800bc40:	f04f 0800 	mov.w	r8, #0
 800bc44:	f104 091a 	add.w	r9, r4, #26
 800bc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc4a:	3b01      	subs	r3, #1
 800bc4c:	4543      	cmp	r3, r8
 800bc4e:	dc09      	bgt.n	800bc64 <_printf_float+0x264>
 800bc50:	6823      	ldr	r3, [r4, #0]
 800bc52:	079b      	lsls	r3, r3, #30
 800bc54:	f100 8105 	bmi.w	800be62 <_printf_float+0x462>
 800bc58:	68e0      	ldr	r0, [r4, #12]
 800bc5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc5c:	4298      	cmp	r0, r3
 800bc5e:	bfb8      	it	lt
 800bc60:	4618      	movlt	r0, r3
 800bc62:	e730      	b.n	800bac6 <_printf_float+0xc6>
 800bc64:	2301      	movs	r3, #1
 800bc66:	464a      	mov	r2, r9
 800bc68:	4631      	mov	r1, r6
 800bc6a:	4628      	mov	r0, r5
 800bc6c:	47b8      	blx	r7
 800bc6e:	3001      	adds	r0, #1
 800bc70:	f43f af27 	beq.w	800bac2 <_printf_float+0xc2>
 800bc74:	f108 0801 	add.w	r8, r8, #1
 800bc78:	e7e6      	b.n	800bc48 <_printf_float+0x248>
 800bc7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dc39      	bgt.n	800bcf4 <_printf_float+0x2f4>
 800bc80:	4a1b      	ldr	r2, [pc, #108]	; (800bcf0 <_printf_float+0x2f0>)
 800bc82:	2301      	movs	r3, #1
 800bc84:	4631      	mov	r1, r6
 800bc86:	4628      	mov	r0, r5
 800bc88:	47b8      	blx	r7
 800bc8a:	3001      	adds	r0, #1
 800bc8c:	f43f af19 	beq.w	800bac2 <_printf_float+0xc2>
 800bc90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc94:	4313      	orrs	r3, r2
 800bc96:	d102      	bne.n	800bc9e <_printf_float+0x29e>
 800bc98:	6823      	ldr	r3, [r4, #0]
 800bc9a:	07d9      	lsls	r1, r3, #31
 800bc9c:	d5d8      	bpl.n	800bc50 <_printf_float+0x250>
 800bc9e:	ee18 3a10 	vmov	r3, s16
 800bca2:	4652      	mov	r2, sl
 800bca4:	4631      	mov	r1, r6
 800bca6:	4628      	mov	r0, r5
 800bca8:	47b8      	blx	r7
 800bcaa:	3001      	adds	r0, #1
 800bcac:	f43f af09 	beq.w	800bac2 <_printf_float+0xc2>
 800bcb0:	f04f 0900 	mov.w	r9, #0
 800bcb4:	f104 0a1a 	add.w	sl, r4, #26
 800bcb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcba:	425b      	negs	r3, r3
 800bcbc:	454b      	cmp	r3, r9
 800bcbe:	dc01      	bgt.n	800bcc4 <_printf_float+0x2c4>
 800bcc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcc2:	e792      	b.n	800bbea <_printf_float+0x1ea>
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	4652      	mov	r2, sl
 800bcc8:	4631      	mov	r1, r6
 800bcca:	4628      	mov	r0, r5
 800bccc:	47b8      	blx	r7
 800bcce:	3001      	adds	r0, #1
 800bcd0:	f43f aef7 	beq.w	800bac2 <_printf_float+0xc2>
 800bcd4:	f109 0901 	add.w	r9, r9, #1
 800bcd8:	e7ee      	b.n	800bcb8 <_printf_float+0x2b8>
 800bcda:	bf00      	nop
 800bcdc:	7fefffff 	.word	0x7fefffff
 800bce0:	08014748 	.word	0x08014748
 800bce4:	0801474c 	.word	0x0801474c
 800bce8:	08014754 	.word	0x08014754
 800bcec:	08014750 	.word	0x08014750
 800bcf0:	08014758 	.word	0x08014758
 800bcf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcf6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	bfa8      	it	ge
 800bcfc:	461a      	movge	r2, r3
 800bcfe:	2a00      	cmp	r2, #0
 800bd00:	4691      	mov	r9, r2
 800bd02:	dc37      	bgt.n	800bd74 <_printf_float+0x374>
 800bd04:	f04f 0b00 	mov.w	fp, #0
 800bd08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd0c:	f104 021a 	add.w	r2, r4, #26
 800bd10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd12:	9305      	str	r3, [sp, #20]
 800bd14:	eba3 0309 	sub.w	r3, r3, r9
 800bd18:	455b      	cmp	r3, fp
 800bd1a:	dc33      	bgt.n	800bd84 <_printf_float+0x384>
 800bd1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd20:	429a      	cmp	r2, r3
 800bd22:	db3b      	blt.n	800bd9c <_printf_float+0x39c>
 800bd24:	6823      	ldr	r3, [r4, #0]
 800bd26:	07da      	lsls	r2, r3, #31
 800bd28:	d438      	bmi.n	800bd9c <_printf_float+0x39c>
 800bd2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd2c:	9b05      	ldr	r3, [sp, #20]
 800bd2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd30:	1ad3      	subs	r3, r2, r3
 800bd32:	eba2 0901 	sub.w	r9, r2, r1
 800bd36:	4599      	cmp	r9, r3
 800bd38:	bfa8      	it	ge
 800bd3a:	4699      	movge	r9, r3
 800bd3c:	f1b9 0f00 	cmp.w	r9, #0
 800bd40:	dc35      	bgt.n	800bdae <_printf_float+0x3ae>
 800bd42:	f04f 0800 	mov.w	r8, #0
 800bd46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd4a:	f104 0a1a 	add.w	sl, r4, #26
 800bd4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bd52:	1a9b      	subs	r3, r3, r2
 800bd54:	eba3 0309 	sub.w	r3, r3, r9
 800bd58:	4543      	cmp	r3, r8
 800bd5a:	f77f af79 	ble.w	800bc50 <_printf_float+0x250>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	4652      	mov	r2, sl
 800bd62:	4631      	mov	r1, r6
 800bd64:	4628      	mov	r0, r5
 800bd66:	47b8      	blx	r7
 800bd68:	3001      	adds	r0, #1
 800bd6a:	f43f aeaa 	beq.w	800bac2 <_printf_float+0xc2>
 800bd6e:	f108 0801 	add.w	r8, r8, #1
 800bd72:	e7ec      	b.n	800bd4e <_printf_float+0x34e>
 800bd74:	4613      	mov	r3, r2
 800bd76:	4631      	mov	r1, r6
 800bd78:	4642      	mov	r2, r8
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	47b8      	blx	r7
 800bd7e:	3001      	adds	r0, #1
 800bd80:	d1c0      	bne.n	800bd04 <_printf_float+0x304>
 800bd82:	e69e      	b.n	800bac2 <_printf_float+0xc2>
 800bd84:	2301      	movs	r3, #1
 800bd86:	4631      	mov	r1, r6
 800bd88:	4628      	mov	r0, r5
 800bd8a:	9205      	str	r2, [sp, #20]
 800bd8c:	47b8      	blx	r7
 800bd8e:	3001      	adds	r0, #1
 800bd90:	f43f ae97 	beq.w	800bac2 <_printf_float+0xc2>
 800bd94:	9a05      	ldr	r2, [sp, #20]
 800bd96:	f10b 0b01 	add.w	fp, fp, #1
 800bd9a:	e7b9      	b.n	800bd10 <_printf_float+0x310>
 800bd9c:	ee18 3a10 	vmov	r3, s16
 800bda0:	4652      	mov	r2, sl
 800bda2:	4631      	mov	r1, r6
 800bda4:	4628      	mov	r0, r5
 800bda6:	47b8      	blx	r7
 800bda8:	3001      	adds	r0, #1
 800bdaa:	d1be      	bne.n	800bd2a <_printf_float+0x32a>
 800bdac:	e689      	b.n	800bac2 <_printf_float+0xc2>
 800bdae:	9a05      	ldr	r2, [sp, #20]
 800bdb0:	464b      	mov	r3, r9
 800bdb2:	4442      	add	r2, r8
 800bdb4:	4631      	mov	r1, r6
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	47b8      	blx	r7
 800bdba:	3001      	adds	r0, #1
 800bdbc:	d1c1      	bne.n	800bd42 <_printf_float+0x342>
 800bdbe:	e680      	b.n	800bac2 <_printf_float+0xc2>
 800bdc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdc2:	2a01      	cmp	r2, #1
 800bdc4:	dc01      	bgt.n	800bdca <_printf_float+0x3ca>
 800bdc6:	07db      	lsls	r3, r3, #31
 800bdc8:	d538      	bpl.n	800be3c <_printf_float+0x43c>
 800bdca:	2301      	movs	r3, #1
 800bdcc:	4642      	mov	r2, r8
 800bdce:	4631      	mov	r1, r6
 800bdd0:	4628      	mov	r0, r5
 800bdd2:	47b8      	blx	r7
 800bdd4:	3001      	adds	r0, #1
 800bdd6:	f43f ae74 	beq.w	800bac2 <_printf_float+0xc2>
 800bdda:	ee18 3a10 	vmov	r3, s16
 800bdde:	4652      	mov	r2, sl
 800bde0:	4631      	mov	r1, r6
 800bde2:	4628      	mov	r0, r5
 800bde4:	47b8      	blx	r7
 800bde6:	3001      	adds	r0, #1
 800bde8:	f43f ae6b 	beq.w	800bac2 <_printf_float+0xc2>
 800bdec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f7f4 fe78 	bl	8000ae8 <__aeabi_dcmpeq>
 800bdf8:	b9d8      	cbnz	r0, 800be32 <_printf_float+0x432>
 800bdfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdfc:	f108 0201 	add.w	r2, r8, #1
 800be00:	3b01      	subs	r3, #1
 800be02:	4631      	mov	r1, r6
 800be04:	4628      	mov	r0, r5
 800be06:	47b8      	blx	r7
 800be08:	3001      	adds	r0, #1
 800be0a:	d10e      	bne.n	800be2a <_printf_float+0x42a>
 800be0c:	e659      	b.n	800bac2 <_printf_float+0xc2>
 800be0e:	2301      	movs	r3, #1
 800be10:	4652      	mov	r2, sl
 800be12:	4631      	mov	r1, r6
 800be14:	4628      	mov	r0, r5
 800be16:	47b8      	blx	r7
 800be18:	3001      	adds	r0, #1
 800be1a:	f43f ae52 	beq.w	800bac2 <_printf_float+0xc2>
 800be1e:	f108 0801 	add.w	r8, r8, #1
 800be22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be24:	3b01      	subs	r3, #1
 800be26:	4543      	cmp	r3, r8
 800be28:	dcf1      	bgt.n	800be0e <_printf_float+0x40e>
 800be2a:	464b      	mov	r3, r9
 800be2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be30:	e6dc      	b.n	800bbec <_printf_float+0x1ec>
 800be32:	f04f 0800 	mov.w	r8, #0
 800be36:	f104 0a1a 	add.w	sl, r4, #26
 800be3a:	e7f2      	b.n	800be22 <_printf_float+0x422>
 800be3c:	2301      	movs	r3, #1
 800be3e:	4642      	mov	r2, r8
 800be40:	e7df      	b.n	800be02 <_printf_float+0x402>
 800be42:	2301      	movs	r3, #1
 800be44:	464a      	mov	r2, r9
 800be46:	4631      	mov	r1, r6
 800be48:	4628      	mov	r0, r5
 800be4a:	47b8      	blx	r7
 800be4c:	3001      	adds	r0, #1
 800be4e:	f43f ae38 	beq.w	800bac2 <_printf_float+0xc2>
 800be52:	f108 0801 	add.w	r8, r8, #1
 800be56:	68e3      	ldr	r3, [r4, #12]
 800be58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be5a:	1a5b      	subs	r3, r3, r1
 800be5c:	4543      	cmp	r3, r8
 800be5e:	dcf0      	bgt.n	800be42 <_printf_float+0x442>
 800be60:	e6fa      	b.n	800bc58 <_printf_float+0x258>
 800be62:	f04f 0800 	mov.w	r8, #0
 800be66:	f104 0919 	add.w	r9, r4, #25
 800be6a:	e7f4      	b.n	800be56 <_printf_float+0x456>

0800be6c <_printf_common>:
 800be6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be70:	4616      	mov	r6, r2
 800be72:	4699      	mov	r9, r3
 800be74:	688a      	ldr	r2, [r1, #8]
 800be76:	690b      	ldr	r3, [r1, #16]
 800be78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be7c:	4293      	cmp	r3, r2
 800be7e:	bfb8      	it	lt
 800be80:	4613      	movlt	r3, r2
 800be82:	6033      	str	r3, [r6, #0]
 800be84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be88:	4607      	mov	r7, r0
 800be8a:	460c      	mov	r4, r1
 800be8c:	b10a      	cbz	r2, 800be92 <_printf_common+0x26>
 800be8e:	3301      	adds	r3, #1
 800be90:	6033      	str	r3, [r6, #0]
 800be92:	6823      	ldr	r3, [r4, #0]
 800be94:	0699      	lsls	r1, r3, #26
 800be96:	bf42      	ittt	mi
 800be98:	6833      	ldrmi	r3, [r6, #0]
 800be9a:	3302      	addmi	r3, #2
 800be9c:	6033      	strmi	r3, [r6, #0]
 800be9e:	6825      	ldr	r5, [r4, #0]
 800bea0:	f015 0506 	ands.w	r5, r5, #6
 800bea4:	d106      	bne.n	800beb4 <_printf_common+0x48>
 800bea6:	f104 0a19 	add.w	sl, r4, #25
 800beaa:	68e3      	ldr	r3, [r4, #12]
 800beac:	6832      	ldr	r2, [r6, #0]
 800beae:	1a9b      	subs	r3, r3, r2
 800beb0:	42ab      	cmp	r3, r5
 800beb2:	dc26      	bgt.n	800bf02 <_printf_common+0x96>
 800beb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800beb8:	1e13      	subs	r3, r2, #0
 800beba:	6822      	ldr	r2, [r4, #0]
 800bebc:	bf18      	it	ne
 800bebe:	2301      	movne	r3, #1
 800bec0:	0692      	lsls	r2, r2, #26
 800bec2:	d42b      	bmi.n	800bf1c <_printf_common+0xb0>
 800bec4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bec8:	4649      	mov	r1, r9
 800beca:	4638      	mov	r0, r7
 800becc:	47c0      	blx	r8
 800bece:	3001      	adds	r0, #1
 800bed0:	d01e      	beq.n	800bf10 <_printf_common+0xa4>
 800bed2:	6823      	ldr	r3, [r4, #0]
 800bed4:	68e5      	ldr	r5, [r4, #12]
 800bed6:	6832      	ldr	r2, [r6, #0]
 800bed8:	f003 0306 	and.w	r3, r3, #6
 800bedc:	2b04      	cmp	r3, #4
 800bede:	bf08      	it	eq
 800bee0:	1aad      	subeq	r5, r5, r2
 800bee2:	68a3      	ldr	r3, [r4, #8]
 800bee4:	6922      	ldr	r2, [r4, #16]
 800bee6:	bf0c      	ite	eq
 800bee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800beec:	2500      	movne	r5, #0
 800beee:	4293      	cmp	r3, r2
 800bef0:	bfc4      	itt	gt
 800bef2:	1a9b      	subgt	r3, r3, r2
 800bef4:	18ed      	addgt	r5, r5, r3
 800bef6:	2600      	movs	r6, #0
 800bef8:	341a      	adds	r4, #26
 800befa:	42b5      	cmp	r5, r6
 800befc:	d11a      	bne.n	800bf34 <_printf_common+0xc8>
 800befe:	2000      	movs	r0, #0
 800bf00:	e008      	b.n	800bf14 <_printf_common+0xa8>
 800bf02:	2301      	movs	r3, #1
 800bf04:	4652      	mov	r2, sl
 800bf06:	4649      	mov	r1, r9
 800bf08:	4638      	mov	r0, r7
 800bf0a:	47c0      	blx	r8
 800bf0c:	3001      	adds	r0, #1
 800bf0e:	d103      	bne.n	800bf18 <_printf_common+0xac>
 800bf10:	f04f 30ff 	mov.w	r0, #4294967295
 800bf14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf18:	3501      	adds	r5, #1
 800bf1a:	e7c6      	b.n	800beaa <_printf_common+0x3e>
 800bf1c:	18e1      	adds	r1, r4, r3
 800bf1e:	1c5a      	adds	r2, r3, #1
 800bf20:	2030      	movs	r0, #48	; 0x30
 800bf22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf26:	4422      	add	r2, r4
 800bf28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf30:	3302      	adds	r3, #2
 800bf32:	e7c7      	b.n	800bec4 <_printf_common+0x58>
 800bf34:	2301      	movs	r3, #1
 800bf36:	4622      	mov	r2, r4
 800bf38:	4649      	mov	r1, r9
 800bf3a:	4638      	mov	r0, r7
 800bf3c:	47c0      	blx	r8
 800bf3e:	3001      	adds	r0, #1
 800bf40:	d0e6      	beq.n	800bf10 <_printf_common+0xa4>
 800bf42:	3601      	adds	r6, #1
 800bf44:	e7d9      	b.n	800befa <_printf_common+0x8e>
	...

0800bf48 <_printf_i>:
 800bf48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf4c:	460c      	mov	r4, r1
 800bf4e:	4691      	mov	r9, r2
 800bf50:	7e27      	ldrb	r7, [r4, #24]
 800bf52:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf54:	2f78      	cmp	r7, #120	; 0x78
 800bf56:	4680      	mov	r8, r0
 800bf58:	469a      	mov	sl, r3
 800bf5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf5e:	d807      	bhi.n	800bf70 <_printf_i+0x28>
 800bf60:	2f62      	cmp	r7, #98	; 0x62
 800bf62:	d80a      	bhi.n	800bf7a <_printf_i+0x32>
 800bf64:	2f00      	cmp	r7, #0
 800bf66:	f000 80d8 	beq.w	800c11a <_printf_i+0x1d2>
 800bf6a:	2f58      	cmp	r7, #88	; 0x58
 800bf6c:	f000 80a3 	beq.w	800c0b6 <_printf_i+0x16e>
 800bf70:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf78:	e03a      	b.n	800bff0 <_printf_i+0xa8>
 800bf7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf7e:	2b15      	cmp	r3, #21
 800bf80:	d8f6      	bhi.n	800bf70 <_printf_i+0x28>
 800bf82:	a001      	add	r0, pc, #4	; (adr r0, 800bf88 <_printf_i+0x40>)
 800bf84:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bf88:	0800bfe1 	.word	0x0800bfe1
 800bf8c:	0800bff5 	.word	0x0800bff5
 800bf90:	0800bf71 	.word	0x0800bf71
 800bf94:	0800bf71 	.word	0x0800bf71
 800bf98:	0800bf71 	.word	0x0800bf71
 800bf9c:	0800bf71 	.word	0x0800bf71
 800bfa0:	0800bff5 	.word	0x0800bff5
 800bfa4:	0800bf71 	.word	0x0800bf71
 800bfa8:	0800bf71 	.word	0x0800bf71
 800bfac:	0800bf71 	.word	0x0800bf71
 800bfb0:	0800bf71 	.word	0x0800bf71
 800bfb4:	0800c101 	.word	0x0800c101
 800bfb8:	0800c025 	.word	0x0800c025
 800bfbc:	0800c0e3 	.word	0x0800c0e3
 800bfc0:	0800bf71 	.word	0x0800bf71
 800bfc4:	0800bf71 	.word	0x0800bf71
 800bfc8:	0800c123 	.word	0x0800c123
 800bfcc:	0800bf71 	.word	0x0800bf71
 800bfd0:	0800c025 	.word	0x0800c025
 800bfd4:	0800bf71 	.word	0x0800bf71
 800bfd8:	0800bf71 	.word	0x0800bf71
 800bfdc:	0800c0eb 	.word	0x0800c0eb
 800bfe0:	680b      	ldr	r3, [r1, #0]
 800bfe2:	1d1a      	adds	r2, r3, #4
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	600a      	str	r2, [r1, #0]
 800bfe8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bfec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bff0:	2301      	movs	r3, #1
 800bff2:	e0a3      	b.n	800c13c <_printf_i+0x1f4>
 800bff4:	6825      	ldr	r5, [r4, #0]
 800bff6:	6808      	ldr	r0, [r1, #0]
 800bff8:	062e      	lsls	r6, r5, #24
 800bffa:	f100 0304 	add.w	r3, r0, #4
 800bffe:	d50a      	bpl.n	800c016 <_printf_i+0xce>
 800c000:	6805      	ldr	r5, [r0, #0]
 800c002:	600b      	str	r3, [r1, #0]
 800c004:	2d00      	cmp	r5, #0
 800c006:	da03      	bge.n	800c010 <_printf_i+0xc8>
 800c008:	232d      	movs	r3, #45	; 0x2d
 800c00a:	426d      	negs	r5, r5
 800c00c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c010:	485e      	ldr	r0, [pc, #376]	; (800c18c <_printf_i+0x244>)
 800c012:	230a      	movs	r3, #10
 800c014:	e019      	b.n	800c04a <_printf_i+0x102>
 800c016:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c01a:	6805      	ldr	r5, [r0, #0]
 800c01c:	600b      	str	r3, [r1, #0]
 800c01e:	bf18      	it	ne
 800c020:	b22d      	sxthne	r5, r5
 800c022:	e7ef      	b.n	800c004 <_printf_i+0xbc>
 800c024:	680b      	ldr	r3, [r1, #0]
 800c026:	6825      	ldr	r5, [r4, #0]
 800c028:	1d18      	adds	r0, r3, #4
 800c02a:	6008      	str	r0, [r1, #0]
 800c02c:	0628      	lsls	r0, r5, #24
 800c02e:	d501      	bpl.n	800c034 <_printf_i+0xec>
 800c030:	681d      	ldr	r5, [r3, #0]
 800c032:	e002      	b.n	800c03a <_printf_i+0xf2>
 800c034:	0669      	lsls	r1, r5, #25
 800c036:	d5fb      	bpl.n	800c030 <_printf_i+0xe8>
 800c038:	881d      	ldrh	r5, [r3, #0]
 800c03a:	4854      	ldr	r0, [pc, #336]	; (800c18c <_printf_i+0x244>)
 800c03c:	2f6f      	cmp	r7, #111	; 0x6f
 800c03e:	bf0c      	ite	eq
 800c040:	2308      	moveq	r3, #8
 800c042:	230a      	movne	r3, #10
 800c044:	2100      	movs	r1, #0
 800c046:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c04a:	6866      	ldr	r6, [r4, #4]
 800c04c:	60a6      	str	r6, [r4, #8]
 800c04e:	2e00      	cmp	r6, #0
 800c050:	bfa2      	ittt	ge
 800c052:	6821      	ldrge	r1, [r4, #0]
 800c054:	f021 0104 	bicge.w	r1, r1, #4
 800c058:	6021      	strge	r1, [r4, #0]
 800c05a:	b90d      	cbnz	r5, 800c060 <_printf_i+0x118>
 800c05c:	2e00      	cmp	r6, #0
 800c05e:	d04d      	beq.n	800c0fc <_printf_i+0x1b4>
 800c060:	4616      	mov	r6, r2
 800c062:	fbb5 f1f3 	udiv	r1, r5, r3
 800c066:	fb03 5711 	mls	r7, r3, r1, r5
 800c06a:	5dc7      	ldrb	r7, [r0, r7]
 800c06c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c070:	462f      	mov	r7, r5
 800c072:	42bb      	cmp	r3, r7
 800c074:	460d      	mov	r5, r1
 800c076:	d9f4      	bls.n	800c062 <_printf_i+0x11a>
 800c078:	2b08      	cmp	r3, #8
 800c07a:	d10b      	bne.n	800c094 <_printf_i+0x14c>
 800c07c:	6823      	ldr	r3, [r4, #0]
 800c07e:	07df      	lsls	r7, r3, #31
 800c080:	d508      	bpl.n	800c094 <_printf_i+0x14c>
 800c082:	6923      	ldr	r3, [r4, #16]
 800c084:	6861      	ldr	r1, [r4, #4]
 800c086:	4299      	cmp	r1, r3
 800c088:	bfde      	ittt	le
 800c08a:	2330      	movle	r3, #48	; 0x30
 800c08c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c090:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c094:	1b92      	subs	r2, r2, r6
 800c096:	6122      	str	r2, [r4, #16]
 800c098:	f8cd a000 	str.w	sl, [sp]
 800c09c:	464b      	mov	r3, r9
 800c09e:	aa03      	add	r2, sp, #12
 800c0a0:	4621      	mov	r1, r4
 800c0a2:	4640      	mov	r0, r8
 800c0a4:	f7ff fee2 	bl	800be6c <_printf_common>
 800c0a8:	3001      	adds	r0, #1
 800c0aa:	d14c      	bne.n	800c146 <_printf_i+0x1fe>
 800c0ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c0b0:	b004      	add	sp, #16
 800c0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0b6:	4835      	ldr	r0, [pc, #212]	; (800c18c <_printf_i+0x244>)
 800c0b8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	680e      	ldr	r6, [r1, #0]
 800c0c0:	061f      	lsls	r7, r3, #24
 800c0c2:	f856 5b04 	ldr.w	r5, [r6], #4
 800c0c6:	600e      	str	r6, [r1, #0]
 800c0c8:	d514      	bpl.n	800c0f4 <_printf_i+0x1ac>
 800c0ca:	07d9      	lsls	r1, r3, #31
 800c0cc:	bf44      	itt	mi
 800c0ce:	f043 0320 	orrmi.w	r3, r3, #32
 800c0d2:	6023      	strmi	r3, [r4, #0]
 800c0d4:	b91d      	cbnz	r5, 800c0de <_printf_i+0x196>
 800c0d6:	6823      	ldr	r3, [r4, #0]
 800c0d8:	f023 0320 	bic.w	r3, r3, #32
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	2310      	movs	r3, #16
 800c0e0:	e7b0      	b.n	800c044 <_printf_i+0xfc>
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	f043 0320 	orr.w	r3, r3, #32
 800c0e8:	6023      	str	r3, [r4, #0]
 800c0ea:	2378      	movs	r3, #120	; 0x78
 800c0ec:	4828      	ldr	r0, [pc, #160]	; (800c190 <_printf_i+0x248>)
 800c0ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0f2:	e7e3      	b.n	800c0bc <_printf_i+0x174>
 800c0f4:	065e      	lsls	r6, r3, #25
 800c0f6:	bf48      	it	mi
 800c0f8:	b2ad      	uxthmi	r5, r5
 800c0fa:	e7e6      	b.n	800c0ca <_printf_i+0x182>
 800c0fc:	4616      	mov	r6, r2
 800c0fe:	e7bb      	b.n	800c078 <_printf_i+0x130>
 800c100:	680b      	ldr	r3, [r1, #0]
 800c102:	6826      	ldr	r6, [r4, #0]
 800c104:	6960      	ldr	r0, [r4, #20]
 800c106:	1d1d      	adds	r5, r3, #4
 800c108:	600d      	str	r5, [r1, #0]
 800c10a:	0635      	lsls	r5, r6, #24
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	d501      	bpl.n	800c114 <_printf_i+0x1cc>
 800c110:	6018      	str	r0, [r3, #0]
 800c112:	e002      	b.n	800c11a <_printf_i+0x1d2>
 800c114:	0671      	lsls	r1, r6, #25
 800c116:	d5fb      	bpl.n	800c110 <_printf_i+0x1c8>
 800c118:	8018      	strh	r0, [r3, #0]
 800c11a:	2300      	movs	r3, #0
 800c11c:	6123      	str	r3, [r4, #16]
 800c11e:	4616      	mov	r6, r2
 800c120:	e7ba      	b.n	800c098 <_printf_i+0x150>
 800c122:	680b      	ldr	r3, [r1, #0]
 800c124:	1d1a      	adds	r2, r3, #4
 800c126:	600a      	str	r2, [r1, #0]
 800c128:	681e      	ldr	r6, [r3, #0]
 800c12a:	6862      	ldr	r2, [r4, #4]
 800c12c:	2100      	movs	r1, #0
 800c12e:	4630      	mov	r0, r6
 800c130:	f7f4 f866 	bl	8000200 <memchr>
 800c134:	b108      	cbz	r0, 800c13a <_printf_i+0x1f2>
 800c136:	1b80      	subs	r0, r0, r6
 800c138:	6060      	str	r0, [r4, #4]
 800c13a:	6863      	ldr	r3, [r4, #4]
 800c13c:	6123      	str	r3, [r4, #16]
 800c13e:	2300      	movs	r3, #0
 800c140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c144:	e7a8      	b.n	800c098 <_printf_i+0x150>
 800c146:	6923      	ldr	r3, [r4, #16]
 800c148:	4632      	mov	r2, r6
 800c14a:	4649      	mov	r1, r9
 800c14c:	4640      	mov	r0, r8
 800c14e:	47d0      	blx	sl
 800c150:	3001      	adds	r0, #1
 800c152:	d0ab      	beq.n	800c0ac <_printf_i+0x164>
 800c154:	6823      	ldr	r3, [r4, #0]
 800c156:	079b      	lsls	r3, r3, #30
 800c158:	d413      	bmi.n	800c182 <_printf_i+0x23a>
 800c15a:	68e0      	ldr	r0, [r4, #12]
 800c15c:	9b03      	ldr	r3, [sp, #12]
 800c15e:	4298      	cmp	r0, r3
 800c160:	bfb8      	it	lt
 800c162:	4618      	movlt	r0, r3
 800c164:	e7a4      	b.n	800c0b0 <_printf_i+0x168>
 800c166:	2301      	movs	r3, #1
 800c168:	4632      	mov	r2, r6
 800c16a:	4649      	mov	r1, r9
 800c16c:	4640      	mov	r0, r8
 800c16e:	47d0      	blx	sl
 800c170:	3001      	adds	r0, #1
 800c172:	d09b      	beq.n	800c0ac <_printf_i+0x164>
 800c174:	3501      	adds	r5, #1
 800c176:	68e3      	ldr	r3, [r4, #12]
 800c178:	9903      	ldr	r1, [sp, #12]
 800c17a:	1a5b      	subs	r3, r3, r1
 800c17c:	42ab      	cmp	r3, r5
 800c17e:	dcf2      	bgt.n	800c166 <_printf_i+0x21e>
 800c180:	e7eb      	b.n	800c15a <_printf_i+0x212>
 800c182:	2500      	movs	r5, #0
 800c184:	f104 0619 	add.w	r6, r4, #25
 800c188:	e7f5      	b.n	800c176 <_printf_i+0x22e>
 800c18a:	bf00      	nop
 800c18c:	0801475a 	.word	0x0801475a
 800c190:	0801476b 	.word	0x0801476b

0800c194 <_scanf_float>:
 800c194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c198:	b087      	sub	sp, #28
 800c19a:	4617      	mov	r7, r2
 800c19c:	9303      	str	r3, [sp, #12]
 800c19e:	688b      	ldr	r3, [r1, #8]
 800c1a0:	1e5a      	subs	r2, r3, #1
 800c1a2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c1a6:	bf83      	ittte	hi
 800c1a8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c1ac:	195b      	addhi	r3, r3, r5
 800c1ae:	9302      	strhi	r3, [sp, #8]
 800c1b0:	2300      	movls	r3, #0
 800c1b2:	bf86      	itte	hi
 800c1b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c1b8:	608b      	strhi	r3, [r1, #8]
 800c1ba:	9302      	strls	r3, [sp, #8]
 800c1bc:	680b      	ldr	r3, [r1, #0]
 800c1be:	468b      	mov	fp, r1
 800c1c0:	2500      	movs	r5, #0
 800c1c2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c1c6:	f84b 3b1c 	str.w	r3, [fp], #28
 800c1ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c1ce:	4680      	mov	r8, r0
 800c1d0:	460c      	mov	r4, r1
 800c1d2:	465e      	mov	r6, fp
 800c1d4:	46aa      	mov	sl, r5
 800c1d6:	46a9      	mov	r9, r5
 800c1d8:	9501      	str	r5, [sp, #4]
 800c1da:	68a2      	ldr	r2, [r4, #8]
 800c1dc:	b152      	cbz	r2, 800c1f4 <_scanf_float+0x60>
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	2b4e      	cmp	r3, #78	; 0x4e
 800c1e4:	d864      	bhi.n	800c2b0 <_scanf_float+0x11c>
 800c1e6:	2b40      	cmp	r3, #64	; 0x40
 800c1e8:	d83c      	bhi.n	800c264 <_scanf_float+0xd0>
 800c1ea:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c1ee:	b2c8      	uxtb	r0, r1
 800c1f0:	280e      	cmp	r0, #14
 800c1f2:	d93a      	bls.n	800c26a <_scanf_float+0xd6>
 800c1f4:	f1b9 0f00 	cmp.w	r9, #0
 800c1f8:	d003      	beq.n	800c202 <_scanf_float+0x6e>
 800c1fa:	6823      	ldr	r3, [r4, #0]
 800c1fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c206:	f1ba 0f01 	cmp.w	sl, #1
 800c20a:	f200 8113 	bhi.w	800c434 <_scanf_float+0x2a0>
 800c20e:	455e      	cmp	r6, fp
 800c210:	f200 8105 	bhi.w	800c41e <_scanf_float+0x28a>
 800c214:	2501      	movs	r5, #1
 800c216:	4628      	mov	r0, r5
 800c218:	b007      	add	sp, #28
 800c21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c21e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c222:	2a0d      	cmp	r2, #13
 800c224:	d8e6      	bhi.n	800c1f4 <_scanf_float+0x60>
 800c226:	a101      	add	r1, pc, #4	; (adr r1, 800c22c <_scanf_float+0x98>)
 800c228:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c22c:	0800c36b 	.word	0x0800c36b
 800c230:	0800c1f5 	.word	0x0800c1f5
 800c234:	0800c1f5 	.word	0x0800c1f5
 800c238:	0800c1f5 	.word	0x0800c1f5
 800c23c:	0800c3cb 	.word	0x0800c3cb
 800c240:	0800c3a3 	.word	0x0800c3a3
 800c244:	0800c1f5 	.word	0x0800c1f5
 800c248:	0800c1f5 	.word	0x0800c1f5
 800c24c:	0800c379 	.word	0x0800c379
 800c250:	0800c1f5 	.word	0x0800c1f5
 800c254:	0800c1f5 	.word	0x0800c1f5
 800c258:	0800c1f5 	.word	0x0800c1f5
 800c25c:	0800c1f5 	.word	0x0800c1f5
 800c260:	0800c331 	.word	0x0800c331
 800c264:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c268:	e7db      	b.n	800c222 <_scanf_float+0x8e>
 800c26a:	290e      	cmp	r1, #14
 800c26c:	d8c2      	bhi.n	800c1f4 <_scanf_float+0x60>
 800c26e:	a001      	add	r0, pc, #4	; (adr r0, 800c274 <_scanf_float+0xe0>)
 800c270:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c274:	0800c323 	.word	0x0800c323
 800c278:	0800c1f5 	.word	0x0800c1f5
 800c27c:	0800c323 	.word	0x0800c323
 800c280:	0800c3b7 	.word	0x0800c3b7
 800c284:	0800c1f5 	.word	0x0800c1f5
 800c288:	0800c2d1 	.word	0x0800c2d1
 800c28c:	0800c30d 	.word	0x0800c30d
 800c290:	0800c30d 	.word	0x0800c30d
 800c294:	0800c30d 	.word	0x0800c30d
 800c298:	0800c30d 	.word	0x0800c30d
 800c29c:	0800c30d 	.word	0x0800c30d
 800c2a0:	0800c30d 	.word	0x0800c30d
 800c2a4:	0800c30d 	.word	0x0800c30d
 800c2a8:	0800c30d 	.word	0x0800c30d
 800c2ac:	0800c30d 	.word	0x0800c30d
 800c2b0:	2b6e      	cmp	r3, #110	; 0x6e
 800c2b2:	d809      	bhi.n	800c2c8 <_scanf_float+0x134>
 800c2b4:	2b60      	cmp	r3, #96	; 0x60
 800c2b6:	d8b2      	bhi.n	800c21e <_scanf_float+0x8a>
 800c2b8:	2b54      	cmp	r3, #84	; 0x54
 800c2ba:	d077      	beq.n	800c3ac <_scanf_float+0x218>
 800c2bc:	2b59      	cmp	r3, #89	; 0x59
 800c2be:	d199      	bne.n	800c1f4 <_scanf_float+0x60>
 800c2c0:	2d07      	cmp	r5, #7
 800c2c2:	d197      	bne.n	800c1f4 <_scanf_float+0x60>
 800c2c4:	2508      	movs	r5, #8
 800c2c6:	e029      	b.n	800c31c <_scanf_float+0x188>
 800c2c8:	2b74      	cmp	r3, #116	; 0x74
 800c2ca:	d06f      	beq.n	800c3ac <_scanf_float+0x218>
 800c2cc:	2b79      	cmp	r3, #121	; 0x79
 800c2ce:	e7f6      	b.n	800c2be <_scanf_float+0x12a>
 800c2d0:	6821      	ldr	r1, [r4, #0]
 800c2d2:	05c8      	lsls	r0, r1, #23
 800c2d4:	d51a      	bpl.n	800c30c <_scanf_float+0x178>
 800c2d6:	9b02      	ldr	r3, [sp, #8]
 800c2d8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c2dc:	6021      	str	r1, [r4, #0]
 800c2de:	f109 0901 	add.w	r9, r9, #1
 800c2e2:	b11b      	cbz	r3, 800c2ec <_scanf_float+0x158>
 800c2e4:	3b01      	subs	r3, #1
 800c2e6:	3201      	adds	r2, #1
 800c2e8:	9302      	str	r3, [sp, #8]
 800c2ea:	60a2      	str	r2, [r4, #8]
 800c2ec:	68a3      	ldr	r3, [r4, #8]
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	60a3      	str	r3, [r4, #8]
 800c2f2:	6923      	ldr	r3, [r4, #16]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	6123      	str	r3, [r4, #16]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	607b      	str	r3, [r7, #4]
 800c300:	f340 8084 	ble.w	800c40c <_scanf_float+0x278>
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	3301      	adds	r3, #1
 800c308:	603b      	str	r3, [r7, #0]
 800c30a:	e766      	b.n	800c1da <_scanf_float+0x46>
 800c30c:	eb1a 0f05 	cmn.w	sl, r5
 800c310:	f47f af70 	bne.w	800c1f4 <_scanf_float+0x60>
 800c314:	6822      	ldr	r2, [r4, #0]
 800c316:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c31a:	6022      	str	r2, [r4, #0]
 800c31c:	f806 3b01 	strb.w	r3, [r6], #1
 800c320:	e7e4      	b.n	800c2ec <_scanf_float+0x158>
 800c322:	6822      	ldr	r2, [r4, #0]
 800c324:	0610      	lsls	r0, r2, #24
 800c326:	f57f af65 	bpl.w	800c1f4 <_scanf_float+0x60>
 800c32a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c32e:	e7f4      	b.n	800c31a <_scanf_float+0x186>
 800c330:	f1ba 0f00 	cmp.w	sl, #0
 800c334:	d10e      	bne.n	800c354 <_scanf_float+0x1c0>
 800c336:	f1b9 0f00 	cmp.w	r9, #0
 800c33a:	d10e      	bne.n	800c35a <_scanf_float+0x1c6>
 800c33c:	6822      	ldr	r2, [r4, #0]
 800c33e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c342:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c346:	d108      	bne.n	800c35a <_scanf_float+0x1c6>
 800c348:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c34c:	6022      	str	r2, [r4, #0]
 800c34e:	f04f 0a01 	mov.w	sl, #1
 800c352:	e7e3      	b.n	800c31c <_scanf_float+0x188>
 800c354:	f1ba 0f02 	cmp.w	sl, #2
 800c358:	d055      	beq.n	800c406 <_scanf_float+0x272>
 800c35a:	2d01      	cmp	r5, #1
 800c35c:	d002      	beq.n	800c364 <_scanf_float+0x1d0>
 800c35e:	2d04      	cmp	r5, #4
 800c360:	f47f af48 	bne.w	800c1f4 <_scanf_float+0x60>
 800c364:	3501      	adds	r5, #1
 800c366:	b2ed      	uxtb	r5, r5
 800c368:	e7d8      	b.n	800c31c <_scanf_float+0x188>
 800c36a:	f1ba 0f01 	cmp.w	sl, #1
 800c36e:	f47f af41 	bne.w	800c1f4 <_scanf_float+0x60>
 800c372:	f04f 0a02 	mov.w	sl, #2
 800c376:	e7d1      	b.n	800c31c <_scanf_float+0x188>
 800c378:	b97d      	cbnz	r5, 800c39a <_scanf_float+0x206>
 800c37a:	f1b9 0f00 	cmp.w	r9, #0
 800c37e:	f47f af3c 	bne.w	800c1fa <_scanf_float+0x66>
 800c382:	6822      	ldr	r2, [r4, #0]
 800c384:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c388:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c38c:	f47f af39 	bne.w	800c202 <_scanf_float+0x6e>
 800c390:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c394:	6022      	str	r2, [r4, #0]
 800c396:	2501      	movs	r5, #1
 800c398:	e7c0      	b.n	800c31c <_scanf_float+0x188>
 800c39a:	2d03      	cmp	r5, #3
 800c39c:	d0e2      	beq.n	800c364 <_scanf_float+0x1d0>
 800c39e:	2d05      	cmp	r5, #5
 800c3a0:	e7de      	b.n	800c360 <_scanf_float+0x1cc>
 800c3a2:	2d02      	cmp	r5, #2
 800c3a4:	f47f af26 	bne.w	800c1f4 <_scanf_float+0x60>
 800c3a8:	2503      	movs	r5, #3
 800c3aa:	e7b7      	b.n	800c31c <_scanf_float+0x188>
 800c3ac:	2d06      	cmp	r5, #6
 800c3ae:	f47f af21 	bne.w	800c1f4 <_scanf_float+0x60>
 800c3b2:	2507      	movs	r5, #7
 800c3b4:	e7b2      	b.n	800c31c <_scanf_float+0x188>
 800c3b6:	6822      	ldr	r2, [r4, #0]
 800c3b8:	0591      	lsls	r1, r2, #22
 800c3ba:	f57f af1b 	bpl.w	800c1f4 <_scanf_float+0x60>
 800c3be:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c3c2:	6022      	str	r2, [r4, #0]
 800c3c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800c3c8:	e7a8      	b.n	800c31c <_scanf_float+0x188>
 800c3ca:	6822      	ldr	r2, [r4, #0]
 800c3cc:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c3d0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c3d4:	d006      	beq.n	800c3e4 <_scanf_float+0x250>
 800c3d6:	0550      	lsls	r0, r2, #21
 800c3d8:	f57f af0c 	bpl.w	800c1f4 <_scanf_float+0x60>
 800c3dc:	f1b9 0f00 	cmp.w	r9, #0
 800c3e0:	f43f af0f 	beq.w	800c202 <_scanf_float+0x6e>
 800c3e4:	0591      	lsls	r1, r2, #22
 800c3e6:	bf58      	it	pl
 800c3e8:	9901      	ldrpl	r1, [sp, #4]
 800c3ea:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c3ee:	bf58      	it	pl
 800c3f0:	eba9 0101 	subpl.w	r1, r9, r1
 800c3f4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c3f8:	bf58      	it	pl
 800c3fa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c3fe:	6022      	str	r2, [r4, #0]
 800c400:	f04f 0900 	mov.w	r9, #0
 800c404:	e78a      	b.n	800c31c <_scanf_float+0x188>
 800c406:	f04f 0a03 	mov.w	sl, #3
 800c40a:	e787      	b.n	800c31c <_scanf_float+0x188>
 800c40c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c410:	4639      	mov	r1, r7
 800c412:	4640      	mov	r0, r8
 800c414:	4798      	blx	r3
 800c416:	2800      	cmp	r0, #0
 800c418:	f43f aedf 	beq.w	800c1da <_scanf_float+0x46>
 800c41c:	e6ea      	b.n	800c1f4 <_scanf_float+0x60>
 800c41e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c422:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c426:	463a      	mov	r2, r7
 800c428:	4640      	mov	r0, r8
 800c42a:	4798      	blx	r3
 800c42c:	6923      	ldr	r3, [r4, #16]
 800c42e:	3b01      	subs	r3, #1
 800c430:	6123      	str	r3, [r4, #16]
 800c432:	e6ec      	b.n	800c20e <_scanf_float+0x7a>
 800c434:	1e6b      	subs	r3, r5, #1
 800c436:	2b06      	cmp	r3, #6
 800c438:	d825      	bhi.n	800c486 <_scanf_float+0x2f2>
 800c43a:	2d02      	cmp	r5, #2
 800c43c:	d836      	bhi.n	800c4ac <_scanf_float+0x318>
 800c43e:	455e      	cmp	r6, fp
 800c440:	f67f aee8 	bls.w	800c214 <_scanf_float+0x80>
 800c444:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c448:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c44c:	463a      	mov	r2, r7
 800c44e:	4640      	mov	r0, r8
 800c450:	4798      	blx	r3
 800c452:	6923      	ldr	r3, [r4, #16]
 800c454:	3b01      	subs	r3, #1
 800c456:	6123      	str	r3, [r4, #16]
 800c458:	e7f1      	b.n	800c43e <_scanf_float+0x2aa>
 800c45a:	9802      	ldr	r0, [sp, #8]
 800c45c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c460:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c464:	9002      	str	r0, [sp, #8]
 800c466:	463a      	mov	r2, r7
 800c468:	4640      	mov	r0, r8
 800c46a:	4798      	blx	r3
 800c46c:	6923      	ldr	r3, [r4, #16]
 800c46e:	3b01      	subs	r3, #1
 800c470:	6123      	str	r3, [r4, #16]
 800c472:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c476:	fa5f fa8a 	uxtb.w	sl, sl
 800c47a:	f1ba 0f02 	cmp.w	sl, #2
 800c47e:	d1ec      	bne.n	800c45a <_scanf_float+0x2c6>
 800c480:	3d03      	subs	r5, #3
 800c482:	b2ed      	uxtb	r5, r5
 800c484:	1b76      	subs	r6, r6, r5
 800c486:	6823      	ldr	r3, [r4, #0]
 800c488:	05da      	lsls	r2, r3, #23
 800c48a:	d52f      	bpl.n	800c4ec <_scanf_float+0x358>
 800c48c:	055b      	lsls	r3, r3, #21
 800c48e:	d510      	bpl.n	800c4b2 <_scanf_float+0x31e>
 800c490:	455e      	cmp	r6, fp
 800c492:	f67f aebf 	bls.w	800c214 <_scanf_float+0x80>
 800c496:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c49a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c49e:	463a      	mov	r2, r7
 800c4a0:	4640      	mov	r0, r8
 800c4a2:	4798      	blx	r3
 800c4a4:	6923      	ldr	r3, [r4, #16]
 800c4a6:	3b01      	subs	r3, #1
 800c4a8:	6123      	str	r3, [r4, #16]
 800c4aa:	e7f1      	b.n	800c490 <_scanf_float+0x2fc>
 800c4ac:	46aa      	mov	sl, r5
 800c4ae:	9602      	str	r6, [sp, #8]
 800c4b0:	e7df      	b.n	800c472 <_scanf_float+0x2de>
 800c4b2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c4b6:	6923      	ldr	r3, [r4, #16]
 800c4b8:	2965      	cmp	r1, #101	; 0x65
 800c4ba:	f103 33ff 	add.w	r3, r3, #4294967295
 800c4be:	f106 35ff 	add.w	r5, r6, #4294967295
 800c4c2:	6123      	str	r3, [r4, #16]
 800c4c4:	d00c      	beq.n	800c4e0 <_scanf_float+0x34c>
 800c4c6:	2945      	cmp	r1, #69	; 0x45
 800c4c8:	d00a      	beq.n	800c4e0 <_scanf_float+0x34c>
 800c4ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c4ce:	463a      	mov	r2, r7
 800c4d0:	4640      	mov	r0, r8
 800c4d2:	4798      	blx	r3
 800c4d4:	6923      	ldr	r3, [r4, #16]
 800c4d6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	1eb5      	subs	r5, r6, #2
 800c4de:	6123      	str	r3, [r4, #16]
 800c4e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c4e4:	463a      	mov	r2, r7
 800c4e6:	4640      	mov	r0, r8
 800c4e8:	4798      	blx	r3
 800c4ea:	462e      	mov	r6, r5
 800c4ec:	6825      	ldr	r5, [r4, #0]
 800c4ee:	f015 0510 	ands.w	r5, r5, #16
 800c4f2:	d158      	bne.n	800c5a6 <_scanf_float+0x412>
 800c4f4:	7035      	strb	r5, [r6, #0]
 800c4f6:	6823      	ldr	r3, [r4, #0]
 800c4f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c4fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c500:	d11c      	bne.n	800c53c <_scanf_float+0x3a8>
 800c502:	9b01      	ldr	r3, [sp, #4]
 800c504:	454b      	cmp	r3, r9
 800c506:	eba3 0209 	sub.w	r2, r3, r9
 800c50a:	d124      	bne.n	800c556 <_scanf_float+0x3c2>
 800c50c:	2200      	movs	r2, #0
 800c50e:	4659      	mov	r1, fp
 800c510:	4640      	mov	r0, r8
 800c512:	f000 ff2b 	bl	800d36c <_strtod_r>
 800c516:	9b03      	ldr	r3, [sp, #12]
 800c518:	6821      	ldr	r1, [r4, #0]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f011 0f02 	tst.w	r1, #2
 800c520:	ec57 6b10 	vmov	r6, r7, d0
 800c524:	f103 0204 	add.w	r2, r3, #4
 800c528:	d020      	beq.n	800c56c <_scanf_float+0x3d8>
 800c52a:	9903      	ldr	r1, [sp, #12]
 800c52c:	600a      	str	r2, [r1, #0]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	e9c3 6700 	strd	r6, r7, [r3]
 800c534:	68e3      	ldr	r3, [r4, #12]
 800c536:	3301      	adds	r3, #1
 800c538:	60e3      	str	r3, [r4, #12]
 800c53a:	e66c      	b.n	800c216 <_scanf_float+0x82>
 800c53c:	9b04      	ldr	r3, [sp, #16]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d0e4      	beq.n	800c50c <_scanf_float+0x378>
 800c542:	9905      	ldr	r1, [sp, #20]
 800c544:	230a      	movs	r3, #10
 800c546:	462a      	mov	r2, r5
 800c548:	3101      	adds	r1, #1
 800c54a:	4640      	mov	r0, r8
 800c54c:	f000 ff98 	bl	800d480 <_strtol_r>
 800c550:	9b04      	ldr	r3, [sp, #16]
 800c552:	9e05      	ldr	r6, [sp, #20]
 800c554:	1ac2      	subs	r2, r0, r3
 800c556:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c55a:	429e      	cmp	r6, r3
 800c55c:	bf28      	it	cs
 800c55e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c562:	4912      	ldr	r1, [pc, #72]	; (800c5ac <_scanf_float+0x418>)
 800c564:	4630      	mov	r0, r6
 800c566:	f000 f8b9 	bl	800c6dc <siprintf>
 800c56a:	e7cf      	b.n	800c50c <_scanf_float+0x378>
 800c56c:	f011 0f04 	tst.w	r1, #4
 800c570:	9903      	ldr	r1, [sp, #12]
 800c572:	600a      	str	r2, [r1, #0]
 800c574:	d1db      	bne.n	800c52e <_scanf_float+0x39a>
 800c576:	f8d3 8000 	ldr.w	r8, [r3]
 800c57a:	ee10 2a10 	vmov	r2, s0
 800c57e:	ee10 0a10 	vmov	r0, s0
 800c582:	463b      	mov	r3, r7
 800c584:	4639      	mov	r1, r7
 800c586:	f7f4 fae1 	bl	8000b4c <__aeabi_dcmpun>
 800c58a:	b128      	cbz	r0, 800c598 <_scanf_float+0x404>
 800c58c:	4808      	ldr	r0, [pc, #32]	; (800c5b0 <_scanf_float+0x41c>)
 800c58e:	f000 f89f 	bl	800c6d0 <nanf>
 800c592:	ed88 0a00 	vstr	s0, [r8]
 800c596:	e7cd      	b.n	800c534 <_scanf_float+0x3a0>
 800c598:	4630      	mov	r0, r6
 800c59a:	4639      	mov	r1, r7
 800c59c:	f7f4 fb34 	bl	8000c08 <__aeabi_d2f>
 800c5a0:	f8c8 0000 	str.w	r0, [r8]
 800c5a4:	e7c6      	b.n	800c534 <_scanf_float+0x3a0>
 800c5a6:	2500      	movs	r5, #0
 800c5a8:	e635      	b.n	800c216 <_scanf_float+0x82>
 800c5aa:	bf00      	nop
 800c5ac:	0801477c 	.word	0x0801477c
 800c5b0:	08014bf8 	.word	0x08014bf8

0800c5b4 <iprintf>:
 800c5b4:	b40f      	push	{r0, r1, r2, r3}
 800c5b6:	4b0a      	ldr	r3, [pc, #40]	; (800c5e0 <iprintf+0x2c>)
 800c5b8:	b513      	push	{r0, r1, r4, lr}
 800c5ba:	681c      	ldr	r4, [r3, #0]
 800c5bc:	b124      	cbz	r4, 800c5c8 <iprintf+0x14>
 800c5be:	69a3      	ldr	r3, [r4, #24]
 800c5c0:	b913      	cbnz	r3, 800c5c8 <iprintf+0x14>
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f001 ffd2 	bl	800e56c <__sinit>
 800c5c8:	ab05      	add	r3, sp, #20
 800c5ca:	9a04      	ldr	r2, [sp, #16]
 800c5cc:	68a1      	ldr	r1, [r4, #8]
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f003 fb65 	bl	800fca0 <_vfiprintf_r>
 800c5d6:	b002      	add	sp, #8
 800c5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5dc:	b004      	add	sp, #16
 800c5de:	4770      	bx	lr
 800c5e0:	20000064 	.word	0x20000064

0800c5e4 <_puts_r>:
 800c5e4:	b570      	push	{r4, r5, r6, lr}
 800c5e6:	460e      	mov	r6, r1
 800c5e8:	4605      	mov	r5, r0
 800c5ea:	b118      	cbz	r0, 800c5f4 <_puts_r+0x10>
 800c5ec:	6983      	ldr	r3, [r0, #24]
 800c5ee:	b90b      	cbnz	r3, 800c5f4 <_puts_r+0x10>
 800c5f0:	f001 ffbc 	bl	800e56c <__sinit>
 800c5f4:	69ab      	ldr	r3, [r5, #24]
 800c5f6:	68ac      	ldr	r4, [r5, #8]
 800c5f8:	b913      	cbnz	r3, 800c600 <_puts_r+0x1c>
 800c5fa:	4628      	mov	r0, r5
 800c5fc:	f001 ffb6 	bl	800e56c <__sinit>
 800c600:	4b2c      	ldr	r3, [pc, #176]	; (800c6b4 <_puts_r+0xd0>)
 800c602:	429c      	cmp	r4, r3
 800c604:	d120      	bne.n	800c648 <_puts_r+0x64>
 800c606:	686c      	ldr	r4, [r5, #4]
 800c608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c60a:	07db      	lsls	r3, r3, #31
 800c60c:	d405      	bmi.n	800c61a <_puts_r+0x36>
 800c60e:	89a3      	ldrh	r3, [r4, #12]
 800c610:	0598      	lsls	r0, r3, #22
 800c612:	d402      	bmi.n	800c61a <_puts_r+0x36>
 800c614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c616:	f002 fbba 	bl	800ed8e <__retarget_lock_acquire_recursive>
 800c61a:	89a3      	ldrh	r3, [r4, #12]
 800c61c:	0719      	lsls	r1, r3, #28
 800c61e:	d51d      	bpl.n	800c65c <_puts_r+0x78>
 800c620:	6923      	ldr	r3, [r4, #16]
 800c622:	b1db      	cbz	r3, 800c65c <_puts_r+0x78>
 800c624:	3e01      	subs	r6, #1
 800c626:	68a3      	ldr	r3, [r4, #8]
 800c628:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c62c:	3b01      	subs	r3, #1
 800c62e:	60a3      	str	r3, [r4, #8]
 800c630:	bb39      	cbnz	r1, 800c682 <_puts_r+0x9e>
 800c632:	2b00      	cmp	r3, #0
 800c634:	da38      	bge.n	800c6a8 <_puts_r+0xc4>
 800c636:	4622      	mov	r2, r4
 800c638:	210a      	movs	r1, #10
 800c63a:	4628      	mov	r0, r5
 800c63c:	f000 ff42 	bl	800d4c4 <__swbuf_r>
 800c640:	3001      	adds	r0, #1
 800c642:	d011      	beq.n	800c668 <_puts_r+0x84>
 800c644:	250a      	movs	r5, #10
 800c646:	e011      	b.n	800c66c <_puts_r+0x88>
 800c648:	4b1b      	ldr	r3, [pc, #108]	; (800c6b8 <_puts_r+0xd4>)
 800c64a:	429c      	cmp	r4, r3
 800c64c:	d101      	bne.n	800c652 <_puts_r+0x6e>
 800c64e:	68ac      	ldr	r4, [r5, #8]
 800c650:	e7da      	b.n	800c608 <_puts_r+0x24>
 800c652:	4b1a      	ldr	r3, [pc, #104]	; (800c6bc <_puts_r+0xd8>)
 800c654:	429c      	cmp	r4, r3
 800c656:	bf08      	it	eq
 800c658:	68ec      	ldreq	r4, [r5, #12]
 800c65a:	e7d5      	b.n	800c608 <_puts_r+0x24>
 800c65c:	4621      	mov	r1, r4
 800c65e:	4628      	mov	r0, r5
 800c660:	f000 ff82 	bl	800d568 <__swsetup_r>
 800c664:	2800      	cmp	r0, #0
 800c666:	d0dd      	beq.n	800c624 <_puts_r+0x40>
 800c668:	f04f 35ff 	mov.w	r5, #4294967295
 800c66c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c66e:	07da      	lsls	r2, r3, #31
 800c670:	d405      	bmi.n	800c67e <_puts_r+0x9a>
 800c672:	89a3      	ldrh	r3, [r4, #12]
 800c674:	059b      	lsls	r3, r3, #22
 800c676:	d402      	bmi.n	800c67e <_puts_r+0x9a>
 800c678:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c67a:	f002 fb89 	bl	800ed90 <__retarget_lock_release_recursive>
 800c67e:	4628      	mov	r0, r5
 800c680:	bd70      	pop	{r4, r5, r6, pc}
 800c682:	2b00      	cmp	r3, #0
 800c684:	da04      	bge.n	800c690 <_puts_r+0xac>
 800c686:	69a2      	ldr	r2, [r4, #24]
 800c688:	429a      	cmp	r2, r3
 800c68a:	dc06      	bgt.n	800c69a <_puts_r+0xb6>
 800c68c:	290a      	cmp	r1, #10
 800c68e:	d004      	beq.n	800c69a <_puts_r+0xb6>
 800c690:	6823      	ldr	r3, [r4, #0]
 800c692:	1c5a      	adds	r2, r3, #1
 800c694:	6022      	str	r2, [r4, #0]
 800c696:	7019      	strb	r1, [r3, #0]
 800c698:	e7c5      	b.n	800c626 <_puts_r+0x42>
 800c69a:	4622      	mov	r2, r4
 800c69c:	4628      	mov	r0, r5
 800c69e:	f000 ff11 	bl	800d4c4 <__swbuf_r>
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	d1bf      	bne.n	800c626 <_puts_r+0x42>
 800c6a6:	e7df      	b.n	800c668 <_puts_r+0x84>
 800c6a8:	6823      	ldr	r3, [r4, #0]
 800c6aa:	250a      	movs	r5, #10
 800c6ac:	1c5a      	adds	r2, r3, #1
 800c6ae:	6022      	str	r2, [r4, #0]
 800c6b0:	701d      	strb	r5, [r3, #0]
 800c6b2:	e7db      	b.n	800c66c <_puts_r+0x88>
 800c6b4:	08014990 	.word	0x08014990
 800c6b8:	080149b0 	.word	0x080149b0
 800c6bc:	08014970 	.word	0x08014970

0800c6c0 <puts>:
 800c6c0:	4b02      	ldr	r3, [pc, #8]	; (800c6cc <puts+0xc>)
 800c6c2:	4601      	mov	r1, r0
 800c6c4:	6818      	ldr	r0, [r3, #0]
 800c6c6:	f7ff bf8d 	b.w	800c5e4 <_puts_r>
 800c6ca:	bf00      	nop
 800c6cc:	20000064 	.word	0x20000064

0800c6d0 <nanf>:
 800c6d0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c6d8 <nanf+0x8>
 800c6d4:	4770      	bx	lr
 800c6d6:	bf00      	nop
 800c6d8:	7fc00000 	.word	0x7fc00000

0800c6dc <siprintf>:
 800c6dc:	b40e      	push	{r1, r2, r3}
 800c6de:	b500      	push	{lr}
 800c6e0:	b09c      	sub	sp, #112	; 0x70
 800c6e2:	ab1d      	add	r3, sp, #116	; 0x74
 800c6e4:	9002      	str	r0, [sp, #8]
 800c6e6:	9006      	str	r0, [sp, #24]
 800c6e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c6ec:	4809      	ldr	r0, [pc, #36]	; (800c714 <siprintf+0x38>)
 800c6ee:	9107      	str	r1, [sp, #28]
 800c6f0:	9104      	str	r1, [sp, #16]
 800c6f2:	4909      	ldr	r1, [pc, #36]	; (800c718 <siprintf+0x3c>)
 800c6f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6f8:	9105      	str	r1, [sp, #20]
 800c6fa:	6800      	ldr	r0, [r0, #0]
 800c6fc:	9301      	str	r3, [sp, #4]
 800c6fe:	a902      	add	r1, sp, #8
 800c700:	f003 f9a4 	bl	800fa4c <_svfiprintf_r>
 800c704:	9b02      	ldr	r3, [sp, #8]
 800c706:	2200      	movs	r2, #0
 800c708:	701a      	strb	r2, [r3, #0]
 800c70a:	b01c      	add	sp, #112	; 0x70
 800c70c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c710:	b003      	add	sp, #12
 800c712:	4770      	bx	lr
 800c714:	20000064 	.word	0x20000064
 800c718:	ffff0208 	.word	0xffff0208

0800c71c <sulp>:
 800c71c:	b570      	push	{r4, r5, r6, lr}
 800c71e:	4604      	mov	r4, r0
 800c720:	460d      	mov	r5, r1
 800c722:	ec45 4b10 	vmov	d0, r4, r5
 800c726:	4616      	mov	r6, r2
 800c728:	f002 ff2c 	bl	800f584 <__ulp>
 800c72c:	ec51 0b10 	vmov	r0, r1, d0
 800c730:	b17e      	cbz	r6, 800c752 <sulp+0x36>
 800c732:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c736:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	dd09      	ble.n	800c752 <sulp+0x36>
 800c73e:	051b      	lsls	r3, r3, #20
 800c740:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c744:	2400      	movs	r4, #0
 800c746:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c74a:	4622      	mov	r2, r4
 800c74c:	462b      	mov	r3, r5
 800c74e:	f7f3 ff63 	bl	8000618 <__aeabi_dmul>
 800c752:	bd70      	pop	{r4, r5, r6, pc}
 800c754:	0000      	movs	r0, r0
	...

0800c758 <_strtod_l>:
 800c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75c:	b0a3      	sub	sp, #140	; 0x8c
 800c75e:	461f      	mov	r7, r3
 800c760:	2300      	movs	r3, #0
 800c762:	931e      	str	r3, [sp, #120]	; 0x78
 800c764:	4ba4      	ldr	r3, [pc, #656]	; (800c9f8 <_strtod_l+0x2a0>)
 800c766:	9219      	str	r2, [sp, #100]	; 0x64
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	9307      	str	r3, [sp, #28]
 800c76c:	4604      	mov	r4, r0
 800c76e:	4618      	mov	r0, r3
 800c770:	4688      	mov	r8, r1
 800c772:	f7f3 fd3d 	bl	80001f0 <strlen>
 800c776:	f04f 0a00 	mov.w	sl, #0
 800c77a:	4605      	mov	r5, r0
 800c77c:	f04f 0b00 	mov.w	fp, #0
 800c780:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c786:	781a      	ldrb	r2, [r3, #0]
 800c788:	2a2b      	cmp	r2, #43	; 0x2b
 800c78a:	d04c      	beq.n	800c826 <_strtod_l+0xce>
 800c78c:	d839      	bhi.n	800c802 <_strtod_l+0xaa>
 800c78e:	2a0d      	cmp	r2, #13
 800c790:	d832      	bhi.n	800c7f8 <_strtod_l+0xa0>
 800c792:	2a08      	cmp	r2, #8
 800c794:	d832      	bhi.n	800c7fc <_strtod_l+0xa4>
 800c796:	2a00      	cmp	r2, #0
 800c798:	d03c      	beq.n	800c814 <_strtod_l+0xbc>
 800c79a:	2300      	movs	r3, #0
 800c79c:	930e      	str	r3, [sp, #56]	; 0x38
 800c79e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c7a0:	7833      	ldrb	r3, [r6, #0]
 800c7a2:	2b30      	cmp	r3, #48	; 0x30
 800c7a4:	f040 80b4 	bne.w	800c910 <_strtod_l+0x1b8>
 800c7a8:	7873      	ldrb	r3, [r6, #1]
 800c7aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c7ae:	2b58      	cmp	r3, #88	; 0x58
 800c7b0:	d16c      	bne.n	800c88c <_strtod_l+0x134>
 800c7b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7b4:	9301      	str	r3, [sp, #4]
 800c7b6:	ab1e      	add	r3, sp, #120	; 0x78
 800c7b8:	9702      	str	r7, [sp, #8]
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	4a8f      	ldr	r2, [pc, #572]	; (800c9fc <_strtod_l+0x2a4>)
 800c7be:	ab1f      	add	r3, sp, #124	; 0x7c
 800c7c0:	a91d      	add	r1, sp, #116	; 0x74
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f001 ffd6 	bl	800e774 <__gethex>
 800c7c8:	f010 0707 	ands.w	r7, r0, #7
 800c7cc:	4605      	mov	r5, r0
 800c7ce:	d005      	beq.n	800c7dc <_strtod_l+0x84>
 800c7d0:	2f06      	cmp	r7, #6
 800c7d2:	d12a      	bne.n	800c82a <_strtod_l+0xd2>
 800c7d4:	3601      	adds	r6, #1
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	961d      	str	r6, [sp, #116]	; 0x74
 800c7da:	930e      	str	r3, [sp, #56]	; 0x38
 800c7dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f040 8596 	bne.w	800d310 <_strtod_l+0xbb8>
 800c7e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7e6:	b1db      	cbz	r3, 800c820 <_strtod_l+0xc8>
 800c7e8:	4652      	mov	r2, sl
 800c7ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c7ee:	ec43 2b10 	vmov	d0, r2, r3
 800c7f2:	b023      	add	sp, #140	; 0x8c
 800c7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f8:	2a20      	cmp	r2, #32
 800c7fa:	d1ce      	bne.n	800c79a <_strtod_l+0x42>
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	931d      	str	r3, [sp, #116]	; 0x74
 800c800:	e7c0      	b.n	800c784 <_strtod_l+0x2c>
 800c802:	2a2d      	cmp	r2, #45	; 0x2d
 800c804:	d1c9      	bne.n	800c79a <_strtod_l+0x42>
 800c806:	2201      	movs	r2, #1
 800c808:	920e      	str	r2, [sp, #56]	; 0x38
 800c80a:	1c5a      	adds	r2, r3, #1
 800c80c:	921d      	str	r2, [sp, #116]	; 0x74
 800c80e:	785b      	ldrb	r3, [r3, #1]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1c4      	bne.n	800c79e <_strtod_l+0x46>
 800c814:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c816:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f040 8576 	bne.w	800d30c <_strtod_l+0xbb4>
 800c820:	4652      	mov	r2, sl
 800c822:	465b      	mov	r3, fp
 800c824:	e7e3      	b.n	800c7ee <_strtod_l+0x96>
 800c826:	2200      	movs	r2, #0
 800c828:	e7ee      	b.n	800c808 <_strtod_l+0xb0>
 800c82a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c82c:	b13a      	cbz	r2, 800c83e <_strtod_l+0xe6>
 800c82e:	2135      	movs	r1, #53	; 0x35
 800c830:	a820      	add	r0, sp, #128	; 0x80
 800c832:	f002 ffb2 	bl	800f79a <__copybits>
 800c836:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c838:	4620      	mov	r0, r4
 800c83a:	f002 fb77 	bl	800ef2c <_Bfree>
 800c83e:	3f01      	subs	r7, #1
 800c840:	2f05      	cmp	r7, #5
 800c842:	d807      	bhi.n	800c854 <_strtod_l+0xfc>
 800c844:	e8df f007 	tbb	[pc, r7]
 800c848:	1d180b0e 	.word	0x1d180b0e
 800c84c:	030e      	.short	0x030e
 800c84e:	f04f 0b00 	mov.w	fp, #0
 800c852:	46da      	mov	sl, fp
 800c854:	0728      	lsls	r0, r5, #28
 800c856:	d5c1      	bpl.n	800c7dc <_strtod_l+0x84>
 800c858:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c85c:	e7be      	b.n	800c7dc <_strtod_l+0x84>
 800c85e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800c862:	e7f7      	b.n	800c854 <_strtod_l+0xfc>
 800c864:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800c868:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c86a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c86e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c872:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c876:	e7ed      	b.n	800c854 <_strtod_l+0xfc>
 800c878:	f8df b184 	ldr.w	fp, [pc, #388]	; 800ca00 <_strtod_l+0x2a8>
 800c87c:	f04f 0a00 	mov.w	sl, #0
 800c880:	e7e8      	b.n	800c854 <_strtod_l+0xfc>
 800c882:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c886:	f04f 3aff 	mov.w	sl, #4294967295
 800c88a:	e7e3      	b.n	800c854 <_strtod_l+0xfc>
 800c88c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c88e:	1c5a      	adds	r2, r3, #1
 800c890:	921d      	str	r2, [sp, #116]	; 0x74
 800c892:	785b      	ldrb	r3, [r3, #1]
 800c894:	2b30      	cmp	r3, #48	; 0x30
 800c896:	d0f9      	beq.n	800c88c <_strtod_l+0x134>
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d09f      	beq.n	800c7dc <_strtod_l+0x84>
 800c89c:	2301      	movs	r3, #1
 800c89e:	f04f 0900 	mov.w	r9, #0
 800c8a2:	9304      	str	r3, [sp, #16]
 800c8a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8a8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c8ac:	464f      	mov	r7, r9
 800c8ae:	220a      	movs	r2, #10
 800c8b0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c8b2:	7806      	ldrb	r6, [r0, #0]
 800c8b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c8b8:	b2d9      	uxtb	r1, r3
 800c8ba:	2909      	cmp	r1, #9
 800c8bc:	d92a      	bls.n	800c914 <_strtod_l+0x1bc>
 800c8be:	9907      	ldr	r1, [sp, #28]
 800c8c0:	462a      	mov	r2, r5
 800c8c2:	f003 fb78 	bl	800ffb6 <strncmp>
 800c8c6:	b398      	cbz	r0, 800c930 <_strtod_l+0x1d8>
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	4633      	mov	r3, r6
 800c8cc:	463d      	mov	r5, r7
 800c8ce:	9007      	str	r0, [sp, #28]
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	2b65      	cmp	r3, #101	; 0x65
 800c8d4:	d001      	beq.n	800c8da <_strtod_l+0x182>
 800c8d6:	2b45      	cmp	r3, #69	; 0x45
 800c8d8:	d118      	bne.n	800c90c <_strtod_l+0x1b4>
 800c8da:	b91d      	cbnz	r5, 800c8e4 <_strtod_l+0x18c>
 800c8dc:	9b04      	ldr	r3, [sp, #16]
 800c8de:	4303      	orrs	r3, r0
 800c8e0:	d098      	beq.n	800c814 <_strtod_l+0xbc>
 800c8e2:	2500      	movs	r5, #0
 800c8e4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800c8e8:	f108 0301 	add.w	r3, r8, #1
 800c8ec:	931d      	str	r3, [sp, #116]	; 0x74
 800c8ee:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c8f2:	2b2b      	cmp	r3, #43	; 0x2b
 800c8f4:	d075      	beq.n	800c9e2 <_strtod_l+0x28a>
 800c8f6:	2b2d      	cmp	r3, #45	; 0x2d
 800c8f8:	d07b      	beq.n	800c9f2 <_strtod_l+0x29a>
 800c8fa:	f04f 0c00 	mov.w	ip, #0
 800c8fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c902:	2909      	cmp	r1, #9
 800c904:	f240 8082 	bls.w	800ca0c <_strtod_l+0x2b4>
 800c908:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c90c:	2600      	movs	r6, #0
 800c90e:	e09d      	b.n	800ca4c <_strtod_l+0x2f4>
 800c910:	2300      	movs	r3, #0
 800c912:	e7c4      	b.n	800c89e <_strtod_l+0x146>
 800c914:	2f08      	cmp	r7, #8
 800c916:	bfd8      	it	le
 800c918:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c91a:	f100 0001 	add.w	r0, r0, #1
 800c91e:	bfda      	itte	le
 800c920:	fb02 3301 	mlale	r3, r2, r1, r3
 800c924:	9309      	strle	r3, [sp, #36]	; 0x24
 800c926:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c92a:	3701      	adds	r7, #1
 800c92c:	901d      	str	r0, [sp, #116]	; 0x74
 800c92e:	e7bf      	b.n	800c8b0 <_strtod_l+0x158>
 800c930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c932:	195a      	adds	r2, r3, r5
 800c934:	921d      	str	r2, [sp, #116]	; 0x74
 800c936:	5d5b      	ldrb	r3, [r3, r5]
 800c938:	2f00      	cmp	r7, #0
 800c93a:	d037      	beq.n	800c9ac <_strtod_l+0x254>
 800c93c:	9007      	str	r0, [sp, #28]
 800c93e:	463d      	mov	r5, r7
 800c940:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c944:	2a09      	cmp	r2, #9
 800c946:	d912      	bls.n	800c96e <_strtod_l+0x216>
 800c948:	2201      	movs	r2, #1
 800c94a:	e7c2      	b.n	800c8d2 <_strtod_l+0x17a>
 800c94c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	921d      	str	r2, [sp, #116]	; 0x74
 800c952:	785b      	ldrb	r3, [r3, #1]
 800c954:	3001      	adds	r0, #1
 800c956:	2b30      	cmp	r3, #48	; 0x30
 800c958:	d0f8      	beq.n	800c94c <_strtod_l+0x1f4>
 800c95a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c95e:	2a08      	cmp	r2, #8
 800c960:	f200 84db 	bhi.w	800d31a <_strtod_l+0xbc2>
 800c964:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c966:	9007      	str	r0, [sp, #28]
 800c968:	2000      	movs	r0, #0
 800c96a:	920a      	str	r2, [sp, #40]	; 0x28
 800c96c:	4605      	mov	r5, r0
 800c96e:	3b30      	subs	r3, #48	; 0x30
 800c970:	f100 0201 	add.w	r2, r0, #1
 800c974:	d014      	beq.n	800c9a0 <_strtod_l+0x248>
 800c976:	9907      	ldr	r1, [sp, #28]
 800c978:	4411      	add	r1, r2
 800c97a:	9107      	str	r1, [sp, #28]
 800c97c:	462a      	mov	r2, r5
 800c97e:	eb00 0e05 	add.w	lr, r0, r5
 800c982:	210a      	movs	r1, #10
 800c984:	4572      	cmp	r2, lr
 800c986:	d113      	bne.n	800c9b0 <_strtod_l+0x258>
 800c988:	182a      	adds	r2, r5, r0
 800c98a:	2a08      	cmp	r2, #8
 800c98c:	f105 0501 	add.w	r5, r5, #1
 800c990:	4405      	add	r5, r0
 800c992:	dc1c      	bgt.n	800c9ce <_strtod_l+0x276>
 800c994:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c996:	220a      	movs	r2, #10
 800c998:	fb02 3301 	mla	r3, r2, r1, r3
 800c99c:	9309      	str	r3, [sp, #36]	; 0x24
 800c99e:	2200      	movs	r2, #0
 800c9a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9a2:	1c59      	adds	r1, r3, #1
 800c9a4:	911d      	str	r1, [sp, #116]	; 0x74
 800c9a6:	785b      	ldrb	r3, [r3, #1]
 800c9a8:	4610      	mov	r0, r2
 800c9aa:	e7c9      	b.n	800c940 <_strtod_l+0x1e8>
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	e7d2      	b.n	800c956 <_strtod_l+0x1fe>
 800c9b0:	2a08      	cmp	r2, #8
 800c9b2:	dc04      	bgt.n	800c9be <_strtod_l+0x266>
 800c9b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c9b6:	434e      	muls	r6, r1
 800c9b8:	9609      	str	r6, [sp, #36]	; 0x24
 800c9ba:	3201      	adds	r2, #1
 800c9bc:	e7e2      	b.n	800c984 <_strtod_l+0x22c>
 800c9be:	f102 0c01 	add.w	ip, r2, #1
 800c9c2:	f1bc 0f10 	cmp.w	ip, #16
 800c9c6:	bfd8      	it	le
 800c9c8:	fb01 f909 	mulle.w	r9, r1, r9
 800c9cc:	e7f5      	b.n	800c9ba <_strtod_l+0x262>
 800c9ce:	2d10      	cmp	r5, #16
 800c9d0:	bfdc      	itt	le
 800c9d2:	220a      	movle	r2, #10
 800c9d4:	fb02 3909 	mlale	r9, r2, r9, r3
 800c9d8:	e7e1      	b.n	800c99e <_strtod_l+0x246>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	9307      	str	r3, [sp, #28]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	e77c      	b.n	800c8dc <_strtod_l+0x184>
 800c9e2:	f04f 0c00 	mov.w	ip, #0
 800c9e6:	f108 0302 	add.w	r3, r8, #2
 800c9ea:	931d      	str	r3, [sp, #116]	; 0x74
 800c9ec:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c9f0:	e785      	b.n	800c8fe <_strtod_l+0x1a6>
 800c9f2:	f04f 0c01 	mov.w	ip, #1
 800c9f6:	e7f6      	b.n	800c9e6 <_strtod_l+0x28e>
 800c9f8:	08014a3c 	.word	0x08014a3c
 800c9fc:	08014784 	.word	0x08014784
 800ca00:	7ff00000 	.word	0x7ff00000
 800ca04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca06:	1c59      	adds	r1, r3, #1
 800ca08:	911d      	str	r1, [sp, #116]	; 0x74
 800ca0a:	785b      	ldrb	r3, [r3, #1]
 800ca0c:	2b30      	cmp	r3, #48	; 0x30
 800ca0e:	d0f9      	beq.n	800ca04 <_strtod_l+0x2ac>
 800ca10:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ca14:	2908      	cmp	r1, #8
 800ca16:	f63f af79 	bhi.w	800c90c <_strtod_l+0x1b4>
 800ca1a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ca1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca20:	9308      	str	r3, [sp, #32]
 800ca22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca24:	1c59      	adds	r1, r3, #1
 800ca26:	911d      	str	r1, [sp, #116]	; 0x74
 800ca28:	785b      	ldrb	r3, [r3, #1]
 800ca2a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ca2e:	2e09      	cmp	r6, #9
 800ca30:	d937      	bls.n	800caa2 <_strtod_l+0x34a>
 800ca32:	9e08      	ldr	r6, [sp, #32]
 800ca34:	1b89      	subs	r1, r1, r6
 800ca36:	2908      	cmp	r1, #8
 800ca38:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ca3c:	dc02      	bgt.n	800ca44 <_strtod_l+0x2ec>
 800ca3e:	4576      	cmp	r6, lr
 800ca40:	bfa8      	it	ge
 800ca42:	4676      	movge	r6, lr
 800ca44:	f1bc 0f00 	cmp.w	ip, #0
 800ca48:	d000      	beq.n	800ca4c <_strtod_l+0x2f4>
 800ca4a:	4276      	negs	r6, r6
 800ca4c:	2d00      	cmp	r5, #0
 800ca4e:	d14f      	bne.n	800caf0 <_strtod_l+0x398>
 800ca50:	9904      	ldr	r1, [sp, #16]
 800ca52:	4301      	orrs	r1, r0
 800ca54:	f47f aec2 	bne.w	800c7dc <_strtod_l+0x84>
 800ca58:	2a00      	cmp	r2, #0
 800ca5a:	f47f aedb 	bne.w	800c814 <_strtod_l+0xbc>
 800ca5e:	2b69      	cmp	r3, #105	; 0x69
 800ca60:	d027      	beq.n	800cab2 <_strtod_l+0x35a>
 800ca62:	dc24      	bgt.n	800caae <_strtod_l+0x356>
 800ca64:	2b49      	cmp	r3, #73	; 0x49
 800ca66:	d024      	beq.n	800cab2 <_strtod_l+0x35a>
 800ca68:	2b4e      	cmp	r3, #78	; 0x4e
 800ca6a:	f47f aed3 	bne.w	800c814 <_strtod_l+0xbc>
 800ca6e:	499e      	ldr	r1, [pc, #632]	; (800cce8 <_strtod_l+0x590>)
 800ca70:	a81d      	add	r0, sp, #116	; 0x74
 800ca72:	f002 f8d7 	bl	800ec24 <__match>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	f43f aecc 	beq.w	800c814 <_strtod_l+0xbc>
 800ca7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	2b28      	cmp	r3, #40	; 0x28
 800ca82:	d12d      	bne.n	800cae0 <_strtod_l+0x388>
 800ca84:	4999      	ldr	r1, [pc, #612]	; (800ccec <_strtod_l+0x594>)
 800ca86:	aa20      	add	r2, sp, #128	; 0x80
 800ca88:	a81d      	add	r0, sp, #116	; 0x74
 800ca8a:	f002 f8df 	bl	800ec4c <__hexnan>
 800ca8e:	2805      	cmp	r0, #5
 800ca90:	d126      	bne.n	800cae0 <_strtod_l+0x388>
 800ca92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca94:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ca98:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ca9c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800caa0:	e69c      	b.n	800c7dc <_strtod_l+0x84>
 800caa2:	210a      	movs	r1, #10
 800caa4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800caa8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800caac:	e7b9      	b.n	800ca22 <_strtod_l+0x2ca>
 800caae:	2b6e      	cmp	r3, #110	; 0x6e
 800cab0:	e7db      	b.n	800ca6a <_strtod_l+0x312>
 800cab2:	498f      	ldr	r1, [pc, #572]	; (800ccf0 <_strtod_l+0x598>)
 800cab4:	a81d      	add	r0, sp, #116	; 0x74
 800cab6:	f002 f8b5 	bl	800ec24 <__match>
 800caba:	2800      	cmp	r0, #0
 800cabc:	f43f aeaa 	beq.w	800c814 <_strtod_l+0xbc>
 800cac0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cac2:	498c      	ldr	r1, [pc, #560]	; (800ccf4 <_strtod_l+0x59c>)
 800cac4:	3b01      	subs	r3, #1
 800cac6:	a81d      	add	r0, sp, #116	; 0x74
 800cac8:	931d      	str	r3, [sp, #116]	; 0x74
 800caca:	f002 f8ab 	bl	800ec24 <__match>
 800cace:	b910      	cbnz	r0, 800cad6 <_strtod_l+0x37e>
 800cad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cad2:	3301      	adds	r3, #1
 800cad4:	931d      	str	r3, [sp, #116]	; 0x74
 800cad6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800cd04 <_strtod_l+0x5ac>
 800cada:	f04f 0a00 	mov.w	sl, #0
 800cade:	e67d      	b.n	800c7dc <_strtod_l+0x84>
 800cae0:	4885      	ldr	r0, [pc, #532]	; (800ccf8 <_strtod_l+0x5a0>)
 800cae2:	f003 fa0d 	bl	800ff00 <nan>
 800cae6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800caea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800caee:	e675      	b.n	800c7dc <_strtod_l+0x84>
 800caf0:	9b07      	ldr	r3, [sp, #28]
 800caf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800caf4:	1af3      	subs	r3, r6, r3
 800caf6:	2f00      	cmp	r7, #0
 800caf8:	bf08      	it	eq
 800cafa:	462f      	moveq	r7, r5
 800cafc:	2d10      	cmp	r5, #16
 800cafe:	9308      	str	r3, [sp, #32]
 800cb00:	46a8      	mov	r8, r5
 800cb02:	bfa8      	it	ge
 800cb04:	f04f 0810 	movge.w	r8, #16
 800cb08:	f7f3 fd0c 	bl	8000524 <__aeabi_ui2d>
 800cb0c:	2d09      	cmp	r5, #9
 800cb0e:	4682      	mov	sl, r0
 800cb10:	468b      	mov	fp, r1
 800cb12:	dd13      	ble.n	800cb3c <_strtod_l+0x3e4>
 800cb14:	4b79      	ldr	r3, [pc, #484]	; (800ccfc <_strtod_l+0x5a4>)
 800cb16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cb1a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cb1e:	f7f3 fd7b 	bl	8000618 <__aeabi_dmul>
 800cb22:	4682      	mov	sl, r0
 800cb24:	4648      	mov	r0, r9
 800cb26:	468b      	mov	fp, r1
 800cb28:	f7f3 fcfc 	bl	8000524 <__aeabi_ui2d>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	460b      	mov	r3, r1
 800cb30:	4650      	mov	r0, sl
 800cb32:	4659      	mov	r1, fp
 800cb34:	f7f3 fbba 	bl	80002ac <__adddf3>
 800cb38:	4682      	mov	sl, r0
 800cb3a:	468b      	mov	fp, r1
 800cb3c:	2d0f      	cmp	r5, #15
 800cb3e:	dc38      	bgt.n	800cbb2 <_strtod_l+0x45a>
 800cb40:	9b08      	ldr	r3, [sp, #32]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f43f ae4a 	beq.w	800c7dc <_strtod_l+0x84>
 800cb48:	dd24      	ble.n	800cb94 <_strtod_l+0x43c>
 800cb4a:	2b16      	cmp	r3, #22
 800cb4c:	dc0b      	bgt.n	800cb66 <_strtod_l+0x40e>
 800cb4e:	4d6b      	ldr	r5, [pc, #428]	; (800ccfc <_strtod_l+0x5a4>)
 800cb50:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800cb54:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cb58:	4652      	mov	r2, sl
 800cb5a:	465b      	mov	r3, fp
 800cb5c:	f7f3 fd5c 	bl	8000618 <__aeabi_dmul>
 800cb60:	4682      	mov	sl, r0
 800cb62:	468b      	mov	fp, r1
 800cb64:	e63a      	b.n	800c7dc <_strtod_l+0x84>
 800cb66:	9a08      	ldr	r2, [sp, #32]
 800cb68:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	db20      	blt.n	800cbb2 <_strtod_l+0x45a>
 800cb70:	4c62      	ldr	r4, [pc, #392]	; (800ccfc <_strtod_l+0x5a4>)
 800cb72:	f1c5 050f 	rsb	r5, r5, #15
 800cb76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cb7a:	4652      	mov	r2, sl
 800cb7c:	465b      	mov	r3, fp
 800cb7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb82:	f7f3 fd49 	bl	8000618 <__aeabi_dmul>
 800cb86:	9b08      	ldr	r3, [sp, #32]
 800cb88:	1b5d      	subs	r5, r3, r5
 800cb8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cb8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cb92:	e7e3      	b.n	800cb5c <_strtod_l+0x404>
 800cb94:	9b08      	ldr	r3, [sp, #32]
 800cb96:	3316      	adds	r3, #22
 800cb98:	db0b      	blt.n	800cbb2 <_strtod_l+0x45a>
 800cb9a:	9b07      	ldr	r3, [sp, #28]
 800cb9c:	4a57      	ldr	r2, [pc, #348]	; (800ccfc <_strtod_l+0x5a4>)
 800cb9e:	1b9e      	subs	r6, r3, r6
 800cba0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800cba4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cba8:	4650      	mov	r0, sl
 800cbaa:	4659      	mov	r1, fp
 800cbac:	f7f3 fe5e 	bl	800086c <__aeabi_ddiv>
 800cbb0:	e7d6      	b.n	800cb60 <_strtod_l+0x408>
 800cbb2:	9b08      	ldr	r3, [sp, #32]
 800cbb4:	eba5 0808 	sub.w	r8, r5, r8
 800cbb8:	4498      	add	r8, r3
 800cbba:	f1b8 0f00 	cmp.w	r8, #0
 800cbbe:	dd71      	ble.n	800cca4 <_strtod_l+0x54c>
 800cbc0:	f018 030f 	ands.w	r3, r8, #15
 800cbc4:	d00a      	beq.n	800cbdc <_strtod_l+0x484>
 800cbc6:	494d      	ldr	r1, [pc, #308]	; (800ccfc <_strtod_l+0x5a4>)
 800cbc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbcc:	4652      	mov	r2, sl
 800cbce:	465b      	mov	r3, fp
 800cbd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbd4:	f7f3 fd20 	bl	8000618 <__aeabi_dmul>
 800cbd8:	4682      	mov	sl, r0
 800cbda:	468b      	mov	fp, r1
 800cbdc:	f038 080f 	bics.w	r8, r8, #15
 800cbe0:	d04d      	beq.n	800cc7e <_strtod_l+0x526>
 800cbe2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cbe6:	dd22      	ble.n	800cc2e <_strtod_l+0x4d6>
 800cbe8:	2500      	movs	r5, #0
 800cbea:	462e      	mov	r6, r5
 800cbec:	9509      	str	r5, [sp, #36]	; 0x24
 800cbee:	9507      	str	r5, [sp, #28]
 800cbf0:	2322      	movs	r3, #34	; 0x22
 800cbf2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800cd04 <_strtod_l+0x5ac>
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	f04f 0a00 	mov.w	sl, #0
 800cbfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f43f adec 	beq.w	800c7dc <_strtod_l+0x84>
 800cc04:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cc06:	4620      	mov	r0, r4
 800cc08:	f002 f990 	bl	800ef2c <_Bfree>
 800cc0c:	9907      	ldr	r1, [sp, #28]
 800cc0e:	4620      	mov	r0, r4
 800cc10:	f002 f98c 	bl	800ef2c <_Bfree>
 800cc14:	4631      	mov	r1, r6
 800cc16:	4620      	mov	r0, r4
 800cc18:	f002 f988 	bl	800ef2c <_Bfree>
 800cc1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f002 f984 	bl	800ef2c <_Bfree>
 800cc24:	4629      	mov	r1, r5
 800cc26:	4620      	mov	r0, r4
 800cc28:	f002 f980 	bl	800ef2c <_Bfree>
 800cc2c:	e5d6      	b.n	800c7dc <_strtod_l+0x84>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cc34:	4650      	mov	r0, sl
 800cc36:	4659      	mov	r1, fp
 800cc38:	4699      	mov	r9, r3
 800cc3a:	f1b8 0f01 	cmp.w	r8, #1
 800cc3e:	dc21      	bgt.n	800cc84 <_strtod_l+0x52c>
 800cc40:	b10b      	cbz	r3, 800cc46 <_strtod_l+0x4ee>
 800cc42:	4682      	mov	sl, r0
 800cc44:	468b      	mov	fp, r1
 800cc46:	4b2e      	ldr	r3, [pc, #184]	; (800cd00 <_strtod_l+0x5a8>)
 800cc48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cc4c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cc50:	4652      	mov	r2, sl
 800cc52:	465b      	mov	r3, fp
 800cc54:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cc58:	f7f3 fcde 	bl	8000618 <__aeabi_dmul>
 800cc5c:	4b29      	ldr	r3, [pc, #164]	; (800cd04 <_strtod_l+0x5ac>)
 800cc5e:	460a      	mov	r2, r1
 800cc60:	400b      	ands	r3, r1
 800cc62:	4929      	ldr	r1, [pc, #164]	; (800cd08 <_strtod_l+0x5b0>)
 800cc64:	428b      	cmp	r3, r1
 800cc66:	4682      	mov	sl, r0
 800cc68:	d8be      	bhi.n	800cbe8 <_strtod_l+0x490>
 800cc6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cc6e:	428b      	cmp	r3, r1
 800cc70:	bf86      	itte	hi
 800cc72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800cd0c <_strtod_l+0x5b4>
 800cc76:	f04f 3aff 	movhi.w	sl, #4294967295
 800cc7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cc7e:	2300      	movs	r3, #0
 800cc80:	9304      	str	r3, [sp, #16]
 800cc82:	e081      	b.n	800cd88 <_strtod_l+0x630>
 800cc84:	f018 0f01 	tst.w	r8, #1
 800cc88:	d007      	beq.n	800cc9a <_strtod_l+0x542>
 800cc8a:	4b1d      	ldr	r3, [pc, #116]	; (800cd00 <_strtod_l+0x5a8>)
 800cc8c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	f7f3 fcc0 	bl	8000618 <__aeabi_dmul>
 800cc98:	2301      	movs	r3, #1
 800cc9a:	f109 0901 	add.w	r9, r9, #1
 800cc9e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cca2:	e7ca      	b.n	800cc3a <_strtod_l+0x4e2>
 800cca4:	d0eb      	beq.n	800cc7e <_strtod_l+0x526>
 800cca6:	f1c8 0800 	rsb	r8, r8, #0
 800ccaa:	f018 020f 	ands.w	r2, r8, #15
 800ccae:	d00a      	beq.n	800ccc6 <_strtod_l+0x56e>
 800ccb0:	4b12      	ldr	r3, [pc, #72]	; (800ccfc <_strtod_l+0x5a4>)
 800ccb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccb6:	4650      	mov	r0, sl
 800ccb8:	4659      	mov	r1, fp
 800ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbe:	f7f3 fdd5 	bl	800086c <__aeabi_ddiv>
 800ccc2:	4682      	mov	sl, r0
 800ccc4:	468b      	mov	fp, r1
 800ccc6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ccca:	d0d8      	beq.n	800cc7e <_strtod_l+0x526>
 800cccc:	f1b8 0f1f 	cmp.w	r8, #31
 800ccd0:	dd1e      	ble.n	800cd10 <_strtod_l+0x5b8>
 800ccd2:	2500      	movs	r5, #0
 800ccd4:	462e      	mov	r6, r5
 800ccd6:	9509      	str	r5, [sp, #36]	; 0x24
 800ccd8:	9507      	str	r5, [sp, #28]
 800ccda:	2322      	movs	r3, #34	; 0x22
 800ccdc:	f04f 0a00 	mov.w	sl, #0
 800cce0:	f04f 0b00 	mov.w	fp, #0
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	e789      	b.n	800cbfc <_strtod_l+0x4a4>
 800cce8:	08014755 	.word	0x08014755
 800ccec:	08014798 	.word	0x08014798
 800ccf0:	0801474d 	.word	0x0801474d
 800ccf4:	080148dc 	.word	0x080148dc
 800ccf8:	08014bf8 	.word	0x08014bf8
 800ccfc:	08014ad8 	.word	0x08014ad8
 800cd00:	08014ab0 	.word	0x08014ab0
 800cd04:	7ff00000 	.word	0x7ff00000
 800cd08:	7ca00000 	.word	0x7ca00000
 800cd0c:	7fefffff 	.word	0x7fefffff
 800cd10:	f018 0310 	ands.w	r3, r8, #16
 800cd14:	bf18      	it	ne
 800cd16:	236a      	movne	r3, #106	; 0x6a
 800cd18:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d0d0 <_strtod_l+0x978>
 800cd1c:	9304      	str	r3, [sp, #16]
 800cd1e:	4650      	mov	r0, sl
 800cd20:	4659      	mov	r1, fp
 800cd22:	2300      	movs	r3, #0
 800cd24:	f018 0f01 	tst.w	r8, #1
 800cd28:	d004      	beq.n	800cd34 <_strtod_l+0x5dc>
 800cd2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cd2e:	f7f3 fc73 	bl	8000618 <__aeabi_dmul>
 800cd32:	2301      	movs	r3, #1
 800cd34:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cd38:	f109 0908 	add.w	r9, r9, #8
 800cd3c:	d1f2      	bne.n	800cd24 <_strtod_l+0x5cc>
 800cd3e:	b10b      	cbz	r3, 800cd44 <_strtod_l+0x5ec>
 800cd40:	4682      	mov	sl, r0
 800cd42:	468b      	mov	fp, r1
 800cd44:	9b04      	ldr	r3, [sp, #16]
 800cd46:	b1bb      	cbz	r3, 800cd78 <_strtod_l+0x620>
 800cd48:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800cd4c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	4659      	mov	r1, fp
 800cd54:	dd10      	ble.n	800cd78 <_strtod_l+0x620>
 800cd56:	2b1f      	cmp	r3, #31
 800cd58:	f340 8128 	ble.w	800cfac <_strtod_l+0x854>
 800cd5c:	2b34      	cmp	r3, #52	; 0x34
 800cd5e:	bfde      	ittt	le
 800cd60:	3b20      	suble	r3, #32
 800cd62:	f04f 32ff 	movle.w	r2, #4294967295
 800cd66:	fa02 f303 	lslle.w	r3, r2, r3
 800cd6a:	f04f 0a00 	mov.w	sl, #0
 800cd6e:	bfcc      	ite	gt
 800cd70:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cd74:	ea03 0b01 	andle.w	fp, r3, r1
 800cd78:	2200      	movs	r2, #0
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	4650      	mov	r0, sl
 800cd7e:	4659      	mov	r1, fp
 800cd80:	f7f3 feb2 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d1a4      	bne.n	800ccd2 <_strtod_l+0x57a>
 800cd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd8a:	9300      	str	r3, [sp, #0]
 800cd8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cd8e:	462b      	mov	r3, r5
 800cd90:	463a      	mov	r2, r7
 800cd92:	4620      	mov	r0, r4
 800cd94:	f002 f936 	bl	800f004 <__s2b>
 800cd98:	9009      	str	r0, [sp, #36]	; 0x24
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	f43f af24 	beq.w	800cbe8 <_strtod_l+0x490>
 800cda0:	9b07      	ldr	r3, [sp, #28]
 800cda2:	1b9e      	subs	r6, r3, r6
 800cda4:	9b08      	ldr	r3, [sp, #32]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	bfb4      	ite	lt
 800cdaa:	4633      	movlt	r3, r6
 800cdac:	2300      	movge	r3, #0
 800cdae:	9310      	str	r3, [sp, #64]	; 0x40
 800cdb0:	9b08      	ldr	r3, [sp, #32]
 800cdb2:	2500      	movs	r5, #0
 800cdb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cdb8:	9318      	str	r3, [sp, #96]	; 0x60
 800cdba:	462e      	mov	r6, r5
 800cdbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	6859      	ldr	r1, [r3, #4]
 800cdc2:	f002 f873 	bl	800eeac <_Balloc>
 800cdc6:	9007      	str	r0, [sp, #28]
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f43f af11 	beq.w	800cbf0 <_strtod_l+0x498>
 800cdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdd0:	691a      	ldr	r2, [r3, #16]
 800cdd2:	3202      	adds	r2, #2
 800cdd4:	f103 010c 	add.w	r1, r3, #12
 800cdd8:	0092      	lsls	r2, r2, #2
 800cdda:	300c      	adds	r0, #12
 800cddc:	f002 f858 	bl	800ee90 <memcpy>
 800cde0:	ec4b ab10 	vmov	d0, sl, fp
 800cde4:	aa20      	add	r2, sp, #128	; 0x80
 800cde6:	a91f      	add	r1, sp, #124	; 0x7c
 800cde8:	4620      	mov	r0, r4
 800cdea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800cdee:	f002 fc45 	bl	800f67c <__d2b>
 800cdf2:	901e      	str	r0, [sp, #120]	; 0x78
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	f43f aefb 	beq.w	800cbf0 <_strtod_l+0x498>
 800cdfa:	2101      	movs	r1, #1
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f002 f99b 	bl	800f138 <__i2b>
 800ce02:	4606      	mov	r6, r0
 800ce04:	2800      	cmp	r0, #0
 800ce06:	f43f aef3 	beq.w	800cbf0 <_strtod_l+0x498>
 800ce0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ce0c:	9904      	ldr	r1, [sp, #16]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	bfab      	itete	ge
 800ce12:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ce14:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ce16:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ce18:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ce1c:	bfac      	ite	ge
 800ce1e:	eb03 0902 	addge.w	r9, r3, r2
 800ce22:	1ad7      	sublt	r7, r2, r3
 800ce24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ce26:	eba3 0801 	sub.w	r8, r3, r1
 800ce2a:	4490      	add	r8, r2
 800ce2c:	4ba3      	ldr	r3, [pc, #652]	; (800d0bc <_strtod_l+0x964>)
 800ce2e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce32:	4598      	cmp	r8, r3
 800ce34:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ce38:	f280 80cc 	bge.w	800cfd4 <_strtod_l+0x87c>
 800ce3c:	eba3 0308 	sub.w	r3, r3, r8
 800ce40:	2b1f      	cmp	r3, #31
 800ce42:	eba2 0203 	sub.w	r2, r2, r3
 800ce46:	f04f 0101 	mov.w	r1, #1
 800ce4a:	f300 80b6 	bgt.w	800cfba <_strtod_l+0x862>
 800ce4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce52:	9311      	str	r3, [sp, #68]	; 0x44
 800ce54:	2300      	movs	r3, #0
 800ce56:	930c      	str	r3, [sp, #48]	; 0x30
 800ce58:	eb09 0802 	add.w	r8, r9, r2
 800ce5c:	9b04      	ldr	r3, [sp, #16]
 800ce5e:	45c1      	cmp	r9, r8
 800ce60:	4417      	add	r7, r2
 800ce62:	441f      	add	r7, r3
 800ce64:	464b      	mov	r3, r9
 800ce66:	bfa8      	it	ge
 800ce68:	4643      	movge	r3, r8
 800ce6a:	42bb      	cmp	r3, r7
 800ce6c:	bfa8      	it	ge
 800ce6e:	463b      	movge	r3, r7
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	bfc2      	ittt	gt
 800ce74:	eba8 0803 	subgt.w	r8, r8, r3
 800ce78:	1aff      	subgt	r7, r7, r3
 800ce7a:	eba9 0903 	subgt.w	r9, r9, r3
 800ce7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	dd17      	ble.n	800ceb4 <_strtod_l+0x75c>
 800ce84:	4631      	mov	r1, r6
 800ce86:	461a      	mov	r2, r3
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f002 fa11 	bl	800f2b0 <__pow5mult>
 800ce8e:	4606      	mov	r6, r0
 800ce90:	2800      	cmp	r0, #0
 800ce92:	f43f aead 	beq.w	800cbf0 <_strtod_l+0x498>
 800ce96:	4601      	mov	r1, r0
 800ce98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f002 f962 	bl	800f164 <__multiply>
 800cea0:	900f      	str	r0, [sp, #60]	; 0x3c
 800cea2:	2800      	cmp	r0, #0
 800cea4:	f43f aea4 	beq.w	800cbf0 <_strtod_l+0x498>
 800cea8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f002 f83e 	bl	800ef2c <_Bfree>
 800ceb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ceb2:	931e      	str	r3, [sp, #120]	; 0x78
 800ceb4:	f1b8 0f00 	cmp.w	r8, #0
 800ceb8:	f300 8091 	bgt.w	800cfde <_strtod_l+0x886>
 800cebc:	9b08      	ldr	r3, [sp, #32]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	dd08      	ble.n	800ced4 <_strtod_l+0x77c>
 800cec2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cec4:	9907      	ldr	r1, [sp, #28]
 800cec6:	4620      	mov	r0, r4
 800cec8:	f002 f9f2 	bl	800f2b0 <__pow5mult>
 800cecc:	9007      	str	r0, [sp, #28]
 800cece:	2800      	cmp	r0, #0
 800ced0:	f43f ae8e 	beq.w	800cbf0 <_strtod_l+0x498>
 800ced4:	2f00      	cmp	r7, #0
 800ced6:	dd08      	ble.n	800ceea <_strtod_l+0x792>
 800ced8:	9907      	ldr	r1, [sp, #28]
 800ceda:	463a      	mov	r2, r7
 800cedc:	4620      	mov	r0, r4
 800cede:	f002 fa41 	bl	800f364 <__lshift>
 800cee2:	9007      	str	r0, [sp, #28]
 800cee4:	2800      	cmp	r0, #0
 800cee6:	f43f ae83 	beq.w	800cbf0 <_strtod_l+0x498>
 800ceea:	f1b9 0f00 	cmp.w	r9, #0
 800ceee:	dd08      	ble.n	800cf02 <_strtod_l+0x7aa>
 800cef0:	4631      	mov	r1, r6
 800cef2:	464a      	mov	r2, r9
 800cef4:	4620      	mov	r0, r4
 800cef6:	f002 fa35 	bl	800f364 <__lshift>
 800cefa:	4606      	mov	r6, r0
 800cefc:	2800      	cmp	r0, #0
 800cefe:	f43f ae77 	beq.w	800cbf0 <_strtod_l+0x498>
 800cf02:	9a07      	ldr	r2, [sp, #28]
 800cf04:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cf06:	4620      	mov	r0, r4
 800cf08:	f002 fab4 	bl	800f474 <__mdiff>
 800cf0c:	4605      	mov	r5, r0
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	f43f ae6e 	beq.w	800cbf0 <_strtod_l+0x498>
 800cf14:	68c3      	ldr	r3, [r0, #12]
 800cf16:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf18:	2300      	movs	r3, #0
 800cf1a:	60c3      	str	r3, [r0, #12]
 800cf1c:	4631      	mov	r1, r6
 800cf1e:	f002 fa8d 	bl	800f43c <__mcmp>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	da65      	bge.n	800cff2 <_strtod_l+0x89a>
 800cf26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf28:	ea53 030a 	orrs.w	r3, r3, sl
 800cf2c:	f040 8087 	bne.w	800d03e <_strtod_l+0x8e6>
 800cf30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	f040 8082 	bne.w	800d03e <_strtod_l+0x8e6>
 800cf3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf3e:	0d1b      	lsrs	r3, r3, #20
 800cf40:	051b      	lsls	r3, r3, #20
 800cf42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cf46:	d97a      	bls.n	800d03e <_strtod_l+0x8e6>
 800cf48:	696b      	ldr	r3, [r5, #20]
 800cf4a:	b913      	cbnz	r3, 800cf52 <_strtod_l+0x7fa>
 800cf4c:	692b      	ldr	r3, [r5, #16]
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	dd75      	ble.n	800d03e <_strtod_l+0x8e6>
 800cf52:	4629      	mov	r1, r5
 800cf54:	2201      	movs	r2, #1
 800cf56:	4620      	mov	r0, r4
 800cf58:	f002 fa04 	bl	800f364 <__lshift>
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4605      	mov	r5, r0
 800cf60:	f002 fa6c 	bl	800f43c <__mcmp>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	dd6a      	ble.n	800d03e <_strtod_l+0x8e6>
 800cf68:	9904      	ldr	r1, [sp, #16]
 800cf6a:	4a55      	ldr	r2, [pc, #340]	; (800d0c0 <_strtod_l+0x968>)
 800cf6c:	465b      	mov	r3, fp
 800cf6e:	2900      	cmp	r1, #0
 800cf70:	f000 8085 	beq.w	800d07e <_strtod_l+0x926>
 800cf74:	ea02 010b 	and.w	r1, r2, fp
 800cf78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cf7c:	dc7f      	bgt.n	800d07e <_strtod_l+0x926>
 800cf7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cf82:	f77f aeaa 	ble.w	800ccda <_strtod_l+0x582>
 800cf86:	4a4f      	ldr	r2, [pc, #316]	; (800d0c4 <_strtod_l+0x96c>)
 800cf88:	2300      	movs	r3, #0
 800cf8a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800cf8e:	4650      	mov	r0, sl
 800cf90:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800cf94:	4659      	mov	r1, fp
 800cf96:	f7f3 fb3f 	bl	8000618 <__aeabi_dmul>
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	4303      	orrs	r3, r0
 800cf9e:	bf08      	it	eq
 800cfa0:	2322      	moveq	r3, #34	; 0x22
 800cfa2:	4682      	mov	sl, r0
 800cfa4:	468b      	mov	fp, r1
 800cfa6:	bf08      	it	eq
 800cfa8:	6023      	streq	r3, [r4, #0]
 800cfaa:	e62b      	b.n	800cc04 <_strtod_l+0x4ac>
 800cfac:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb0:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb4:	ea03 0a0a 	and.w	sl, r3, sl
 800cfb8:	e6de      	b.n	800cd78 <_strtod_l+0x620>
 800cfba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cfbe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cfc2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cfc6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cfca:	fa01 f308 	lsl.w	r3, r1, r8
 800cfce:	930c      	str	r3, [sp, #48]	; 0x30
 800cfd0:	9111      	str	r1, [sp, #68]	; 0x44
 800cfd2:	e741      	b.n	800ce58 <_strtod_l+0x700>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	930c      	str	r3, [sp, #48]	; 0x30
 800cfd8:	2301      	movs	r3, #1
 800cfda:	9311      	str	r3, [sp, #68]	; 0x44
 800cfdc:	e73c      	b.n	800ce58 <_strtod_l+0x700>
 800cfde:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cfe0:	4642      	mov	r2, r8
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f002 f9be 	bl	800f364 <__lshift>
 800cfe8:	901e      	str	r0, [sp, #120]	; 0x78
 800cfea:	2800      	cmp	r0, #0
 800cfec:	f47f af66 	bne.w	800cebc <_strtod_l+0x764>
 800cff0:	e5fe      	b.n	800cbf0 <_strtod_l+0x498>
 800cff2:	465f      	mov	r7, fp
 800cff4:	d16e      	bne.n	800d0d4 <_strtod_l+0x97c>
 800cff6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cff8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cffc:	b342      	cbz	r2, 800d050 <_strtod_l+0x8f8>
 800cffe:	4a32      	ldr	r2, [pc, #200]	; (800d0c8 <_strtod_l+0x970>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d128      	bne.n	800d056 <_strtod_l+0x8fe>
 800d004:	9b04      	ldr	r3, [sp, #16]
 800d006:	4650      	mov	r0, sl
 800d008:	b1eb      	cbz	r3, 800d046 <_strtod_l+0x8ee>
 800d00a:	4a2d      	ldr	r2, [pc, #180]	; (800d0c0 <_strtod_l+0x968>)
 800d00c:	403a      	ands	r2, r7
 800d00e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d012:	f04f 31ff 	mov.w	r1, #4294967295
 800d016:	d819      	bhi.n	800d04c <_strtod_l+0x8f4>
 800d018:	0d12      	lsrs	r2, r2, #20
 800d01a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d01e:	fa01 f303 	lsl.w	r3, r1, r3
 800d022:	4298      	cmp	r0, r3
 800d024:	d117      	bne.n	800d056 <_strtod_l+0x8fe>
 800d026:	4b29      	ldr	r3, [pc, #164]	; (800d0cc <_strtod_l+0x974>)
 800d028:	429f      	cmp	r7, r3
 800d02a:	d102      	bne.n	800d032 <_strtod_l+0x8da>
 800d02c:	3001      	adds	r0, #1
 800d02e:	f43f addf 	beq.w	800cbf0 <_strtod_l+0x498>
 800d032:	4b23      	ldr	r3, [pc, #140]	; (800d0c0 <_strtod_l+0x968>)
 800d034:	403b      	ands	r3, r7
 800d036:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d03a:	f04f 0a00 	mov.w	sl, #0
 800d03e:	9b04      	ldr	r3, [sp, #16]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1a0      	bne.n	800cf86 <_strtod_l+0x82e>
 800d044:	e5de      	b.n	800cc04 <_strtod_l+0x4ac>
 800d046:	f04f 33ff 	mov.w	r3, #4294967295
 800d04a:	e7ea      	b.n	800d022 <_strtod_l+0x8ca>
 800d04c:	460b      	mov	r3, r1
 800d04e:	e7e8      	b.n	800d022 <_strtod_l+0x8ca>
 800d050:	ea53 030a 	orrs.w	r3, r3, sl
 800d054:	d088      	beq.n	800cf68 <_strtod_l+0x810>
 800d056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d058:	b1db      	cbz	r3, 800d092 <_strtod_l+0x93a>
 800d05a:	423b      	tst	r3, r7
 800d05c:	d0ef      	beq.n	800d03e <_strtod_l+0x8e6>
 800d05e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d060:	9a04      	ldr	r2, [sp, #16]
 800d062:	4650      	mov	r0, sl
 800d064:	4659      	mov	r1, fp
 800d066:	b1c3      	cbz	r3, 800d09a <_strtod_l+0x942>
 800d068:	f7ff fb58 	bl	800c71c <sulp>
 800d06c:	4602      	mov	r2, r0
 800d06e:	460b      	mov	r3, r1
 800d070:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d074:	f7f3 f91a 	bl	80002ac <__adddf3>
 800d078:	4682      	mov	sl, r0
 800d07a:	468b      	mov	fp, r1
 800d07c:	e7df      	b.n	800d03e <_strtod_l+0x8e6>
 800d07e:	4013      	ands	r3, r2
 800d080:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d084:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d088:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d08c:	f04f 3aff 	mov.w	sl, #4294967295
 800d090:	e7d5      	b.n	800d03e <_strtod_l+0x8e6>
 800d092:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d094:	ea13 0f0a 	tst.w	r3, sl
 800d098:	e7e0      	b.n	800d05c <_strtod_l+0x904>
 800d09a:	f7ff fb3f 	bl	800c71c <sulp>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d0a6:	f7f3 f8ff 	bl	80002a8 <__aeabi_dsub>
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	4682      	mov	sl, r0
 800d0b0:	468b      	mov	fp, r1
 800d0b2:	f7f3 fd19 	bl	8000ae8 <__aeabi_dcmpeq>
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d0c1      	beq.n	800d03e <_strtod_l+0x8e6>
 800d0ba:	e60e      	b.n	800ccda <_strtod_l+0x582>
 800d0bc:	fffffc02 	.word	0xfffffc02
 800d0c0:	7ff00000 	.word	0x7ff00000
 800d0c4:	39500000 	.word	0x39500000
 800d0c8:	000fffff 	.word	0x000fffff
 800d0cc:	7fefffff 	.word	0x7fefffff
 800d0d0:	080147b0 	.word	0x080147b0
 800d0d4:	4631      	mov	r1, r6
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	f002 fb2c 	bl	800f734 <__ratio>
 800d0dc:	ec59 8b10 	vmov	r8, r9, d0
 800d0e0:	ee10 0a10 	vmov	r0, s0
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d0ea:	4649      	mov	r1, r9
 800d0ec:	f7f3 fd10 	bl	8000b10 <__aeabi_dcmple>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d07c      	beq.n	800d1ee <_strtod_l+0xa96>
 800d0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d04c      	beq.n	800d194 <_strtod_l+0xa3c>
 800d0fa:	4b95      	ldr	r3, [pc, #596]	; (800d350 <_strtod_l+0xbf8>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d102:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d350 <_strtod_l+0xbf8>
 800d106:	f04f 0800 	mov.w	r8, #0
 800d10a:	4b92      	ldr	r3, [pc, #584]	; (800d354 <_strtod_l+0xbfc>)
 800d10c:	403b      	ands	r3, r7
 800d10e:	9311      	str	r3, [sp, #68]	; 0x44
 800d110:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d112:	4b91      	ldr	r3, [pc, #580]	; (800d358 <_strtod_l+0xc00>)
 800d114:	429a      	cmp	r2, r3
 800d116:	f040 80b2 	bne.w	800d27e <_strtod_l+0xb26>
 800d11a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d11e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d122:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d126:	ec4b ab10 	vmov	d0, sl, fp
 800d12a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d12e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d132:	f002 fa27 	bl	800f584 <__ulp>
 800d136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d13a:	ec53 2b10 	vmov	r2, r3, d0
 800d13e:	f7f3 fa6b 	bl	8000618 <__aeabi_dmul>
 800d142:	4652      	mov	r2, sl
 800d144:	465b      	mov	r3, fp
 800d146:	f7f3 f8b1 	bl	80002ac <__adddf3>
 800d14a:	460b      	mov	r3, r1
 800d14c:	4981      	ldr	r1, [pc, #516]	; (800d354 <_strtod_l+0xbfc>)
 800d14e:	4a83      	ldr	r2, [pc, #524]	; (800d35c <_strtod_l+0xc04>)
 800d150:	4019      	ands	r1, r3
 800d152:	4291      	cmp	r1, r2
 800d154:	4682      	mov	sl, r0
 800d156:	d95e      	bls.n	800d216 <_strtod_l+0xabe>
 800d158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d15a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d15e:	4293      	cmp	r3, r2
 800d160:	d103      	bne.n	800d16a <_strtod_l+0xa12>
 800d162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d164:	3301      	adds	r3, #1
 800d166:	f43f ad43 	beq.w	800cbf0 <_strtod_l+0x498>
 800d16a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800d368 <_strtod_l+0xc10>
 800d16e:	f04f 3aff 	mov.w	sl, #4294967295
 800d172:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d174:	4620      	mov	r0, r4
 800d176:	f001 fed9 	bl	800ef2c <_Bfree>
 800d17a:	9907      	ldr	r1, [sp, #28]
 800d17c:	4620      	mov	r0, r4
 800d17e:	f001 fed5 	bl	800ef2c <_Bfree>
 800d182:	4631      	mov	r1, r6
 800d184:	4620      	mov	r0, r4
 800d186:	f001 fed1 	bl	800ef2c <_Bfree>
 800d18a:	4629      	mov	r1, r5
 800d18c:	4620      	mov	r0, r4
 800d18e:	f001 fecd 	bl	800ef2c <_Bfree>
 800d192:	e613      	b.n	800cdbc <_strtod_l+0x664>
 800d194:	f1ba 0f00 	cmp.w	sl, #0
 800d198:	d11b      	bne.n	800d1d2 <_strtod_l+0xa7a>
 800d19a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d19e:	b9f3      	cbnz	r3, 800d1de <_strtod_l+0xa86>
 800d1a0:	4b6b      	ldr	r3, [pc, #428]	; (800d350 <_strtod_l+0xbf8>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	4640      	mov	r0, r8
 800d1a6:	4649      	mov	r1, r9
 800d1a8:	f7f3 fca8 	bl	8000afc <__aeabi_dcmplt>
 800d1ac:	b9d0      	cbnz	r0, 800d1e4 <_strtod_l+0xa8c>
 800d1ae:	4640      	mov	r0, r8
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	4b6b      	ldr	r3, [pc, #428]	; (800d360 <_strtod_l+0xc08>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f7f3 fa2f 	bl	8000618 <__aeabi_dmul>
 800d1ba:	4680      	mov	r8, r0
 800d1bc:	4689      	mov	r9, r1
 800d1be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d1c2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d1c6:	931b      	str	r3, [sp, #108]	; 0x6c
 800d1c8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d1cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d1d0:	e79b      	b.n	800d10a <_strtod_l+0x9b2>
 800d1d2:	f1ba 0f01 	cmp.w	sl, #1
 800d1d6:	d102      	bne.n	800d1de <_strtod_l+0xa86>
 800d1d8:	2f00      	cmp	r7, #0
 800d1da:	f43f ad7e 	beq.w	800ccda <_strtod_l+0x582>
 800d1de:	4b61      	ldr	r3, [pc, #388]	; (800d364 <_strtod_l+0xc0c>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	e78c      	b.n	800d0fe <_strtod_l+0x9a6>
 800d1e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d360 <_strtod_l+0xc08>
 800d1e8:	f04f 0800 	mov.w	r8, #0
 800d1ec:	e7e7      	b.n	800d1be <_strtod_l+0xa66>
 800d1ee:	4b5c      	ldr	r3, [pc, #368]	; (800d360 <_strtod_l+0xc08>)
 800d1f0:	4640      	mov	r0, r8
 800d1f2:	4649      	mov	r1, r9
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f7f3 fa0f 	bl	8000618 <__aeabi_dmul>
 800d1fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1fc:	4680      	mov	r8, r0
 800d1fe:	4689      	mov	r9, r1
 800d200:	b933      	cbnz	r3, 800d210 <_strtod_l+0xab8>
 800d202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d206:	9012      	str	r0, [sp, #72]	; 0x48
 800d208:	9313      	str	r3, [sp, #76]	; 0x4c
 800d20a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d20e:	e7dd      	b.n	800d1cc <_strtod_l+0xa74>
 800d210:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d214:	e7f9      	b.n	800d20a <_strtod_l+0xab2>
 800d216:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d21a:	9b04      	ldr	r3, [sp, #16]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1a8      	bne.n	800d172 <_strtod_l+0xa1a>
 800d220:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d224:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d226:	0d1b      	lsrs	r3, r3, #20
 800d228:	051b      	lsls	r3, r3, #20
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d1a1      	bne.n	800d172 <_strtod_l+0xa1a>
 800d22e:	4640      	mov	r0, r8
 800d230:	4649      	mov	r1, r9
 800d232:	f7f3 fd51 	bl	8000cd8 <__aeabi_d2lz>
 800d236:	f7f3 f9c1 	bl	80005bc <__aeabi_l2d>
 800d23a:	4602      	mov	r2, r0
 800d23c:	460b      	mov	r3, r1
 800d23e:	4640      	mov	r0, r8
 800d240:	4649      	mov	r1, r9
 800d242:	f7f3 f831 	bl	80002a8 <__aeabi_dsub>
 800d246:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d248:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d24c:	ea43 030a 	orr.w	r3, r3, sl
 800d250:	4313      	orrs	r3, r2
 800d252:	4680      	mov	r8, r0
 800d254:	4689      	mov	r9, r1
 800d256:	d053      	beq.n	800d300 <_strtod_l+0xba8>
 800d258:	a335      	add	r3, pc, #212	; (adr r3, 800d330 <_strtod_l+0xbd8>)
 800d25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25e:	f7f3 fc4d 	bl	8000afc <__aeabi_dcmplt>
 800d262:	2800      	cmp	r0, #0
 800d264:	f47f acce 	bne.w	800cc04 <_strtod_l+0x4ac>
 800d268:	a333      	add	r3, pc, #204	; (adr r3, 800d338 <_strtod_l+0xbe0>)
 800d26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26e:	4640      	mov	r0, r8
 800d270:	4649      	mov	r1, r9
 800d272:	f7f3 fc61 	bl	8000b38 <__aeabi_dcmpgt>
 800d276:	2800      	cmp	r0, #0
 800d278:	f43f af7b 	beq.w	800d172 <_strtod_l+0xa1a>
 800d27c:	e4c2      	b.n	800cc04 <_strtod_l+0x4ac>
 800d27e:	9b04      	ldr	r3, [sp, #16]
 800d280:	b333      	cbz	r3, 800d2d0 <_strtod_l+0xb78>
 800d282:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d284:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d288:	d822      	bhi.n	800d2d0 <_strtod_l+0xb78>
 800d28a:	a32d      	add	r3, pc, #180	; (adr r3, 800d340 <_strtod_l+0xbe8>)
 800d28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d290:	4640      	mov	r0, r8
 800d292:	4649      	mov	r1, r9
 800d294:	f7f3 fc3c 	bl	8000b10 <__aeabi_dcmple>
 800d298:	b1a0      	cbz	r0, 800d2c4 <_strtod_l+0xb6c>
 800d29a:	4649      	mov	r1, r9
 800d29c:	4640      	mov	r0, r8
 800d29e:	f7f3 fc93 	bl	8000bc8 <__aeabi_d2uiz>
 800d2a2:	2801      	cmp	r0, #1
 800d2a4:	bf38      	it	cc
 800d2a6:	2001      	movcc	r0, #1
 800d2a8:	f7f3 f93c 	bl	8000524 <__aeabi_ui2d>
 800d2ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2ae:	4680      	mov	r8, r0
 800d2b0:	4689      	mov	r9, r1
 800d2b2:	bb13      	cbnz	r3, 800d2fa <_strtod_l+0xba2>
 800d2b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d2b8:	9014      	str	r0, [sp, #80]	; 0x50
 800d2ba:	9315      	str	r3, [sp, #84]	; 0x54
 800d2bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d2c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d2c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d2c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d2cc:	1a9b      	subs	r3, r3, r2
 800d2ce:	930d      	str	r3, [sp, #52]	; 0x34
 800d2d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2d4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d2d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d2dc:	f002 f952 	bl	800f584 <__ulp>
 800d2e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2e4:	ec53 2b10 	vmov	r2, r3, d0
 800d2e8:	f7f3 f996 	bl	8000618 <__aeabi_dmul>
 800d2ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d2f0:	f7f2 ffdc 	bl	80002ac <__adddf3>
 800d2f4:	4682      	mov	sl, r0
 800d2f6:	468b      	mov	fp, r1
 800d2f8:	e78f      	b.n	800d21a <_strtod_l+0xac2>
 800d2fa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800d2fe:	e7dd      	b.n	800d2bc <_strtod_l+0xb64>
 800d300:	a311      	add	r3, pc, #68	; (adr r3, 800d348 <_strtod_l+0xbf0>)
 800d302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d306:	f7f3 fbf9 	bl	8000afc <__aeabi_dcmplt>
 800d30a:	e7b4      	b.n	800d276 <_strtod_l+0xb1e>
 800d30c:	2300      	movs	r3, #0
 800d30e:	930e      	str	r3, [sp, #56]	; 0x38
 800d310:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d312:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d314:	6013      	str	r3, [r2, #0]
 800d316:	f7ff ba65 	b.w	800c7e4 <_strtod_l+0x8c>
 800d31a:	2b65      	cmp	r3, #101	; 0x65
 800d31c:	f43f ab5d 	beq.w	800c9da <_strtod_l+0x282>
 800d320:	2b45      	cmp	r3, #69	; 0x45
 800d322:	f43f ab5a 	beq.w	800c9da <_strtod_l+0x282>
 800d326:	2201      	movs	r2, #1
 800d328:	f7ff bb92 	b.w	800ca50 <_strtod_l+0x2f8>
 800d32c:	f3af 8000 	nop.w
 800d330:	94a03595 	.word	0x94a03595
 800d334:	3fdfffff 	.word	0x3fdfffff
 800d338:	35afe535 	.word	0x35afe535
 800d33c:	3fe00000 	.word	0x3fe00000
 800d340:	ffc00000 	.word	0xffc00000
 800d344:	41dfffff 	.word	0x41dfffff
 800d348:	94a03595 	.word	0x94a03595
 800d34c:	3fcfffff 	.word	0x3fcfffff
 800d350:	3ff00000 	.word	0x3ff00000
 800d354:	7ff00000 	.word	0x7ff00000
 800d358:	7fe00000 	.word	0x7fe00000
 800d35c:	7c9fffff 	.word	0x7c9fffff
 800d360:	3fe00000 	.word	0x3fe00000
 800d364:	bff00000 	.word	0xbff00000
 800d368:	7fefffff 	.word	0x7fefffff

0800d36c <_strtod_r>:
 800d36c:	4b01      	ldr	r3, [pc, #4]	; (800d374 <_strtod_r+0x8>)
 800d36e:	f7ff b9f3 	b.w	800c758 <_strtod_l>
 800d372:	bf00      	nop
 800d374:	200000cc 	.word	0x200000cc

0800d378 <_strtol_l.isra.0>:
 800d378:	2b01      	cmp	r3, #1
 800d37a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d37e:	d001      	beq.n	800d384 <_strtol_l.isra.0+0xc>
 800d380:	2b24      	cmp	r3, #36	; 0x24
 800d382:	d906      	bls.n	800d392 <_strtol_l.isra.0+0x1a>
 800d384:	f7fe fa6a 	bl	800b85c <__errno>
 800d388:	2316      	movs	r3, #22
 800d38a:	6003      	str	r3, [r0, #0]
 800d38c:	2000      	movs	r0, #0
 800d38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d392:	4f3a      	ldr	r7, [pc, #232]	; (800d47c <_strtol_l.isra.0+0x104>)
 800d394:	468e      	mov	lr, r1
 800d396:	4676      	mov	r6, lr
 800d398:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d39c:	5de5      	ldrb	r5, [r4, r7]
 800d39e:	f015 0508 	ands.w	r5, r5, #8
 800d3a2:	d1f8      	bne.n	800d396 <_strtol_l.isra.0+0x1e>
 800d3a4:	2c2d      	cmp	r4, #45	; 0x2d
 800d3a6:	d134      	bne.n	800d412 <_strtol_l.isra.0+0x9a>
 800d3a8:	f89e 4000 	ldrb.w	r4, [lr]
 800d3ac:	f04f 0801 	mov.w	r8, #1
 800d3b0:	f106 0e02 	add.w	lr, r6, #2
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d05c      	beq.n	800d472 <_strtol_l.isra.0+0xfa>
 800d3b8:	2b10      	cmp	r3, #16
 800d3ba:	d10c      	bne.n	800d3d6 <_strtol_l.isra.0+0x5e>
 800d3bc:	2c30      	cmp	r4, #48	; 0x30
 800d3be:	d10a      	bne.n	800d3d6 <_strtol_l.isra.0+0x5e>
 800d3c0:	f89e 4000 	ldrb.w	r4, [lr]
 800d3c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d3c8:	2c58      	cmp	r4, #88	; 0x58
 800d3ca:	d14d      	bne.n	800d468 <_strtol_l.isra.0+0xf0>
 800d3cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d3d0:	2310      	movs	r3, #16
 800d3d2:	f10e 0e02 	add.w	lr, lr, #2
 800d3d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d3da:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d3de:	2600      	movs	r6, #0
 800d3e0:	fbbc f9f3 	udiv	r9, ip, r3
 800d3e4:	4635      	mov	r5, r6
 800d3e6:	fb03 ca19 	mls	sl, r3, r9, ip
 800d3ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d3ee:	2f09      	cmp	r7, #9
 800d3f0:	d818      	bhi.n	800d424 <_strtol_l.isra.0+0xac>
 800d3f2:	463c      	mov	r4, r7
 800d3f4:	42a3      	cmp	r3, r4
 800d3f6:	dd24      	ble.n	800d442 <_strtol_l.isra.0+0xca>
 800d3f8:	2e00      	cmp	r6, #0
 800d3fa:	db1f      	blt.n	800d43c <_strtol_l.isra.0+0xc4>
 800d3fc:	45a9      	cmp	r9, r5
 800d3fe:	d31d      	bcc.n	800d43c <_strtol_l.isra.0+0xc4>
 800d400:	d101      	bne.n	800d406 <_strtol_l.isra.0+0x8e>
 800d402:	45a2      	cmp	sl, r4
 800d404:	db1a      	blt.n	800d43c <_strtol_l.isra.0+0xc4>
 800d406:	fb05 4503 	mla	r5, r5, r3, r4
 800d40a:	2601      	movs	r6, #1
 800d40c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d410:	e7eb      	b.n	800d3ea <_strtol_l.isra.0+0x72>
 800d412:	2c2b      	cmp	r4, #43	; 0x2b
 800d414:	bf08      	it	eq
 800d416:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d41a:	46a8      	mov	r8, r5
 800d41c:	bf08      	it	eq
 800d41e:	f106 0e02 	addeq.w	lr, r6, #2
 800d422:	e7c7      	b.n	800d3b4 <_strtol_l.isra.0+0x3c>
 800d424:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d428:	2f19      	cmp	r7, #25
 800d42a:	d801      	bhi.n	800d430 <_strtol_l.isra.0+0xb8>
 800d42c:	3c37      	subs	r4, #55	; 0x37
 800d42e:	e7e1      	b.n	800d3f4 <_strtol_l.isra.0+0x7c>
 800d430:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d434:	2f19      	cmp	r7, #25
 800d436:	d804      	bhi.n	800d442 <_strtol_l.isra.0+0xca>
 800d438:	3c57      	subs	r4, #87	; 0x57
 800d43a:	e7db      	b.n	800d3f4 <_strtol_l.isra.0+0x7c>
 800d43c:	f04f 36ff 	mov.w	r6, #4294967295
 800d440:	e7e4      	b.n	800d40c <_strtol_l.isra.0+0x94>
 800d442:	2e00      	cmp	r6, #0
 800d444:	da05      	bge.n	800d452 <_strtol_l.isra.0+0xda>
 800d446:	2322      	movs	r3, #34	; 0x22
 800d448:	6003      	str	r3, [r0, #0]
 800d44a:	4665      	mov	r5, ip
 800d44c:	b942      	cbnz	r2, 800d460 <_strtol_l.isra.0+0xe8>
 800d44e:	4628      	mov	r0, r5
 800d450:	e79d      	b.n	800d38e <_strtol_l.isra.0+0x16>
 800d452:	f1b8 0f00 	cmp.w	r8, #0
 800d456:	d000      	beq.n	800d45a <_strtol_l.isra.0+0xe2>
 800d458:	426d      	negs	r5, r5
 800d45a:	2a00      	cmp	r2, #0
 800d45c:	d0f7      	beq.n	800d44e <_strtol_l.isra.0+0xd6>
 800d45e:	b10e      	cbz	r6, 800d464 <_strtol_l.isra.0+0xec>
 800d460:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d464:	6011      	str	r1, [r2, #0]
 800d466:	e7f2      	b.n	800d44e <_strtol_l.isra.0+0xd6>
 800d468:	2430      	movs	r4, #48	; 0x30
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1b3      	bne.n	800d3d6 <_strtol_l.isra.0+0x5e>
 800d46e:	2308      	movs	r3, #8
 800d470:	e7b1      	b.n	800d3d6 <_strtol_l.isra.0+0x5e>
 800d472:	2c30      	cmp	r4, #48	; 0x30
 800d474:	d0a4      	beq.n	800d3c0 <_strtol_l.isra.0+0x48>
 800d476:	230a      	movs	r3, #10
 800d478:	e7ad      	b.n	800d3d6 <_strtol_l.isra.0+0x5e>
 800d47a:	bf00      	nop
 800d47c:	080147d9 	.word	0x080147d9

0800d480 <_strtol_r>:
 800d480:	f7ff bf7a 	b.w	800d378 <_strtol_l.isra.0>

0800d484 <_vsiprintf_r>:
 800d484:	b500      	push	{lr}
 800d486:	b09b      	sub	sp, #108	; 0x6c
 800d488:	9100      	str	r1, [sp, #0]
 800d48a:	9104      	str	r1, [sp, #16]
 800d48c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d490:	9105      	str	r1, [sp, #20]
 800d492:	9102      	str	r1, [sp, #8]
 800d494:	4905      	ldr	r1, [pc, #20]	; (800d4ac <_vsiprintf_r+0x28>)
 800d496:	9103      	str	r1, [sp, #12]
 800d498:	4669      	mov	r1, sp
 800d49a:	f002 fad7 	bl	800fa4c <_svfiprintf_r>
 800d49e:	9b00      	ldr	r3, [sp, #0]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	701a      	strb	r2, [r3, #0]
 800d4a4:	b01b      	add	sp, #108	; 0x6c
 800d4a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800d4aa:	bf00      	nop
 800d4ac:	ffff0208 	.word	0xffff0208

0800d4b0 <vsiprintf>:
 800d4b0:	4613      	mov	r3, r2
 800d4b2:	460a      	mov	r2, r1
 800d4b4:	4601      	mov	r1, r0
 800d4b6:	4802      	ldr	r0, [pc, #8]	; (800d4c0 <vsiprintf+0x10>)
 800d4b8:	6800      	ldr	r0, [r0, #0]
 800d4ba:	f7ff bfe3 	b.w	800d484 <_vsiprintf_r>
 800d4be:	bf00      	nop
 800d4c0:	20000064 	.word	0x20000064

0800d4c4 <__swbuf_r>:
 800d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d4c6:	460e      	mov	r6, r1
 800d4c8:	4614      	mov	r4, r2
 800d4ca:	4605      	mov	r5, r0
 800d4cc:	b118      	cbz	r0, 800d4d6 <__swbuf_r+0x12>
 800d4ce:	6983      	ldr	r3, [r0, #24]
 800d4d0:	b90b      	cbnz	r3, 800d4d6 <__swbuf_r+0x12>
 800d4d2:	f001 f84b 	bl	800e56c <__sinit>
 800d4d6:	4b21      	ldr	r3, [pc, #132]	; (800d55c <__swbuf_r+0x98>)
 800d4d8:	429c      	cmp	r4, r3
 800d4da:	d12b      	bne.n	800d534 <__swbuf_r+0x70>
 800d4dc:	686c      	ldr	r4, [r5, #4]
 800d4de:	69a3      	ldr	r3, [r4, #24]
 800d4e0:	60a3      	str	r3, [r4, #8]
 800d4e2:	89a3      	ldrh	r3, [r4, #12]
 800d4e4:	071a      	lsls	r2, r3, #28
 800d4e6:	d52f      	bpl.n	800d548 <__swbuf_r+0x84>
 800d4e8:	6923      	ldr	r3, [r4, #16]
 800d4ea:	b36b      	cbz	r3, 800d548 <__swbuf_r+0x84>
 800d4ec:	6923      	ldr	r3, [r4, #16]
 800d4ee:	6820      	ldr	r0, [r4, #0]
 800d4f0:	1ac0      	subs	r0, r0, r3
 800d4f2:	6963      	ldr	r3, [r4, #20]
 800d4f4:	b2f6      	uxtb	r6, r6
 800d4f6:	4283      	cmp	r3, r0
 800d4f8:	4637      	mov	r7, r6
 800d4fa:	dc04      	bgt.n	800d506 <__swbuf_r+0x42>
 800d4fc:	4621      	mov	r1, r4
 800d4fe:	4628      	mov	r0, r5
 800d500:	f000 ffa0 	bl	800e444 <_fflush_r>
 800d504:	bb30      	cbnz	r0, 800d554 <__swbuf_r+0x90>
 800d506:	68a3      	ldr	r3, [r4, #8]
 800d508:	3b01      	subs	r3, #1
 800d50a:	60a3      	str	r3, [r4, #8]
 800d50c:	6823      	ldr	r3, [r4, #0]
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	6022      	str	r2, [r4, #0]
 800d512:	701e      	strb	r6, [r3, #0]
 800d514:	6963      	ldr	r3, [r4, #20]
 800d516:	3001      	adds	r0, #1
 800d518:	4283      	cmp	r3, r0
 800d51a:	d004      	beq.n	800d526 <__swbuf_r+0x62>
 800d51c:	89a3      	ldrh	r3, [r4, #12]
 800d51e:	07db      	lsls	r3, r3, #31
 800d520:	d506      	bpl.n	800d530 <__swbuf_r+0x6c>
 800d522:	2e0a      	cmp	r6, #10
 800d524:	d104      	bne.n	800d530 <__swbuf_r+0x6c>
 800d526:	4621      	mov	r1, r4
 800d528:	4628      	mov	r0, r5
 800d52a:	f000 ff8b 	bl	800e444 <_fflush_r>
 800d52e:	b988      	cbnz	r0, 800d554 <__swbuf_r+0x90>
 800d530:	4638      	mov	r0, r7
 800d532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d534:	4b0a      	ldr	r3, [pc, #40]	; (800d560 <__swbuf_r+0x9c>)
 800d536:	429c      	cmp	r4, r3
 800d538:	d101      	bne.n	800d53e <__swbuf_r+0x7a>
 800d53a:	68ac      	ldr	r4, [r5, #8]
 800d53c:	e7cf      	b.n	800d4de <__swbuf_r+0x1a>
 800d53e:	4b09      	ldr	r3, [pc, #36]	; (800d564 <__swbuf_r+0xa0>)
 800d540:	429c      	cmp	r4, r3
 800d542:	bf08      	it	eq
 800d544:	68ec      	ldreq	r4, [r5, #12]
 800d546:	e7ca      	b.n	800d4de <__swbuf_r+0x1a>
 800d548:	4621      	mov	r1, r4
 800d54a:	4628      	mov	r0, r5
 800d54c:	f000 f80c 	bl	800d568 <__swsetup_r>
 800d550:	2800      	cmp	r0, #0
 800d552:	d0cb      	beq.n	800d4ec <__swbuf_r+0x28>
 800d554:	f04f 37ff 	mov.w	r7, #4294967295
 800d558:	e7ea      	b.n	800d530 <__swbuf_r+0x6c>
 800d55a:	bf00      	nop
 800d55c:	08014990 	.word	0x08014990
 800d560:	080149b0 	.word	0x080149b0
 800d564:	08014970 	.word	0x08014970

0800d568 <__swsetup_r>:
 800d568:	4b32      	ldr	r3, [pc, #200]	; (800d634 <__swsetup_r+0xcc>)
 800d56a:	b570      	push	{r4, r5, r6, lr}
 800d56c:	681d      	ldr	r5, [r3, #0]
 800d56e:	4606      	mov	r6, r0
 800d570:	460c      	mov	r4, r1
 800d572:	b125      	cbz	r5, 800d57e <__swsetup_r+0x16>
 800d574:	69ab      	ldr	r3, [r5, #24]
 800d576:	b913      	cbnz	r3, 800d57e <__swsetup_r+0x16>
 800d578:	4628      	mov	r0, r5
 800d57a:	f000 fff7 	bl	800e56c <__sinit>
 800d57e:	4b2e      	ldr	r3, [pc, #184]	; (800d638 <__swsetup_r+0xd0>)
 800d580:	429c      	cmp	r4, r3
 800d582:	d10f      	bne.n	800d5a4 <__swsetup_r+0x3c>
 800d584:	686c      	ldr	r4, [r5, #4]
 800d586:	89a3      	ldrh	r3, [r4, #12]
 800d588:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d58c:	0719      	lsls	r1, r3, #28
 800d58e:	d42c      	bmi.n	800d5ea <__swsetup_r+0x82>
 800d590:	06dd      	lsls	r5, r3, #27
 800d592:	d411      	bmi.n	800d5b8 <__swsetup_r+0x50>
 800d594:	2309      	movs	r3, #9
 800d596:	6033      	str	r3, [r6, #0]
 800d598:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d59c:	81a3      	strh	r3, [r4, #12]
 800d59e:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a2:	e03e      	b.n	800d622 <__swsetup_r+0xba>
 800d5a4:	4b25      	ldr	r3, [pc, #148]	; (800d63c <__swsetup_r+0xd4>)
 800d5a6:	429c      	cmp	r4, r3
 800d5a8:	d101      	bne.n	800d5ae <__swsetup_r+0x46>
 800d5aa:	68ac      	ldr	r4, [r5, #8]
 800d5ac:	e7eb      	b.n	800d586 <__swsetup_r+0x1e>
 800d5ae:	4b24      	ldr	r3, [pc, #144]	; (800d640 <__swsetup_r+0xd8>)
 800d5b0:	429c      	cmp	r4, r3
 800d5b2:	bf08      	it	eq
 800d5b4:	68ec      	ldreq	r4, [r5, #12]
 800d5b6:	e7e6      	b.n	800d586 <__swsetup_r+0x1e>
 800d5b8:	0758      	lsls	r0, r3, #29
 800d5ba:	d512      	bpl.n	800d5e2 <__swsetup_r+0x7a>
 800d5bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5be:	b141      	cbz	r1, 800d5d2 <__swsetup_r+0x6a>
 800d5c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5c4:	4299      	cmp	r1, r3
 800d5c6:	d002      	beq.n	800d5ce <__swsetup_r+0x66>
 800d5c8:	4630      	mov	r0, r6
 800d5ca:	f002 f939 	bl	800f840 <_free_r>
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	6363      	str	r3, [r4, #52]	; 0x34
 800d5d2:	89a3      	ldrh	r3, [r4, #12]
 800d5d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d5d8:	81a3      	strh	r3, [r4, #12]
 800d5da:	2300      	movs	r3, #0
 800d5dc:	6063      	str	r3, [r4, #4]
 800d5de:	6923      	ldr	r3, [r4, #16]
 800d5e0:	6023      	str	r3, [r4, #0]
 800d5e2:	89a3      	ldrh	r3, [r4, #12]
 800d5e4:	f043 0308 	orr.w	r3, r3, #8
 800d5e8:	81a3      	strh	r3, [r4, #12]
 800d5ea:	6923      	ldr	r3, [r4, #16]
 800d5ec:	b94b      	cbnz	r3, 800d602 <__swsetup_r+0x9a>
 800d5ee:	89a3      	ldrh	r3, [r4, #12]
 800d5f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d5f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d5f8:	d003      	beq.n	800d602 <__swsetup_r+0x9a>
 800d5fa:	4621      	mov	r1, r4
 800d5fc:	4630      	mov	r0, r6
 800d5fe:	f001 fbed 	bl	800eddc <__smakebuf_r>
 800d602:	89a0      	ldrh	r0, [r4, #12]
 800d604:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d608:	f010 0301 	ands.w	r3, r0, #1
 800d60c:	d00a      	beq.n	800d624 <__swsetup_r+0xbc>
 800d60e:	2300      	movs	r3, #0
 800d610:	60a3      	str	r3, [r4, #8]
 800d612:	6963      	ldr	r3, [r4, #20]
 800d614:	425b      	negs	r3, r3
 800d616:	61a3      	str	r3, [r4, #24]
 800d618:	6923      	ldr	r3, [r4, #16]
 800d61a:	b943      	cbnz	r3, 800d62e <__swsetup_r+0xc6>
 800d61c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d620:	d1ba      	bne.n	800d598 <__swsetup_r+0x30>
 800d622:	bd70      	pop	{r4, r5, r6, pc}
 800d624:	0781      	lsls	r1, r0, #30
 800d626:	bf58      	it	pl
 800d628:	6963      	ldrpl	r3, [r4, #20]
 800d62a:	60a3      	str	r3, [r4, #8]
 800d62c:	e7f4      	b.n	800d618 <__swsetup_r+0xb0>
 800d62e:	2000      	movs	r0, #0
 800d630:	e7f7      	b.n	800d622 <__swsetup_r+0xba>
 800d632:	bf00      	nop
 800d634:	20000064 	.word	0x20000064
 800d638:	08014990 	.word	0x08014990
 800d63c:	080149b0 	.word	0x080149b0
 800d640:	08014970 	.word	0x08014970

0800d644 <quorem>:
 800d644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d648:	6903      	ldr	r3, [r0, #16]
 800d64a:	690c      	ldr	r4, [r1, #16]
 800d64c:	42a3      	cmp	r3, r4
 800d64e:	4607      	mov	r7, r0
 800d650:	f2c0 8081 	blt.w	800d756 <quorem+0x112>
 800d654:	3c01      	subs	r4, #1
 800d656:	f101 0814 	add.w	r8, r1, #20
 800d65a:	f100 0514 	add.w	r5, r0, #20
 800d65e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d662:	9301      	str	r3, [sp, #4]
 800d664:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d668:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d66c:	3301      	adds	r3, #1
 800d66e:	429a      	cmp	r2, r3
 800d670:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d674:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d678:	fbb2 f6f3 	udiv	r6, r2, r3
 800d67c:	d331      	bcc.n	800d6e2 <quorem+0x9e>
 800d67e:	f04f 0e00 	mov.w	lr, #0
 800d682:	4640      	mov	r0, r8
 800d684:	46ac      	mov	ip, r5
 800d686:	46f2      	mov	sl, lr
 800d688:	f850 2b04 	ldr.w	r2, [r0], #4
 800d68c:	b293      	uxth	r3, r2
 800d68e:	fb06 e303 	mla	r3, r6, r3, lr
 800d692:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d696:	b29b      	uxth	r3, r3
 800d698:	ebaa 0303 	sub.w	r3, sl, r3
 800d69c:	0c12      	lsrs	r2, r2, #16
 800d69e:	f8dc a000 	ldr.w	sl, [ip]
 800d6a2:	fb06 e202 	mla	r2, r6, r2, lr
 800d6a6:	fa13 f38a 	uxtah	r3, r3, sl
 800d6aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d6ae:	fa1f fa82 	uxth.w	sl, r2
 800d6b2:	f8dc 2000 	ldr.w	r2, [ip]
 800d6b6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d6ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6be:	b29b      	uxth	r3, r3
 800d6c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6c4:	4581      	cmp	r9, r0
 800d6c6:	f84c 3b04 	str.w	r3, [ip], #4
 800d6ca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d6ce:	d2db      	bcs.n	800d688 <quorem+0x44>
 800d6d0:	f855 300b 	ldr.w	r3, [r5, fp]
 800d6d4:	b92b      	cbnz	r3, 800d6e2 <quorem+0x9e>
 800d6d6:	9b01      	ldr	r3, [sp, #4]
 800d6d8:	3b04      	subs	r3, #4
 800d6da:	429d      	cmp	r5, r3
 800d6dc:	461a      	mov	r2, r3
 800d6de:	d32e      	bcc.n	800d73e <quorem+0xfa>
 800d6e0:	613c      	str	r4, [r7, #16]
 800d6e2:	4638      	mov	r0, r7
 800d6e4:	f001 feaa 	bl	800f43c <__mcmp>
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	db24      	blt.n	800d736 <quorem+0xf2>
 800d6ec:	3601      	adds	r6, #1
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	f04f 0c00 	mov.w	ip, #0
 800d6f4:	f858 2b04 	ldr.w	r2, [r8], #4
 800d6f8:	f8d0 e000 	ldr.w	lr, [r0]
 800d6fc:	b293      	uxth	r3, r2
 800d6fe:	ebac 0303 	sub.w	r3, ip, r3
 800d702:	0c12      	lsrs	r2, r2, #16
 800d704:	fa13 f38e 	uxtah	r3, r3, lr
 800d708:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d70c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d710:	b29b      	uxth	r3, r3
 800d712:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d716:	45c1      	cmp	r9, r8
 800d718:	f840 3b04 	str.w	r3, [r0], #4
 800d71c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d720:	d2e8      	bcs.n	800d6f4 <quorem+0xb0>
 800d722:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d726:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d72a:	b922      	cbnz	r2, 800d736 <quorem+0xf2>
 800d72c:	3b04      	subs	r3, #4
 800d72e:	429d      	cmp	r5, r3
 800d730:	461a      	mov	r2, r3
 800d732:	d30a      	bcc.n	800d74a <quorem+0x106>
 800d734:	613c      	str	r4, [r7, #16]
 800d736:	4630      	mov	r0, r6
 800d738:	b003      	add	sp, #12
 800d73a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d73e:	6812      	ldr	r2, [r2, #0]
 800d740:	3b04      	subs	r3, #4
 800d742:	2a00      	cmp	r2, #0
 800d744:	d1cc      	bne.n	800d6e0 <quorem+0x9c>
 800d746:	3c01      	subs	r4, #1
 800d748:	e7c7      	b.n	800d6da <quorem+0x96>
 800d74a:	6812      	ldr	r2, [r2, #0]
 800d74c:	3b04      	subs	r3, #4
 800d74e:	2a00      	cmp	r2, #0
 800d750:	d1f0      	bne.n	800d734 <quorem+0xf0>
 800d752:	3c01      	subs	r4, #1
 800d754:	e7eb      	b.n	800d72e <quorem+0xea>
 800d756:	2000      	movs	r0, #0
 800d758:	e7ee      	b.n	800d738 <quorem+0xf4>
 800d75a:	0000      	movs	r0, r0
 800d75c:	0000      	movs	r0, r0
	...

0800d760 <_dtoa_r>:
 800d760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d764:	ed2d 8b02 	vpush	{d8}
 800d768:	ec57 6b10 	vmov	r6, r7, d0
 800d76c:	b095      	sub	sp, #84	; 0x54
 800d76e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d770:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d774:	9105      	str	r1, [sp, #20]
 800d776:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d77a:	4604      	mov	r4, r0
 800d77c:	9209      	str	r2, [sp, #36]	; 0x24
 800d77e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d780:	b975      	cbnz	r5, 800d7a0 <_dtoa_r+0x40>
 800d782:	2010      	movs	r0, #16
 800d784:	f001 fb6a 	bl	800ee5c <malloc>
 800d788:	4602      	mov	r2, r0
 800d78a:	6260      	str	r0, [r4, #36]	; 0x24
 800d78c:	b920      	cbnz	r0, 800d798 <_dtoa_r+0x38>
 800d78e:	4bb2      	ldr	r3, [pc, #712]	; (800da58 <_dtoa_r+0x2f8>)
 800d790:	21ea      	movs	r1, #234	; 0xea
 800d792:	48b2      	ldr	r0, [pc, #712]	; (800da5c <_dtoa_r+0x2fc>)
 800d794:	f002 fc40 	bl	8010018 <__assert_func>
 800d798:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d79c:	6005      	str	r5, [r0, #0]
 800d79e:	60c5      	str	r5, [r0, #12]
 800d7a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7a2:	6819      	ldr	r1, [r3, #0]
 800d7a4:	b151      	cbz	r1, 800d7bc <_dtoa_r+0x5c>
 800d7a6:	685a      	ldr	r2, [r3, #4]
 800d7a8:	604a      	str	r2, [r1, #4]
 800d7aa:	2301      	movs	r3, #1
 800d7ac:	4093      	lsls	r3, r2
 800d7ae:	608b      	str	r3, [r1, #8]
 800d7b0:	4620      	mov	r0, r4
 800d7b2:	f001 fbbb 	bl	800ef2c <_Bfree>
 800d7b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	601a      	str	r2, [r3, #0]
 800d7bc:	1e3b      	subs	r3, r7, #0
 800d7be:	bfb9      	ittee	lt
 800d7c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d7c4:	9303      	strlt	r3, [sp, #12]
 800d7c6:	2300      	movge	r3, #0
 800d7c8:	f8c8 3000 	strge.w	r3, [r8]
 800d7cc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d7d0:	4ba3      	ldr	r3, [pc, #652]	; (800da60 <_dtoa_r+0x300>)
 800d7d2:	bfbc      	itt	lt
 800d7d4:	2201      	movlt	r2, #1
 800d7d6:	f8c8 2000 	strlt.w	r2, [r8]
 800d7da:	ea33 0309 	bics.w	r3, r3, r9
 800d7de:	d11b      	bne.n	800d818 <_dtoa_r+0xb8>
 800d7e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d7e2:	f242 730f 	movw	r3, #9999	; 0x270f
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d7ec:	4333      	orrs	r3, r6
 800d7ee:	f000 857a 	beq.w	800e2e6 <_dtoa_r+0xb86>
 800d7f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7f4:	b963      	cbnz	r3, 800d810 <_dtoa_r+0xb0>
 800d7f6:	4b9b      	ldr	r3, [pc, #620]	; (800da64 <_dtoa_r+0x304>)
 800d7f8:	e024      	b.n	800d844 <_dtoa_r+0xe4>
 800d7fa:	4b9b      	ldr	r3, [pc, #620]	; (800da68 <_dtoa_r+0x308>)
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	3308      	adds	r3, #8
 800d800:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d802:	6013      	str	r3, [r2, #0]
 800d804:	9800      	ldr	r0, [sp, #0]
 800d806:	b015      	add	sp, #84	; 0x54
 800d808:	ecbd 8b02 	vpop	{d8}
 800d80c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d810:	4b94      	ldr	r3, [pc, #592]	; (800da64 <_dtoa_r+0x304>)
 800d812:	9300      	str	r3, [sp, #0]
 800d814:	3303      	adds	r3, #3
 800d816:	e7f3      	b.n	800d800 <_dtoa_r+0xa0>
 800d818:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d81c:	2200      	movs	r2, #0
 800d81e:	ec51 0b17 	vmov	r0, r1, d7
 800d822:	2300      	movs	r3, #0
 800d824:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d828:	f7f3 f95e 	bl	8000ae8 <__aeabi_dcmpeq>
 800d82c:	4680      	mov	r8, r0
 800d82e:	b158      	cbz	r0, 800d848 <_dtoa_r+0xe8>
 800d830:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d832:	2301      	movs	r3, #1
 800d834:	6013      	str	r3, [r2, #0]
 800d836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d838:	2b00      	cmp	r3, #0
 800d83a:	f000 8551 	beq.w	800e2e0 <_dtoa_r+0xb80>
 800d83e:	488b      	ldr	r0, [pc, #556]	; (800da6c <_dtoa_r+0x30c>)
 800d840:	6018      	str	r0, [r3, #0]
 800d842:	1e43      	subs	r3, r0, #1
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	e7dd      	b.n	800d804 <_dtoa_r+0xa4>
 800d848:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d84c:	aa12      	add	r2, sp, #72	; 0x48
 800d84e:	a913      	add	r1, sp, #76	; 0x4c
 800d850:	4620      	mov	r0, r4
 800d852:	f001 ff13 	bl	800f67c <__d2b>
 800d856:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d85a:	4683      	mov	fp, r0
 800d85c:	2d00      	cmp	r5, #0
 800d85e:	d07c      	beq.n	800d95a <_dtoa_r+0x1fa>
 800d860:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d862:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d86a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d86e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d872:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d876:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d87a:	4b7d      	ldr	r3, [pc, #500]	; (800da70 <_dtoa_r+0x310>)
 800d87c:	2200      	movs	r2, #0
 800d87e:	4630      	mov	r0, r6
 800d880:	4639      	mov	r1, r7
 800d882:	f7f2 fd11 	bl	80002a8 <__aeabi_dsub>
 800d886:	a36e      	add	r3, pc, #440	; (adr r3, 800da40 <_dtoa_r+0x2e0>)
 800d888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88c:	f7f2 fec4 	bl	8000618 <__aeabi_dmul>
 800d890:	a36d      	add	r3, pc, #436	; (adr r3, 800da48 <_dtoa_r+0x2e8>)
 800d892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d896:	f7f2 fd09 	bl	80002ac <__adddf3>
 800d89a:	4606      	mov	r6, r0
 800d89c:	4628      	mov	r0, r5
 800d89e:	460f      	mov	r7, r1
 800d8a0:	f7f2 fe50 	bl	8000544 <__aeabi_i2d>
 800d8a4:	a36a      	add	r3, pc, #424	; (adr r3, 800da50 <_dtoa_r+0x2f0>)
 800d8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8aa:	f7f2 feb5 	bl	8000618 <__aeabi_dmul>
 800d8ae:	4602      	mov	r2, r0
 800d8b0:	460b      	mov	r3, r1
 800d8b2:	4630      	mov	r0, r6
 800d8b4:	4639      	mov	r1, r7
 800d8b6:	f7f2 fcf9 	bl	80002ac <__adddf3>
 800d8ba:	4606      	mov	r6, r0
 800d8bc:	460f      	mov	r7, r1
 800d8be:	f7f3 f95b 	bl	8000b78 <__aeabi_d2iz>
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	4682      	mov	sl, r0
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	4630      	mov	r0, r6
 800d8ca:	4639      	mov	r1, r7
 800d8cc:	f7f3 f916 	bl	8000afc <__aeabi_dcmplt>
 800d8d0:	b148      	cbz	r0, 800d8e6 <_dtoa_r+0x186>
 800d8d2:	4650      	mov	r0, sl
 800d8d4:	f7f2 fe36 	bl	8000544 <__aeabi_i2d>
 800d8d8:	4632      	mov	r2, r6
 800d8da:	463b      	mov	r3, r7
 800d8dc:	f7f3 f904 	bl	8000ae8 <__aeabi_dcmpeq>
 800d8e0:	b908      	cbnz	r0, 800d8e6 <_dtoa_r+0x186>
 800d8e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8e6:	f1ba 0f16 	cmp.w	sl, #22
 800d8ea:	d854      	bhi.n	800d996 <_dtoa_r+0x236>
 800d8ec:	4b61      	ldr	r3, [pc, #388]	; (800da74 <_dtoa_r+0x314>)
 800d8ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d8fa:	f7f3 f8ff 	bl	8000afc <__aeabi_dcmplt>
 800d8fe:	2800      	cmp	r0, #0
 800d900:	d04b      	beq.n	800d99a <_dtoa_r+0x23a>
 800d902:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d906:	2300      	movs	r3, #0
 800d908:	930e      	str	r3, [sp, #56]	; 0x38
 800d90a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d90c:	1b5d      	subs	r5, r3, r5
 800d90e:	1e6b      	subs	r3, r5, #1
 800d910:	9304      	str	r3, [sp, #16]
 800d912:	bf43      	ittte	mi
 800d914:	2300      	movmi	r3, #0
 800d916:	f1c5 0801 	rsbmi	r8, r5, #1
 800d91a:	9304      	strmi	r3, [sp, #16]
 800d91c:	f04f 0800 	movpl.w	r8, #0
 800d920:	f1ba 0f00 	cmp.w	sl, #0
 800d924:	db3b      	blt.n	800d99e <_dtoa_r+0x23e>
 800d926:	9b04      	ldr	r3, [sp, #16]
 800d928:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d92c:	4453      	add	r3, sl
 800d92e:	9304      	str	r3, [sp, #16]
 800d930:	2300      	movs	r3, #0
 800d932:	9306      	str	r3, [sp, #24]
 800d934:	9b05      	ldr	r3, [sp, #20]
 800d936:	2b09      	cmp	r3, #9
 800d938:	d869      	bhi.n	800da0e <_dtoa_r+0x2ae>
 800d93a:	2b05      	cmp	r3, #5
 800d93c:	bfc4      	itt	gt
 800d93e:	3b04      	subgt	r3, #4
 800d940:	9305      	strgt	r3, [sp, #20]
 800d942:	9b05      	ldr	r3, [sp, #20]
 800d944:	f1a3 0302 	sub.w	r3, r3, #2
 800d948:	bfcc      	ite	gt
 800d94a:	2500      	movgt	r5, #0
 800d94c:	2501      	movle	r5, #1
 800d94e:	2b03      	cmp	r3, #3
 800d950:	d869      	bhi.n	800da26 <_dtoa_r+0x2c6>
 800d952:	e8df f003 	tbb	[pc, r3]
 800d956:	4e2c      	.short	0x4e2c
 800d958:	5a4c      	.short	0x5a4c
 800d95a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d95e:	441d      	add	r5, r3
 800d960:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d964:	2b20      	cmp	r3, #32
 800d966:	bfc1      	itttt	gt
 800d968:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d96c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d970:	fa09 f303 	lslgt.w	r3, r9, r3
 800d974:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d978:	bfda      	itte	le
 800d97a:	f1c3 0320 	rsble	r3, r3, #32
 800d97e:	fa06 f003 	lslle.w	r0, r6, r3
 800d982:	4318      	orrgt	r0, r3
 800d984:	f7f2 fdce 	bl	8000524 <__aeabi_ui2d>
 800d988:	2301      	movs	r3, #1
 800d98a:	4606      	mov	r6, r0
 800d98c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d990:	3d01      	subs	r5, #1
 800d992:	9310      	str	r3, [sp, #64]	; 0x40
 800d994:	e771      	b.n	800d87a <_dtoa_r+0x11a>
 800d996:	2301      	movs	r3, #1
 800d998:	e7b6      	b.n	800d908 <_dtoa_r+0x1a8>
 800d99a:	900e      	str	r0, [sp, #56]	; 0x38
 800d99c:	e7b5      	b.n	800d90a <_dtoa_r+0x1aa>
 800d99e:	f1ca 0300 	rsb	r3, sl, #0
 800d9a2:	9306      	str	r3, [sp, #24]
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	eba8 080a 	sub.w	r8, r8, sl
 800d9aa:	930d      	str	r3, [sp, #52]	; 0x34
 800d9ac:	e7c2      	b.n	800d934 <_dtoa_r+0x1d4>
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	9308      	str	r3, [sp, #32]
 800d9b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	dc39      	bgt.n	800da2c <_dtoa_r+0x2cc>
 800d9b8:	f04f 0901 	mov.w	r9, #1
 800d9bc:	f8cd 9004 	str.w	r9, [sp, #4]
 800d9c0:	464b      	mov	r3, r9
 800d9c2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d9c6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d9c8:	2200      	movs	r2, #0
 800d9ca:	6042      	str	r2, [r0, #4]
 800d9cc:	2204      	movs	r2, #4
 800d9ce:	f102 0614 	add.w	r6, r2, #20
 800d9d2:	429e      	cmp	r6, r3
 800d9d4:	6841      	ldr	r1, [r0, #4]
 800d9d6:	d92f      	bls.n	800da38 <_dtoa_r+0x2d8>
 800d9d8:	4620      	mov	r0, r4
 800d9da:	f001 fa67 	bl	800eeac <_Balloc>
 800d9de:	9000      	str	r0, [sp, #0]
 800d9e0:	2800      	cmp	r0, #0
 800d9e2:	d14b      	bne.n	800da7c <_dtoa_r+0x31c>
 800d9e4:	4b24      	ldr	r3, [pc, #144]	; (800da78 <_dtoa_r+0x318>)
 800d9e6:	4602      	mov	r2, r0
 800d9e8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d9ec:	e6d1      	b.n	800d792 <_dtoa_r+0x32>
 800d9ee:	2301      	movs	r3, #1
 800d9f0:	e7de      	b.n	800d9b0 <_dtoa_r+0x250>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	9308      	str	r3, [sp, #32]
 800d9f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9f8:	eb0a 0903 	add.w	r9, sl, r3
 800d9fc:	f109 0301 	add.w	r3, r9, #1
 800da00:	2b01      	cmp	r3, #1
 800da02:	9301      	str	r3, [sp, #4]
 800da04:	bfb8      	it	lt
 800da06:	2301      	movlt	r3, #1
 800da08:	e7dd      	b.n	800d9c6 <_dtoa_r+0x266>
 800da0a:	2301      	movs	r3, #1
 800da0c:	e7f2      	b.n	800d9f4 <_dtoa_r+0x294>
 800da0e:	2501      	movs	r5, #1
 800da10:	2300      	movs	r3, #0
 800da12:	9305      	str	r3, [sp, #20]
 800da14:	9508      	str	r5, [sp, #32]
 800da16:	f04f 39ff 	mov.w	r9, #4294967295
 800da1a:	2200      	movs	r2, #0
 800da1c:	f8cd 9004 	str.w	r9, [sp, #4]
 800da20:	2312      	movs	r3, #18
 800da22:	9209      	str	r2, [sp, #36]	; 0x24
 800da24:	e7cf      	b.n	800d9c6 <_dtoa_r+0x266>
 800da26:	2301      	movs	r3, #1
 800da28:	9308      	str	r3, [sp, #32]
 800da2a:	e7f4      	b.n	800da16 <_dtoa_r+0x2b6>
 800da2c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800da30:	f8cd 9004 	str.w	r9, [sp, #4]
 800da34:	464b      	mov	r3, r9
 800da36:	e7c6      	b.n	800d9c6 <_dtoa_r+0x266>
 800da38:	3101      	adds	r1, #1
 800da3a:	6041      	str	r1, [r0, #4]
 800da3c:	0052      	lsls	r2, r2, #1
 800da3e:	e7c6      	b.n	800d9ce <_dtoa_r+0x26e>
 800da40:	636f4361 	.word	0x636f4361
 800da44:	3fd287a7 	.word	0x3fd287a7
 800da48:	8b60c8b3 	.word	0x8b60c8b3
 800da4c:	3fc68a28 	.word	0x3fc68a28
 800da50:	509f79fb 	.word	0x509f79fb
 800da54:	3fd34413 	.word	0x3fd34413
 800da58:	080148e6 	.word	0x080148e6
 800da5c:	080148fd 	.word	0x080148fd
 800da60:	7ff00000 	.word	0x7ff00000
 800da64:	080148e2 	.word	0x080148e2
 800da68:	080148d9 	.word	0x080148d9
 800da6c:	08014759 	.word	0x08014759
 800da70:	3ff80000 	.word	0x3ff80000
 800da74:	08014ad8 	.word	0x08014ad8
 800da78:	0801495c 	.word	0x0801495c
 800da7c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da7e:	9a00      	ldr	r2, [sp, #0]
 800da80:	601a      	str	r2, [r3, #0]
 800da82:	9b01      	ldr	r3, [sp, #4]
 800da84:	2b0e      	cmp	r3, #14
 800da86:	f200 80ad 	bhi.w	800dbe4 <_dtoa_r+0x484>
 800da8a:	2d00      	cmp	r5, #0
 800da8c:	f000 80aa 	beq.w	800dbe4 <_dtoa_r+0x484>
 800da90:	f1ba 0f00 	cmp.w	sl, #0
 800da94:	dd36      	ble.n	800db04 <_dtoa_r+0x3a4>
 800da96:	4ac3      	ldr	r2, [pc, #780]	; (800dda4 <_dtoa_r+0x644>)
 800da98:	f00a 030f 	and.w	r3, sl, #15
 800da9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800daa0:	ed93 7b00 	vldr	d7, [r3]
 800daa4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800daa8:	ea4f 172a 	mov.w	r7, sl, asr #4
 800daac:	eeb0 8a47 	vmov.f32	s16, s14
 800dab0:	eef0 8a67 	vmov.f32	s17, s15
 800dab4:	d016      	beq.n	800dae4 <_dtoa_r+0x384>
 800dab6:	4bbc      	ldr	r3, [pc, #752]	; (800dda8 <_dtoa_r+0x648>)
 800dab8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800dabc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800dac0:	f7f2 fed4 	bl	800086c <__aeabi_ddiv>
 800dac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dac8:	f007 070f 	and.w	r7, r7, #15
 800dacc:	2503      	movs	r5, #3
 800dace:	4eb6      	ldr	r6, [pc, #728]	; (800dda8 <_dtoa_r+0x648>)
 800dad0:	b957      	cbnz	r7, 800dae8 <_dtoa_r+0x388>
 800dad2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dad6:	ec53 2b18 	vmov	r2, r3, d8
 800dada:	f7f2 fec7 	bl	800086c <__aeabi_ddiv>
 800dade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dae2:	e029      	b.n	800db38 <_dtoa_r+0x3d8>
 800dae4:	2502      	movs	r5, #2
 800dae6:	e7f2      	b.n	800dace <_dtoa_r+0x36e>
 800dae8:	07f9      	lsls	r1, r7, #31
 800daea:	d508      	bpl.n	800dafe <_dtoa_r+0x39e>
 800daec:	ec51 0b18 	vmov	r0, r1, d8
 800daf0:	e9d6 2300 	ldrd	r2, r3, [r6]
 800daf4:	f7f2 fd90 	bl	8000618 <__aeabi_dmul>
 800daf8:	ec41 0b18 	vmov	d8, r0, r1
 800dafc:	3501      	adds	r5, #1
 800dafe:	107f      	asrs	r7, r7, #1
 800db00:	3608      	adds	r6, #8
 800db02:	e7e5      	b.n	800dad0 <_dtoa_r+0x370>
 800db04:	f000 80a6 	beq.w	800dc54 <_dtoa_r+0x4f4>
 800db08:	f1ca 0600 	rsb	r6, sl, #0
 800db0c:	4ba5      	ldr	r3, [pc, #660]	; (800dda4 <_dtoa_r+0x644>)
 800db0e:	4fa6      	ldr	r7, [pc, #664]	; (800dda8 <_dtoa_r+0x648>)
 800db10:	f006 020f 	and.w	r2, r6, #15
 800db14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800db20:	f7f2 fd7a 	bl	8000618 <__aeabi_dmul>
 800db24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db28:	1136      	asrs	r6, r6, #4
 800db2a:	2300      	movs	r3, #0
 800db2c:	2502      	movs	r5, #2
 800db2e:	2e00      	cmp	r6, #0
 800db30:	f040 8085 	bne.w	800dc3e <_dtoa_r+0x4de>
 800db34:	2b00      	cmp	r3, #0
 800db36:	d1d2      	bne.n	800dade <_dtoa_r+0x37e>
 800db38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	f000 808c 	beq.w	800dc58 <_dtoa_r+0x4f8>
 800db40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800db44:	4b99      	ldr	r3, [pc, #612]	; (800ddac <_dtoa_r+0x64c>)
 800db46:	2200      	movs	r2, #0
 800db48:	4630      	mov	r0, r6
 800db4a:	4639      	mov	r1, r7
 800db4c:	f7f2 ffd6 	bl	8000afc <__aeabi_dcmplt>
 800db50:	2800      	cmp	r0, #0
 800db52:	f000 8081 	beq.w	800dc58 <_dtoa_r+0x4f8>
 800db56:	9b01      	ldr	r3, [sp, #4]
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d07d      	beq.n	800dc58 <_dtoa_r+0x4f8>
 800db5c:	f1b9 0f00 	cmp.w	r9, #0
 800db60:	dd3c      	ble.n	800dbdc <_dtoa_r+0x47c>
 800db62:	f10a 33ff 	add.w	r3, sl, #4294967295
 800db66:	9307      	str	r3, [sp, #28]
 800db68:	2200      	movs	r2, #0
 800db6a:	4b91      	ldr	r3, [pc, #580]	; (800ddb0 <_dtoa_r+0x650>)
 800db6c:	4630      	mov	r0, r6
 800db6e:	4639      	mov	r1, r7
 800db70:	f7f2 fd52 	bl	8000618 <__aeabi_dmul>
 800db74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800db78:	3501      	adds	r5, #1
 800db7a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800db7e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800db82:	4628      	mov	r0, r5
 800db84:	f7f2 fcde 	bl	8000544 <__aeabi_i2d>
 800db88:	4632      	mov	r2, r6
 800db8a:	463b      	mov	r3, r7
 800db8c:	f7f2 fd44 	bl	8000618 <__aeabi_dmul>
 800db90:	4b88      	ldr	r3, [pc, #544]	; (800ddb4 <_dtoa_r+0x654>)
 800db92:	2200      	movs	r2, #0
 800db94:	f7f2 fb8a 	bl	80002ac <__adddf3>
 800db98:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800db9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dba0:	9303      	str	r3, [sp, #12]
 800dba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d15c      	bne.n	800dc62 <_dtoa_r+0x502>
 800dba8:	4b83      	ldr	r3, [pc, #524]	; (800ddb8 <_dtoa_r+0x658>)
 800dbaa:	2200      	movs	r2, #0
 800dbac:	4630      	mov	r0, r6
 800dbae:	4639      	mov	r1, r7
 800dbb0:	f7f2 fb7a 	bl	80002a8 <__aeabi_dsub>
 800dbb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dbb8:	4606      	mov	r6, r0
 800dbba:	460f      	mov	r7, r1
 800dbbc:	f7f2 ffbc 	bl	8000b38 <__aeabi_dcmpgt>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	f040 8296 	bne.w	800e0f2 <_dtoa_r+0x992>
 800dbc6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800dbca:	4630      	mov	r0, r6
 800dbcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dbd0:	4639      	mov	r1, r7
 800dbd2:	f7f2 ff93 	bl	8000afc <__aeabi_dcmplt>
 800dbd6:	2800      	cmp	r0, #0
 800dbd8:	f040 8288 	bne.w	800e0ec <_dtoa_r+0x98c>
 800dbdc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800dbe0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800dbe4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	f2c0 8158 	blt.w	800de9c <_dtoa_r+0x73c>
 800dbec:	f1ba 0f0e 	cmp.w	sl, #14
 800dbf0:	f300 8154 	bgt.w	800de9c <_dtoa_r+0x73c>
 800dbf4:	4b6b      	ldr	r3, [pc, #428]	; (800dda4 <_dtoa_r+0x644>)
 800dbf6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dbfa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800dbfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	f280 80e3 	bge.w	800ddcc <_dtoa_r+0x66c>
 800dc06:	9b01      	ldr	r3, [sp, #4]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	f300 80df 	bgt.w	800ddcc <_dtoa_r+0x66c>
 800dc0e:	f040 826d 	bne.w	800e0ec <_dtoa_r+0x98c>
 800dc12:	4b69      	ldr	r3, [pc, #420]	; (800ddb8 <_dtoa_r+0x658>)
 800dc14:	2200      	movs	r2, #0
 800dc16:	4640      	mov	r0, r8
 800dc18:	4649      	mov	r1, r9
 800dc1a:	f7f2 fcfd 	bl	8000618 <__aeabi_dmul>
 800dc1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800dc22:	f7f2 ff7f 	bl	8000b24 <__aeabi_dcmpge>
 800dc26:	9e01      	ldr	r6, [sp, #4]
 800dc28:	4637      	mov	r7, r6
 800dc2a:	2800      	cmp	r0, #0
 800dc2c:	f040 8243 	bne.w	800e0b6 <_dtoa_r+0x956>
 800dc30:	9d00      	ldr	r5, [sp, #0]
 800dc32:	2331      	movs	r3, #49	; 0x31
 800dc34:	f805 3b01 	strb.w	r3, [r5], #1
 800dc38:	f10a 0a01 	add.w	sl, sl, #1
 800dc3c:	e23f      	b.n	800e0be <_dtoa_r+0x95e>
 800dc3e:	07f2      	lsls	r2, r6, #31
 800dc40:	d505      	bpl.n	800dc4e <_dtoa_r+0x4ee>
 800dc42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc46:	f7f2 fce7 	bl	8000618 <__aeabi_dmul>
 800dc4a:	3501      	adds	r5, #1
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	1076      	asrs	r6, r6, #1
 800dc50:	3708      	adds	r7, #8
 800dc52:	e76c      	b.n	800db2e <_dtoa_r+0x3ce>
 800dc54:	2502      	movs	r5, #2
 800dc56:	e76f      	b.n	800db38 <_dtoa_r+0x3d8>
 800dc58:	9b01      	ldr	r3, [sp, #4]
 800dc5a:	f8cd a01c 	str.w	sl, [sp, #28]
 800dc5e:	930c      	str	r3, [sp, #48]	; 0x30
 800dc60:	e78d      	b.n	800db7e <_dtoa_r+0x41e>
 800dc62:	9900      	ldr	r1, [sp, #0]
 800dc64:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dc66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dc68:	4b4e      	ldr	r3, [pc, #312]	; (800dda4 <_dtoa_r+0x644>)
 800dc6a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dc6e:	4401      	add	r1, r0
 800dc70:	9102      	str	r1, [sp, #8]
 800dc72:	9908      	ldr	r1, [sp, #32]
 800dc74:	eeb0 8a47 	vmov.f32	s16, s14
 800dc78:	eef0 8a67 	vmov.f32	s17, s15
 800dc7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dc80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dc84:	2900      	cmp	r1, #0
 800dc86:	d045      	beq.n	800dd14 <_dtoa_r+0x5b4>
 800dc88:	494c      	ldr	r1, [pc, #304]	; (800ddbc <_dtoa_r+0x65c>)
 800dc8a:	2000      	movs	r0, #0
 800dc8c:	f7f2 fdee 	bl	800086c <__aeabi_ddiv>
 800dc90:	ec53 2b18 	vmov	r2, r3, d8
 800dc94:	f7f2 fb08 	bl	80002a8 <__aeabi_dsub>
 800dc98:	9d00      	ldr	r5, [sp, #0]
 800dc9a:	ec41 0b18 	vmov	d8, r0, r1
 800dc9e:	4639      	mov	r1, r7
 800dca0:	4630      	mov	r0, r6
 800dca2:	f7f2 ff69 	bl	8000b78 <__aeabi_d2iz>
 800dca6:	900c      	str	r0, [sp, #48]	; 0x30
 800dca8:	f7f2 fc4c 	bl	8000544 <__aeabi_i2d>
 800dcac:	4602      	mov	r2, r0
 800dcae:	460b      	mov	r3, r1
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	4639      	mov	r1, r7
 800dcb4:	f7f2 faf8 	bl	80002a8 <__aeabi_dsub>
 800dcb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dcba:	3330      	adds	r3, #48	; 0x30
 800dcbc:	f805 3b01 	strb.w	r3, [r5], #1
 800dcc0:	ec53 2b18 	vmov	r2, r3, d8
 800dcc4:	4606      	mov	r6, r0
 800dcc6:	460f      	mov	r7, r1
 800dcc8:	f7f2 ff18 	bl	8000afc <__aeabi_dcmplt>
 800dccc:	2800      	cmp	r0, #0
 800dcce:	d165      	bne.n	800dd9c <_dtoa_r+0x63c>
 800dcd0:	4632      	mov	r2, r6
 800dcd2:	463b      	mov	r3, r7
 800dcd4:	4935      	ldr	r1, [pc, #212]	; (800ddac <_dtoa_r+0x64c>)
 800dcd6:	2000      	movs	r0, #0
 800dcd8:	f7f2 fae6 	bl	80002a8 <__aeabi_dsub>
 800dcdc:	ec53 2b18 	vmov	r2, r3, d8
 800dce0:	f7f2 ff0c 	bl	8000afc <__aeabi_dcmplt>
 800dce4:	2800      	cmp	r0, #0
 800dce6:	f040 80b9 	bne.w	800de5c <_dtoa_r+0x6fc>
 800dcea:	9b02      	ldr	r3, [sp, #8]
 800dcec:	429d      	cmp	r5, r3
 800dcee:	f43f af75 	beq.w	800dbdc <_dtoa_r+0x47c>
 800dcf2:	4b2f      	ldr	r3, [pc, #188]	; (800ddb0 <_dtoa_r+0x650>)
 800dcf4:	ec51 0b18 	vmov	r0, r1, d8
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	f7f2 fc8d 	bl	8000618 <__aeabi_dmul>
 800dcfe:	4b2c      	ldr	r3, [pc, #176]	; (800ddb0 <_dtoa_r+0x650>)
 800dd00:	ec41 0b18 	vmov	d8, r0, r1
 800dd04:	2200      	movs	r2, #0
 800dd06:	4630      	mov	r0, r6
 800dd08:	4639      	mov	r1, r7
 800dd0a:	f7f2 fc85 	bl	8000618 <__aeabi_dmul>
 800dd0e:	4606      	mov	r6, r0
 800dd10:	460f      	mov	r7, r1
 800dd12:	e7c4      	b.n	800dc9e <_dtoa_r+0x53e>
 800dd14:	ec51 0b17 	vmov	r0, r1, d7
 800dd18:	f7f2 fc7e 	bl	8000618 <__aeabi_dmul>
 800dd1c:	9b02      	ldr	r3, [sp, #8]
 800dd1e:	9d00      	ldr	r5, [sp, #0]
 800dd20:	930c      	str	r3, [sp, #48]	; 0x30
 800dd22:	ec41 0b18 	vmov	d8, r0, r1
 800dd26:	4639      	mov	r1, r7
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f7f2 ff25 	bl	8000b78 <__aeabi_d2iz>
 800dd2e:	9011      	str	r0, [sp, #68]	; 0x44
 800dd30:	f7f2 fc08 	bl	8000544 <__aeabi_i2d>
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	4630      	mov	r0, r6
 800dd3a:	4639      	mov	r1, r7
 800dd3c:	f7f2 fab4 	bl	80002a8 <__aeabi_dsub>
 800dd40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dd42:	3330      	adds	r3, #48	; 0x30
 800dd44:	f805 3b01 	strb.w	r3, [r5], #1
 800dd48:	9b02      	ldr	r3, [sp, #8]
 800dd4a:	429d      	cmp	r5, r3
 800dd4c:	4606      	mov	r6, r0
 800dd4e:	460f      	mov	r7, r1
 800dd50:	f04f 0200 	mov.w	r2, #0
 800dd54:	d134      	bne.n	800ddc0 <_dtoa_r+0x660>
 800dd56:	4b19      	ldr	r3, [pc, #100]	; (800ddbc <_dtoa_r+0x65c>)
 800dd58:	ec51 0b18 	vmov	r0, r1, d8
 800dd5c:	f7f2 faa6 	bl	80002ac <__adddf3>
 800dd60:	4602      	mov	r2, r0
 800dd62:	460b      	mov	r3, r1
 800dd64:	4630      	mov	r0, r6
 800dd66:	4639      	mov	r1, r7
 800dd68:	f7f2 fee6 	bl	8000b38 <__aeabi_dcmpgt>
 800dd6c:	2800      	cmp	r0, #0
 800dd6e:	d175      	bne.n	800de5c <_dtoa_r+0x6fc>
 800dd70:	ec53 2b18 	vmov	r2, r3, d8
 800dd74:	4911      	ldr	r1, [pc, #68]	; (800ddbc <_dtoa_r+0x65c>)
 800dd76:	2000      	movs	r0, #0
 800dd78:	f7f2 fa96 	bl	80002a8 <__aeabi_dsub>
 800dd7c:	4602      	mov	r2, r0
 800dd7e:	460b      	mov	r3, r1
 800dd80:	4630      	mov	r0, r6
 800dd82:	4639      	mov	r1, r7
 800dd84:	f7f2 feba 	bl	8000afc <__aeabi_dcmplt>
 800dd88:	2800      	cmp	r0, #0
 800dd8a:	f43f af27 	beq.w	800dbdc <_dtoa_r+0x47c>
 800dd8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd90:	1e6b      	subs	r3, r5, #1
 800dd92:	930c      	str	r3, [sp, #48]	; 0x30
 800dd94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd98:	2b30      	cmp	r3, #48	; 0x30
 800dd9a:	d0f8      	beq.n	800dd8e <_dtoa_r+0x62e>
 800dd9c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800dda0:	e04a      	b.n	800de38 <_dtoa_r+0x6d8>
 800dda2:	bf00      	nop
 800dda4:	08014ad8 	.word	0x08014ad8
 800dda8:	08014ab0 	.word	0x08014ab0
 800ddac:	3ff00000 	.word	0x3ff00000
 800ddb0:	40240000 	.word	0x40240000
 800ddb4:	401c0000 	.word	0x401c0000
 800ddb8:	40140000 	.word	0x40140000
 800ddbc:	3fe00000 	.word	0x3fe00000
 800ddc0:	4baf      	ldr	r3, [pc, #700]	; (800e080 <_dtoa_r+0x920>)
 800ddc2:	f7f2 fc29 	bl	8000618 <__aeabi_dmul>
 800ddc6:	4606      	mov	r6, r0
 800ddc8:	460f      	mov	r7, r1
 800ddca:	e7ac      	b.n	800dd26 <_dtoa_r+0x5c6>
 800ddcc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ddd0:	9d00      	ldr	r5, [sp, #0]
 800ddd2:	4642      	mov	r2, r8
 800ddd4:	464b      	mov	r3, r9
 800ddd6:	4630      	mov	r0, r6
 800ddd8:	4639      	mov	r1, r7
 800ddda:	f7f2 fd47 	bl	800086c <__aeabi_ddiv>
 800ddde:	f7f2 fecb 	bl	8000b78 <__aeabi_d2iz>
 800dde2:	9002      	str	r0, [sp, #8]
 800dde4:	f7f2 fbae 	bl	8000544 <__aeabi_i2d>
 800dde8:	4642      	mov	r2, r8
 800ddea:	464b      	mov	r3, r9
 800ddec:	f7f2 fc14 	bl	8000618 <__aeabi_dmul>
 800ddf0:	4602      	mov	r2, r0
 800ddf2:	460b      	mov	r3, r1
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	4639      	mov	r1, r7
 800ddf8:	f7f2 fa56 	bl	80002a8 <__aeabi_dsub>
 800ddfc:	9e02      	ldr	r6, [sp, #8]
 800ddfe:	9f01      	ldr	r7, [sp, #4]
 800de00:	3630      	adds	r6, #48	; 0x30
 800de02:	f805 6b01 	strb.w	r6, [r5], #1
 800de06:	9e00      	ldr	r6, [sp, #0]
 800de08:	1bae      	subs	r6, r5, r6
 800de0a:	42b7      	cmp	r7, r6
 800de0c:	4602      	mov	r2, r0
 800de0e:	460b      	mov	r3, r1
 800de10:	d137      	bne.n	800de82 <_dtoa_r+0x722>
 800de12:	f7f2 fa4b 	bl	80002ac <__adddf3>
 800de16:	4642      	mov	r2, r8
 800de18:	464b      	mov	r3, r9
 800de1a:	4606      	mov	r6, r0
 800de1c:	460f      	mov	r7, r1
 800de1e:	f7f2 fe8b 	bl	8000b38 <__aeabi_dcmpgt>
 800de22:	b9c8      	cbnz	r0, 800de58 <_dtoa_r+0x6f8>
 800de24:	4642      	mov	r2, r8
 800de26:	464b      	mov	r3, r9
 800de28:	4630      	mov	r0, r6
 800de2a:	4639      	mov	r1, r7
 800de2c:	f7f2 fe5c 	bl	8000ae8 <__aeabi_dcmpeq>
 800de30:	b110      	cbz	r0, 800de38 <_dtoa_r+0x6d8>
 800de32:	9b02      	ldr	r3, [sp, #8]
 800de34:	07d9      	lsls	r1, r3, #31
 800de36:	d40f      	bmi.n	800de58 <_dtoa_r+0x6f8>
 800de38:	4620      	mov	r0, r4
 800de3a:	4659      	mov	r1, fp
 800de3c:	f001 f876 	bl	800ef2c <_Bfree>
 800de40:	2300      	movs	r3, #0
 800de42:	702b      	strb	r3, [r5, #0]
 800de44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de46:	f10a 0001 	add.w	r0, sl, #1
 800de4a:	6018      	str	r0, [r3, #0]
 800de4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de4e:	2b00      	cmp	r3, #0
 800de50:	f43f acd8 	beq.w	800d804 <_dtoa_r+0xa4>
 800de54:	601d      	str	r5, [r3, #0]
 800de56:	e4d5      	b.n	800d804 <_dtoa_r+0xa4>
 800de58:	f8cd a01c 	str.w	sl, [sp, #28]
 800de5c:	462b      	mov	r3, r5
 800de5e:	461d      	mov	r5, r3
 800de60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800de64:	2a39      	cmp	r2, #57	; 0x39
 800de66:	d108      	bne.n	800de7a <_dtoa_r+0x71a>
 800de68:	9a00      	ldr	r2, [sp, #0]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d1f7      	bne.n	800de5e <_dtoa_r+0x6fe>
 800de6e:	9a07      	ldr	r2, [sp, #28]
 800de70:	9900      	ldr	r1, [sp, #0]
 800de72:	3201      	adds	r2, #1
 800de74:	9207      	str	r2, [sp, #28]
 800de76:	2230      	movs	r2, #48	; 0x30
 800de78:	700a      	strb	r2, [r1, #0]
 800de7a:	781a      	ldrb	r2, [r3, #0]
 800de7c:	3201      	adds	r2, #1
 800de7e:	701a      	strb	r2, [r3, #0]
 800de80:	e78c      	b.n	800dd9c <_dtoa_r+0x63c>
 800de82:	4b7f      	ldr	r3, [pc, #508]	; (800e080 <_dtoa_r+0x920>)
 800de84:	2200      	movs	r2, #0
 800de86:	f7f2 fbc7 	bl	8000618 <__aeabi_dmul>
 800de8a:	2200      	movs	r2, #0
 800de8c:	2300      	movs	r3, #0
 800de8e:	4606      	mov	r6, r0
 800de90:	460f      	mov	r7, r1
 800de92:	f7f2 fe29 	bl	8000ae8 <__aeabi_dcmpeq>
 800de96:	2800      	cmp	r0, #0
 800de98:	d09b      	beq.n	800ddd2 <_dtoa_r+0x672>
 800de9a:	e7cd      	b.n	800de38 <_dtoa_r+0x6d8>
 800de9c:	9a08      	ldr	r2, [sp, #32]
 800de9e:	2a00      	cmp	r2, #0
 800dea0:	f000 80c4 	beq.w	800e02c <_dtoa_r+0x8cc>
 800dea4:	9a05      	ldr	r2, [sp, #20]
 800dea6:	2a01      	cmp	r2, #1
 800dea8:	f300 80a8 	bgt.w	800dffc <_dtoa_r+0x89c>
 800deac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800deae:	2a00      	cmp	r2, #0
 800deb0:	f000 80a0 	beq.w	800dff4 <_dtoa_r+0x894>
 800deb4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800deb8:	9e06      	ldr	r6, [sp, #24]
 800deba:	4645      	mov	r5, r8
 800debc:	9a04      	ldr	r2, [sp, #16]
 800debe:	2101      	movs	r1, #1
 800dec0:	441a      	add	r2, r3
 800dec2:	4620      	mov	r0, r4
 800dec4:	4498      	add	r8, r3
 800dec6:	9204      	str	r2, [sp, #16]
 800dec8:	f001 f936 	bl	800f138 <__i2b>
 800decc:	4607      	mov	r7, r0
 800dece:	2d00      	cmp	r5, #0
 800ded0:	dd0b      	ble.n	800deea <_dtoa_r+0x78a>
 800ded2:	9b04      	ldr	r3, [sp, #16]
 800ded4:	2b00      	cmp	r3, #0
 800ded6:	dd08      	ble.n	800deea <_dtoa_r+0x78a>
 800ded8:	42ab      	cmp	r3, r5
 800deda:	9a04      	ldr	r2, [sp, #16]
 800dedc:	bfa8      	it	ge
 800dede:	462b      	movge	r3, r5
 800dee0:	eba8 0803 	sub.w	r8, r8, r3
 800dee4:	1aed      	subs	r5, r5, r3
 800dee6:	1ad3      	subs	r3, r2, r3
 800dee8:	9304      	str	r3, [sp, #16]
 800deea:	9b06      	ldr	r3, [sp, #24]
 800deec:	b1fb      	cbz	r3, 800df2e <_dtoa_r+0x7ce>
 800deee:	9b08      	ldr	r3, [sp, #32]
 800def0:	2b00      	cmp	r3, #0
 800def2:	f000 809f 	beq.w	800e034 <_dtoa_r+0x8d4>
 800def6:	2e00      	cmp	r6, #0
 800def8:	dd11      	ble.n	800df1e <_dtoa_r+0x7be>
 800defa:	4639      	mov	r1, r7
 800defc:	4632      	mov	r2, r6
 800defe:	4620      	mov	r0, r4
 800df00:	f001 f9d6 	bl	800f2b0 <__pow5mult>
 800df04:	465a      	mov	r2, fp
 800df06:	4601      	mov	r1, r0
 800df08:	4607      	mov	r7, r0
 800df0a:	4620      	mov	r0, r4
 800df0c:	f001 f92a 	bl	800f164 <__multiply>
 800df10:	4659      	mov	r1, fp
 800df12:	9007      	str	r0, [sp, #28]
 800df14:	4620      	mov	r0, r4
 800df16:	f001 f809 	bl	800ef2c <_Bfree>
 800df1a:	9b07      	ldr	r3, [sp, #28]
 800df1c:	469b      	mov	fp, r3
 800df1e:	9b06      	ldr	r3, [sp, #24]
 800df20:	1b9a      	subs	r2, r3, r6
 800df22:	d004      	beq.n	800df2e <_dtoa_r+0x7ce>
 800df24:	4659      	mov	r1, fp
 800df26:	4620      	mov	r0, r4
 800df28:	f001 f9c2 	bl	800f2b0 <__pow5mult>
 800df2c:	4683      	mov	fp, r0
 800df2e:	2101      	movs	r1, #1
 800df30:	4620      	mov	r0, r4
 800df32:	f001 f901 	bl	800f138 <__i2b>
 800df36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800df38:	2b00      	cmp	r3, #0
 800df3a:	4606      	mov	r6, r0
 800df3c:	dd7c      	ble.n	800e038 <_dtoa_r+0x8d8>
 800df3e:	461a      	mov	r2, r3
 800df40:	4601      	mov	r1, r0
 800df42:	4620      	mov	r0, r4
 800df44:	f001 f9b4 	bl	800f2b0 <__pow5mult>
 800df48:	9b05      	ldr	r3, [sp, #20]
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	4606      	mov	r6, r0
 800df4e:	dd76      	ble.n	800e03e <_dtoa_r+0x8de>
 800df50:	2300      	movs	r3, #0
 800df52:	9306      	str	r3, [sp, #24]
 800df54:	6933      	ldr	r3, [r6, #16]
 800df56:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800df5a:	6918      	ldr	r0, [r3, #16]
 800df5c:	f001 f89c 	bl	800f098 <__hi0bits>
 800df60:	f1c0 0020 	rsb	r0, r0, #32
 800df64:	9b04      	ldr	r3, [sp, #16]
 800df66:	4418      	add	r0, r3
 800df68:	f010 001f 	ands.w	r0, r0, #31
 800df6c:	f000 8086 	beq.w	800e07c <_dtoa_r+0x91c>
 800df70:	f1c0 0320 	rsb	r3, r0, #32
 800df74:	2b04      	cmp	r3, #4
 800df76:	dd7f      	ble.n	800e078 <_dtoa_r+0x918>
 800df78:	f1c0 001c 	rsb	r0, r0, #28
 800df7c:	9b04      	ldr	r3, [sp, #16]
 800df7e:	4403      	add	r3, r0
 800df80:	4480      	add	r8, r0
 800df82:	4405      	add	r5, r0
 800df84:	9304      	str	r3, [sp, #16]
 800df86:	f1b8 0f00 	cmp.w	r8, #0
 800df8a:	dd05      	ble.n	800df98 <_dtoa_r+0x838>
 800df8c:	4659      	mov	r1, fp
 800df8e:	4642      	mov	r2, r8
 800df90:	4620      	mov	r0, r4
 800df92:	f001 f9e7 	bl	800f364 <__lshift>
 800df96:	4683      	mov	fp, r0
 800df98:	9b04      	ldr	r3, [sp, #16]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	dd05      	ble.n	800dfaa <_dtoa_r+0x84a>
 800df9e:	4631      	mov	r1, r6
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	f001 f9de 	bl	800f364 <__lshift>
 800dfa8:	4606      	mov	r6, r0
 800dfaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d069      	beq.n	800e084 <_dtoa_r+0x924>
 800dfb0:	4631      	mov	r1, r6
 800dfb2:	4658      	mov	r0, fp
 800dfb4:	f001 fa42 	bl	800f43c <__mcmp>
 800dfb8:	2800      	cmp	r0, #0
 800dfba:	da63      	bge.n	800e084 <_dtoa_r+0x924>
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	4659      	mov	r1, fp
 800dfc0:	220a      	movs	r2, #10
 800dfc2:	4620      	mov	r0, r4
 800dfc4:	f000 ffd4 	bl	800ef70 <__multadd>
 800dfc8:	9b08      	ldr	r3, [sp, #32]
 800dfca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dfce:	4683      	mov	fp, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	f000 818f 	beq.w	800e2f4 <_dtoa_r+0xb94>
 800dfd6:	4639      	mov	r1, r7
 800dfd8:	2300      	movs	r3, #0
 800dfda:	220a      	movs	r2, #10
 800dfdc:	4620      	mov	r0, r4
 800dfde:	f000 ffc7 	bl	800ef70 <__multadd>
 800dfe2:	f1b9 0f00 	cmp.w	r9, #0
 800dfe6:	4607      	mov	r7, r0
 800dfe8:	f300 808e 	bgt.w	800e108 <_dtoa_r+0x9a8>
 800dfec:	9b05      	ldr	r3, [sp, #20]
 800dfee:	2b02      	cmp	r3, #2
 800dff0:	dc50      	bgt.n	800e094 <_dtoa_r+0x934>
 800dff2:	e089      	b.n	800e108 <_dtoa_r+0x9a8>
 800dff4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800dff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dffa:	e75d      	b.n	800deb8 <_dtoa_r+0x758>
 800dffc:	9b01      	ldr	r3, [sp, #4]
 800dffe:	1e5e      	subs	r6, r3, #1
 800e000:	9b06      	ldr	r3, [sp, #24]
 800e002:	42b3      	cmp	r3, r6
 800e004:	bfbf      	itttt	lt
 800e006:	9b06      	ldrlt	r3, [sp, #24]
 800e008:	9606      	strlt	r6, [sp, #24]
 800e00a:	1af2      	sublt	r2, r6, r3
 800e00c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800e00e:	bfb6      	itet	lt
 800e010:	189b      	addlt	r3, r3, r2
 800e012:	1b9e      	subge	r6, r3, r6
 800e014:	930d      	strlt	r3, [sp, #52]	; 0x34
 800e016:	9b01      	ldr	r3, [sp, #4]
 800e018:	bfb8      	it	lt
 800e01a:	2600      	movlt	r6, #0
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	bfb5      	itete	lt
 800e020:	eba8 0503 	sublt.w	r5, r8, r3
 800e024:	9b01      	ldrge	r3, [sp, #4]
 800e026:	2300      	movlt	r3, #0
 800e028:	4645      	movge	r5, r8
 800e02a:	e747      	b.n	800debc <_dtoa_r+0x75c>
 800e02c:	9e06      	ldr	r6, [sp, #24]
 800e02e:	9f08      	ldr	r7, [sp, #32]
 800e030:	4645      	mov	r5, r8
 800e032:	e74c      	b.n	800dece <_dtoa_r+0x76e>
 800e034:	9a06      	ldr	r2, [sp, #24]
 800e036:	e775      	b.n	800df24 <_dtoa_r+0x7c4>
 800e038:	9b05      	ldr	r3, [sp, #20]
 800e03a:	2b01      	cmp	r3, #1
 800e03c:	dc18      	bgt.n	800e070 <_dtoa_r+0x910>
 800e03e:	9b02      	ldr	r3, [sp, #8]
 800e040:	b9b3      	cbnz	r3, 800e070 <_dtoa_r+0x910>
 800e042:	9b03      	ldr	r3, [sp, #12]
 800e044:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e048:	b9a3      	cbnz	r3, 800e074 <_dtoa_r+0x914>
 800e04a:	9b03      	ldr	r3, [sp, #12]
 800e04c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e050:	0d1b      	lsrs	r3, r3, #20
 800e052:	051b      	lsls	r3, r3, #20
 800e054:	b12b      	cbz	r3, 800e062 <_dtoa_r+0x902>
 800e056:	9b04      	ldr	r3, [sp, #16]
 800e058:	3301      	adds	r3, #1
 800e05a:	9304      	str	r3, [sp, #16]
 800e05c:	f108 0801 	add.w	r8, r8, #1
 800e060:	2301      	movs	r3, #1
 800e062:	9306      	str	r3, [sp, #24]
 800e064:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e066:	2b00      	cmp	r3, #0
 800e068:	f47f af74 	bne.w	800df54 <_dtoa_r+0x7f4>
 800e06c:	2001      	movs	r0, #1
 800e06e:	e779      	b.n	800df64 <_dtoa_r+0x804>
 800e070:	2300      	movs	r3, #0
 800e072:	e7f6      	b.n	800e062 <_dtoa_r+0x902>
 800e074:	9b02      	ldr	r3, [sp, #8]
 800e076:	e7f4      	b.n	800e062 <_dtoa_r+0x902>
 800e078:	d085      	beq.n	800df86 <_dtoa_r+0x826>
 800e07a:	4618      	mov	r0, r3
 800e07c:	301c      	adds	r0, #28
 800e07e:	e77d      	b.n	800df7c <_dtoa_r+0x81c>
 800e080:	40240000 	.word	0x40240000
 800e084:	9b01      	ldr	r3, [sp, #4]
 800e086:	2b00      	cmp	r3, #0
 800e088:	dc38      	bgt.n	800e0fc <_dtoa_r+0x99c>
 800e08a:	9b05      	ldr	r3, [sp, #20]
 800e08c:	2b02      	cmp	r3, #2
 800e08e:	dd35      	ble.n	800e0fc <_dtoa_r+0x99c>
 800e090:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e094:	f1b9 0f00 	cmp.w	r9, #0
 800e098:	d10d      	bne.n	800e0b6 <_dtoa_r+0x956>
 800e09a:	4631      	mov	r1, r6
 800e09c:	464b      	mov	r3, r9
 800e09e:	2205      	movs	r2, #5
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f000 ff65 	bl	800ef70 <__multadd>
 800e0a6:	4601      	mov	r1, r0
 800e0a8:	4606      	mov	r6, r0
 800e0aa:	4658      	mov	r0, fp
 800e0ac:	f001 f9c6 	bl	800f43c <__mcmp>
 800e0b0:	2800      	cmp	r0, #0
 800e0b2:	f73f adbd 	bgt.w	800dc30 <_dtoa_r+0x4d0>
 800e0b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0b8:	9d00      	ldr	r5, [sp, #0]
 800e0ba:	ea6f 0a03 	mvn.w	sl, r3
 800e0be:	f04f 0800 	mov.w	r8, #0
 800e0c2:	4631      	mov	r1, r6
 800e0c4:	4620      	mov	r0, r4
 800e0c6:	f000 ff31 	bl	800ef2c <_Bfree>
 800e0ca:	2f00      	cmp	r7, #0
 800e0cc:	f43f aeb4 	beq.w	800de38 <_dtoa_r+0x6d8>
 800e0d0:	f1b8 0f00 	cmp.w	r8, #0
 800e0d4:	d005      	beq.n	800e0e2 <_dtoa_r+0x982>
 800e0d6:	45b8      	cmp	r8, r7
 800e0d8:	d003      	beq.n	800e0e2 <_dtoa_r+0x982>
 800e0da:	4641      	mov	r1, r8
 800e0dc:	4620      	mov	r0, r4
 800e0de:	f000 ff25 	bl	800ef2c <_Bfree>
 800e0e2:	4639      	mov	r1, r7
 800e0e4:	4620      	mov	r0, r4
 800e0e6:	f000 ff21 	bl	800ef2c <_Bfree>
 800e0ea:	e6a5      	b.n	800de38 <_dtoa_r+0x6d8>
 800e0ec:	2600      	movs	r6, #0
 800e0ee:	4637      	mov	r7, r6
 800e0f0:	e7e1      	b.n	800e0b6 <_dtoa_r+0x956>
 800e0f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e0f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800e0f8:	4637      	mov	r7, r6
 800e0fa:	e599      	b.n	800dc30 <_dtoa_r+0x4d0>
 800e0fc:	9b08      	ldr	r3, [sp, #32]
 800e0fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	f000 80fd 	beq.w	800e302 <_dtoa_r+0xba2>
 800e108:	2d00      	cmp	r5, #0
 800e10a:	dd05      	ble.n	800e118 <_dtoa_r+0x9b8>
 800e10c:	4639      	mov	r1, r7
 800e10e:	462a      	mov	r2, r5
 800e110:	4620      	mov	r0, r4
 800e112:	f001 f927 	bl	800f364 <__lshift>
 800e116:	4607      	mov	r7, r0
 800e118:	9b06      	ldr	r3, [sp, #24]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d05c      	beq.n	800e1d8 <_dtoa_r+0xa78>
 800e11e:	6879      	ldr	r1, [r7, #4]
 800e120:	4620      	mov	r0, r4
 800e122:	f000 fec3 	bl	800eeac <_Balloc>
 800e126:	4605      	mov	r5, r0
 800e128:	b928      	cbnz	r0, 800e136 <_dtoa_r+0x9d6>
 800e12a:	4b80      	ldr	r3, [pc, #512]	; (800e32c <_dtoa_r+0xbcc>)
 800e12c:	4602      	mov	r2, r0
 800e12e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e132:	f7ff bb2e 	b.w	800d792 <_dtoa_r+0x32>
 800e136:	693a      	ldr	r2, [r7, #16]
 800e138:	3202      	adds	r2, #2
 800e13a:	0092      	lsls	r2, r2, #2
 800e13c:	f107 010c 	add.w	r1, r7, #12
 800e140:	300c      	adds	r0, #12
 800e142:	f000 fea5 	bl	800ee90 <memcpy>
 800e146:	2201      	movs	r2, #1
 800e148:	4629      	mov	r1, r5
 800e14a:	4620      	mov	r0, r4
 800e14c:	f001 f90a 	bl	800f364 <__lshift>
 800e150:	9b00      	ldr	r3, [sp, #0]
 800e152:	3301      	adds	r3, #1
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	9b00      	ldr	r3, [sp, #0]
 800e158:	444b      	add	r3, r9
 800e15a:	9307      	str	r3, [sp, #28]
 800e15c:	9b02      	ldr	r3, [sp, #8]
 800e15e:	f003 0301 	and.w	r3, r3, #1
 800e162:	46b8      	mov	r8, r7
 800e164:	9306      	str	r3, [sp, #24]
 800e166:	4607      	mov	r7, r0
 800e168:	9b01      	ldr	r3, [sp, #4]
 800e16a:	4631      	mov	r1, r6
 800e16c:	3b01      	subs	r3, #1
 800e16e:	4658      	mov	r0, fp
 800e170:	9302      	str	r3, [sp, #8]
 800e172:	f7ff fa67 	bl	800d644 <quorem>
 800e176:	4603      	mov	r3, r0
 800e178:	3330      	adds	r3, #48	; 0x30
 800e17a:	9004      	str	r0, [sp, #16]
 800e17c:	4641      	mov	r1, r8
 800e17e:	4658      	mov	r0, fp
 800e180:	9308      	str	r3, [sp, #32]
 800e182:	f001 f95b 	bl	800f43c <__mcmp>
 800e186:	463a      	mov	r2, r7
 800e188:	4681      	mov	r9, r0
 800e18a:	4631      	mov	r1, r6
 800e18c:	4620      	mov	r0, r4
 800e18e:	f001 f971 	bl	800f474 <__mdiff>
 800e192:	68c2      	ldr	r2, [r0, #12]
 800e194:	9b08      	ldr	r3, [sp, #32]
 800e196:	4605      	mov	r5, r0
 800e198:	bb02      	cbnz	r2, 800e1dc <_dtoa_r+0xa7c>
 800e19a:	4601      	mov	r1, r0
 800e19c:	4658      	mov	r0, fp
 800e19e:	f001 f94d 	bl	800f43c <__mcmp>
 800e1a2:	9b08      	ldr	r3, [sp, #32]
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	4629      	mov	r1, r5
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e1ae:	f000 febd 	bl	800ef2c <_Bfree>
 800e1b2:	9b05      	ldr	r3, [sp, #20]
 800e1b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e1b6:	9d01      	ldr	r5, [sp, #4]
 800e1b8:	ea43 0102 	orr.w	r1, r3, r2
 800e1bc:	9b06      	ldr	r3, [sp, #24]
 800e1be:	430b      	orrs	r3, r1
 800e1c0:	9b08      	ldr	r3, [sp, #32]
 800e1c2:	d10d      	bne.n	800e1e0 <_dtoa_r+0xa80>
 800e1c4:	2b39      	cmp	r3, #57	; 0x39
 800e1c6:	d029      	beq.n	800e21c <_dtoa_r+0xabc>
 800e1c8:	f1b9 0f00 	cmp.w	r9, #0
 800e1cc:	dd01      	ble.n	800e1d2 <_dtoa_r+0xa72>
 800e1ce:	9b04      	ldr	r3, [sp, #16]
 800e1d0:	3331      	adds	r3, #49	; 0x31
 800e1d2:	9a02      	ldr	r2, [sp, #8]
 800e1d4:	7013      	strb	r3, [r2, #0]
 800e1d6:	e774      	b.n	800e0c2 <_dtoa_r+0x962>
 800e1d8:	4638      	mov	r0, r7
 800e1da:	e7b9      	b.n	800e150 <_dtoa_r+0x9f0>
 800e1dc:	2201      	movs	r2, #1
 800e1de:	e7e2      	b.n	800e1a6 <_dtoa_r+0xa46>
 800e1e0:	f1b9 0f00 	cmp.w	r9, #0
 800e1e4:	db06      	blt.n	800e1f4 <_dtoa_r+0xa94>
 800e1e6:	9905      	ldr	r1, [sp, #20]
 800e1e8:	ea41 0909 	orr.w	r9, r1, r9
 800e1ec:	9906      	ldr	r1, [sp, #24]
 800e1ee:	ea59 0101 	orrs.w	r1, r9, r1
 800e1f2:	d120      	bne.n	800e236 <_dtoa_r+0xad6>
 800e1f4:	2a00      	cmp	r2, #0
 800e1f6:	ddec      	ble.n	800e1d2 <_dtoa_r+0xa72>
 800e1f8:	4659      	mov	r1, fp
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	9301      	str	r3, [sp, #4]
 800e200:	f001 f8b0 	bl	800f364 <__lshift>
 800e204:	4631      	mov	r1, r6
 800e206:	4683      	mov	fp, r0
 800e208:	f001 f918 	bl	800f43c <__mcmp>
 800e20c:	2800      	cmp	r0, #0
 800e20e:	9b01      	ldr	r3, [sp, #4]
 800e210:	dc02      	bgt.n	800e218 <_dtoa_r+0xab8>
 800e212:	d1de      	bne.n	800e1d2 <_dtoa_r+0xa72>
 800e214:	07da      	lsls	r2, r3, #31
 800e216:	d5dc      	bpl.n	800e1d2 <_dtoa_r+0xa72>
 800e218:	2b39      	cmp	r3, #57	; 0x39
 800e21a:	d1d8      	bne.n	800e1ce <_dtoa_r+0xa6e>
 800e21c:	9a02      	ldr	r2, [sp, #8]
 800e21e:	2339      	movs	r3, #57	; 0x39
 800e220:	7013      	strb	r3, [r2, #0]
 800e222:	462b      	mov	r3, r5
 800e224:	461d      	mov	r5, r3
 800e226:	3b01      	subs	r3, #1
 800e228:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e22c:	2a39      	cmp	r2, #57	; 0x39
 800e22e:	d050      	beq.n	800e2d2 <_dtoa_r+0xb72>
 800e230:	3201      	adds	r2, #1
 800e232:	701a      	strb	r2, [r3, #0]
 800e234:	e745      	b.n	800e0c2 <_dtoa_r+0x962>
 800e236:	2a00      	cmp	r2, #0
 800e238:	dd03      	ble.n	800e242 <_dtoa_r+0xae2>
 800e23a:	2b39      	cmp	r3, #57	; 0x39
 800e23c:	d0ee      	beq.n	800e21c <_dtoa_r+0xabc>
 800e23e:	3301      	adds	r3, #1
 800e240:	e7c7      	b.n	800e1d2 <_dtoa_r+0xa72>
 800e242:	9a01      	ldr	r2, [sp, #4]
 800e244:	9907      	ldr	r1, [sp, #28]
 800e246:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e24a:	428a      	cmp	r2, r1
 800e24c:	d02a      	beq.n	800e2a4 <_dtoa_r+0xb44>
 800e24e:	4659      	mov	r1, fp
 800e250:	2300      	movs	r3, #0
 800e252:	220a      	movs	r2, #10
 800e254:	4620      	mov	r0, r4
 800e256:	f000 fe8b 	bl	800ef70 <__multadd>
 800e25a:	45b8      	cmp	r8, r7
 800e25c:	4683      	mov	fp, r0
 800e25e:	f04f 0300 	mov.w	r3, #0
 800e262:	f04f 020a 	mov.w	r2, #10
 800e266:	4641      	mov	r1, r8
 800e268:	4620      	mov	r0, r4
 800e26a:	d107      	bne.n	800e27c <_dtoa_r+0xb1c>
 800e26c:	f000 fe80 	bl	800ef70 <__multadd>
 800e270:	4680      	mov	r8, r0
 800e272:	4607      	mov	r7, r0
 800e274:	9b01      	ldr	r3, [sp, #4]
 800e276:	3301      	adds	r3, #1
 800e278:	9301      	str	r3, [sp, #4]
 800e27a:	e775      	b.n	800e168 <_dtoa_r+0xa08>
 800e27c:	f000 fe78 	bl	800ef70 <__multadd>
 800e280:	4639      	mov	r1, r7
 800e282:	4680      	mov	r8, r0
 800e284:	2300      	movs	r3, #0
 800e286:	220a      	movs	r2, #10
 800e288:	4620      	mov	r0, r4
 800e28a:	f000 fe71 	bl	800ef70 <__multadd>
 800e28e:	4607      	mov	r7, r0
 800e290:	e7f0      	b.n	800e274 <_dtoa_r+0xb14>
 800e292:	f1b9 0f00 	cmp.w	r9, #0
 800e296:	9a00      	ldr	r2, [sp, #0]
 800e298:	bfcc      	ite	gt
 800e29a:	464d      	movgt	r5, r9
 800e29c:	2501      	movle	r5, #1
 800e29e:	4415      	add	r5, r2
 800e2a0:	f04f 0800 	mov.w	r8, #0
 800e2a4:	4659      	mov	r1, fp
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	4620      	mov	r0, r4
 800e2aa:	9301      	str	r3, [sp, #4]
 800e2ac:	f001 f85a 	bl	800f364 <__lshift>
 800e2b0:	4631      	mov	r1, r6
 800e2b2:	4683      	mov	fp, r0
 800e2b4:	f001 f8c2 	bl	800f43c <__mcmp>
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	dcb2      	bgt.n	800e222 <_dtoa_r+0xac2>
 800e2bc:	d102      	bne.n	800e2c4 <_dtoa_r+0xb64>
 800e2be:	9b01      	ldr	r3, [sp, #4]
 800e2c0:	07db      	lsls	r3, r3, #31
 800e2c2:	d4ae      	bmi.n	800e222 <_dtoa_r+0xac2>
 800e2c4:	462b      	mov	r3, r5
 800e2c6:	461d      	mov	r5, r3
 800e2c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2cc:	2a30      	cmp	r2, #48	; 0x30
 800e2ce:	d0fa      	beq.n	800e2c6 <_dtoa_r+0xb66>
 800e2d0:	e6f7      	b.n	800e0c2 <_dtoa_r+0x962>
 800e2d2:	9a00      	ldr	r2, [sp, #0]
 800e2d4:	429a      	cmp	r2, r3
 800e2d6:	d1a5      	bne.n	800e224 <_dtoa_r+0xac4>
 800e2d8:	f10a 0a01 	add.w	sl, sl, #1
 800e2dc:	2331      	movs	r3, #49	; 0x31
 800e2de:	e779      	b.n	800e1d4 <_dtoa_r+0xa74>
 800e2e0:	4b13      	ldr	r3, [pc, #76]	; (800e330 <_dtoa_r+0xbd0>)
 800e2e2:	f7ff baaf 	b.w	800d844 <_dtoa_r+0xe4>
 800e2e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	f47f aa86 	bne.w	800d7fa <_dtoa_r+0x9a>
 800e2ee:	4b11      	ldr	r3, [pc, #68]	; (800e334 <_dtoa_r+0xbd4>)
 800e2f0:	f7ff baa8 	b.w	800d844 <_dtoa_r+0xe4>
 800e2f4:	f1b9 0f00 	cmp.w	r9, #0
 800e2f8:	dc03      	bgt.n	800e302 <_dtoa_r+0xba2>
 800e2fa:	9b05      	ldr	r3, [sp, #20]
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	f73f aec9 	bgt.w	800e094 <_dtoa_r+0x934>
 800e302:	9d00      	ldr	r5, [sp, #0]
 800e304:	4631      	mov	r1, r6
 800e306:	4658      	mov	r0, fp
 800e308:	f7ff f99c 	bl	800d644 <quorem>
 800e30c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e310:	f805 3b01 	strb.w	r3, [r5], #1
 800e314:	9a00      	ldr	r2, [sp, #0]
 800e316:	1aaa      	subs	r2, r5, r2
 800e318:	4591      	cmp	r9, r2
 800e31a:	ddba      	ble.n	800e292 <_dtoa_r+0xb32>
 800e31c:	4659      	mov	r1, fp
 800e31e:	2300      	movs	r3, #0
 800e320:	220a      	movs	r2, #10
 800e322:	4620      	mov	r0, r4
 800e324:	f000 fe24 	bl	800ef70 <__multadd>
 800e328:	4683      	mov	fp, r0
 800e32a:	e7eb      	b.n	800e304 <_dtoa_r+0xba4>
 800e32c:	0801495c 	.word	0x0801495c
 800e330:	08014758 	.word	0x08014758
 800e334:	080148d9 	.word	0x080148d9

0800e338 <__sflush_r>:
 800e338:	898a      	ldrh	r2, [r1, #12]
 800e33a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e33e:	4605      	mov	r5, r0
 800e340:	0710      	lsls	r0, r2, #28
 800e342:	460c      	mov	r4, r1
 800e344:	d458      	bmi.n	800e3f8 <__sflush_r+0xc0>
 800e346:	684b      	ldr	r3, [r1, #4]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	dc05      	bgt.n	800e358 <__sflush_r+0x20>
 800e34c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e34e:	2b00      	cmp	r3, #0
 800e350:	dc02      	bgt.n	800e358 <__sflush_r+0x20>
 800e352:	2000      	movs	r0, #0
 800e354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e358:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e35a:	2e00      	cmp	r6, #0
 800e35c:	d0f9      	beq.n	800e352 <__sflush_r+0x1a>
 800e35e:	2300      	movs	r3, #0
 800e360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e364:	682f      	ldr	r7, [r5, #0]
 800e366:	602b      	str	r3, [r5, #0]
 800e368:	d032      	beq.n	800e3d0 <__sflush_r+0x98>
 800e36a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e36c:	89a3      	ldrh	r3, [r4, #12]
 800e36e:	075a      	lsls	r2, r3, #29
 800e370:	d505      	bpl.n	800e37e <__sflush_r+0x46>
 800e372:	6863      	ldr	r3, [r4, #4]
 800e374:	1ac0      	subs	r0, r0, r3
 800e376:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e378:	b10b      	cbz	r3, 800e37e <__sflush_r+0x46>
 800e37a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e37c:	1ac0      	subs	r0, r0, r3
 800e37e:	2300      	movs	r3, #0
 800e380:	4602      	mov	r2, r0
 800e382:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e384:	6a21      	ldr	r1, [r4, #32]
 800e386:	4628      	mov	r0, r5
 800e388:	47b0      	blx	r6
 800e38a:	1c43      	adds	r3, r0, #1
 800e38c:	89a3      	ldrh	r3, [r4, #12]
 800e38e:	d106      	bne.n	800e39e <__sflush_r+0x66>
 800e390:	6829      	ldr	r1, [r5, #0]
 800e392:	291d      	cmp	r1, #29
 800e394:	d82c      	bhi.n	800e3f0 <__sflush_r+0xb8>
 800e396:	4a2a      	ldr	r2, [pc, #168]	; (800e440 <__sflush_r+0x108>)
 800e398:	40ca      	lsrs	r2, r1
 800e39a:	07d6      	lsls	r6, r2, #31
 800e39c:	d528      	bpl.n	800e3f0 <__sflush_r+0xb8>
 800e39e:	2200      	movs	r2, #0
 800e3a0:	6062      	str	r2, [r4, #4]
 800e3a2:	04d9      	lsls	r1, r3, #19
 800e3a4:	6922      	ldr	r2, [r4, #16]
 800e3a6:	6022      	str	r2, [r4, #0]
 800e3a8:	d504      	bpl.n	800e3b4 <__sflush_r+0x7c>
 800e3aa:	1c42      	adds	r2, r0, #1
 800e3ac:	d101      	bne.n	800e3b2 <__sflush_r+0x7a>
 800e3ae:	682b      	ldr	r3, [r5, #0]
 800e3b0:	b903      	cbnz	r3, 800e3b4 <__sflush_r+0x7c>
 800e3b2:	6560      	str	r0, [r4, #84]	; 0x54
 800e3b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3b6:	602f      	str	r7, [r5, #0]
 800e3b8:	2900      	cmp	r1, #0
 800e3ba:	d0ca      	beq.n	800e352 <__sflush_r+0x1a>
 800e3bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3c0:	4299      	cmp	r1, r3
 800e3c2:	d002      	beq.n	800e3ca <__sflush_r+0x92>
 800e3c4:	4628      	mov	r0, r5
 800e3c6:	f001 fa3b 	bl	800f840 <_free_r>
 800e3ca:	2000      	movs	r0, #0
 800e3cc:	6360      	str	r0, [r4, #52]	; 0x34
 800e3ce:	e7c1      	b.n	800e354 <__sflush_r+0x1c>
 800e3d0:	6a21      	ldr	r1, [r4, #32]
 800e3d2:	2301      	movs	r3, #1
 800e3d4:	4628      	mov	r0, r5
 800e3d6:	47b0      	blx	r6
 800e3d8:	1c41      	adds	r1, r0, #1
 800e3da:	d1c7      	bne.n	800e36c <__sflush_r+0x34>
 800e3dc:	682b      	ldr	r3, [r5, #0]
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d0c4      	beq.n	800e36c <__sflush_r+0x34>
 800e3e2:	2b1d      	cmp	r3, #29
 800e3e4:	d001      	beq.n	800e3ea <__sflush_r+0xb2>
 800e3e6:	2b16      	cmp	r3, #22
 800e3e8:	d101      	bne.n	800e3ee <__sflush_r+0xb6>
 800e3ea:	602f      	str	r7, [r5, #0]
 800e3ec:	e7b1      	b.n	800e352 <__sflush_r+0x1a>
 800e3ee:	89a3      	ldrh	r3, [r4, #12]
 800e3f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3f4:	81a3      	strh	r3, [r4, #12]
 800e3f6:	e7ad      	b.n	800e354 <__sflush_r+0x1c>
 800e3f8:	690f      	ldr	r7, [r1, #16]
 800e3fa:	2f00      	cmp	r7, #0
 800e3fc:	d0a9      	beq.n	800e352 <__sflush_r+0x1a>
 800e3fe:	0793      	lsls	r3, r2, #30
 800e400:	680e      	ldr	r6, [r1, #0]
 800e402:	bf08      	it	eq
 800e404:	694b      	ldreq	r3, [r1, #20]
 800e406:	600f      	str	r7, [r1, #0]
 800e408:	bf18      	it	ne
 800e40a:	2300      	movne	r3, #0
 800e40c:	eba6 0807 	sub.w	r8, r6, r7
 800e410:	608b      	str	r3, [r1, #8]
 800e412:	f1b8 0f00 	cmp.w	r8, #0
 800e416:	dd9c      	ble.n	800e352 <__sflush_r+0x1a>
 800e418:	6a21      	ldr	r1, [r4, #32]
 800e41a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e41c:	4643      	mov	r3, r8
 800e41e:	463a      	mov	r2, r7
 800e420:	4628      	mov	r0, r5
 800e422:	47b0      	blx	r6
 800e424:	2800      	cmp	r0, #0
 800e426:	dc06      	bgt.n	800e436 <__sflush_r+0xfe>
 800e428:	89a3      	ldrh	r3, [r4, #12]
 800e42a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e42e:	81a3      	strh	r3, [r4, #12]
 800e430:	f04f 30ff 	mov.w	r0, #4294967295
 800e434:	e78e      	b.n	800e354 <__sflush_r+0x1c>
 800e436:	4407      	add	r7, r0
 800e438:	eba8 0800 	sub.w	r8, r8, r0
 800e43c:	e7e9      	b.n	800e412 <__sflush_r+0xda>
 800e43e:	bf00      	nop
 800e440:	20400001 	.word	0x20400001

0800e444 <_fflush_r>:
 800e444:	b538      	push	{r3, r4, r5, lr}
 800e446:	690b      	ldr	r3, [r1, #16]
 800e448:	4605      	mov	r5, r0
 800e44a:	460c      	mov	r4, r1
 800e44c:	b913      	cbnz	r3, 800e454 <_fflush_r+0x10>
 800e44e:	2500      	movs	r5, #0
 800e450:	4628      	mov	r0, r5
 800e452:	bd38      	pop	{r3, r4, r5, pc}
 800e454:	b118      	cbz	r0, 800e45e <_fflush_r+0x1a>
 800e456:	6983      	ldr	r3, [r0, #24]
 800e458:	b90b      	cbnz	r3, 800e45e <_fflush_r+0x1a>
 800e45a:	f000 f887 	bl	800e56c <__sinit>
 800e45e:	4b14      	ldr	r3, [pc, #80]	; (800e4b0 <_fflush_r+0x6c>)
 800e460:	429c      	cmp	r4, r3
 800e462:	d11b      	bne.n	800e49c <_fflush_r+0x58>
 800e464:	686c      	ldr	r4, [r5, #4]
 800e466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d0ef      	beq.n	800e44e <_fflush_r+0xa>
 800e46e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e470:	07d0      	lsls	r0, r2, #31
 800e472:	d404      	bmi.n	800e47e <_fflush_r+0x3a>
 800e474:	0599      	lsls	r1, r3, #22
 800e476:	d402      	bmi.n	800e47e <_fflush_r+0x3a>
 800e478:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e47a:	f000 fc88 	bl	800ed8e <__retarget_lock_acquire_recursive>
 800e47e:	4628      	mov	r0, r5
 800e480:	4621      	mov	r1, r4
 800e482:	f7ff ff59 	bl	800e338 <__sflush_r>
 800e486:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e488:	07da      	lsls	r2, r3, #31
 800e48a:	4605      	mov	r5, r0
 800e48c:	d4e0      	bmi.n	800e450 <_fflush_r+0xc>
 800e48e:	89a3      	ldrh	r3, [r4, #12]
 800e490:	059b      	lsls	r3, r3, #22
 800e492:	d4dd      	bmi.n	800e450 <_fflush_r+0xc>
 800e494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e496:	f000 fc7b 	bl	800ed90 <__retarget_lock_release_recursive>
 800e49a:	e7d9      	b.n	800e450 <_fflush_r+0xc>
 800e49c:	4b05      	ldr	r3, [pc, #20]	; (800e4b4 <_fflush_r+0x70>)
 800e49e:	429c      	cmp	r4, r3
 800e4a0:	d101      	bne.n	800e4a6 <_fflush_r+0x62>
 800e4a2:	68ac      	ldr	r4, [r5, #8]
 800e4a4:	e7df      	b.n	800e466 <_fflush_r+0x22>
 800e4a6:	4b04      	ldr	r3, [pc, #16]	; (800e4b8 <_fflush_r+0x74>)
 800e4a8:	429c      	cmp	r4, r3
 800e4aa:	bf08      	it	eq
 800e4ac:	68ec      	ldreq	r4, [r5, #12]
 800e4ae:	e7da      	b.n	800e466 <_fflush_r+0x22>
 800e4b0:	08014990 	.word	0x08014990
 800e4b4:	080149b0 	.word	0x080149b0
 800e4b8:	08014970 	.word	0x08014970

0800e4bc <std>:
 800e4bc:	2300      	movs	r3, #0
 800e4be:	b510      	push	{r4, lr}
 800e4c0:	4604      	mov	r4, r0
 800e4c2:	e9c0 3300 	strd	r3, r3, [r0]
 800e4c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e4ca:	6083      	str	r3, [r0, #8]
 800e4cc:	8181      	strh	r1, [r0, #12]
 800e4ce:	6643      	str	r3, [r0, #100]	; 0x64
 800e4d0:	81c2      	strh	r2, [r0, #14]
 800e4d2:	6183      	str	r3, [r0, #24]
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	2208      	movs	r2, #8
 800e4d8:	305c      	adds	r0, #92	; 0x5c
 800e4da:	f7fd f9e9 	bl	800b8b0 <memset>
 800e4de:	4b05      	ldr	r3, [pc, #20]	; (800e4f4 <std+0x38>)
 800e4e0:	6263      	str	r3, [r4, #36]	; 0x24
 800e4e2:	4b05      	ldr	r3, [pc, #20]	; (800e4f8 <std+0x3c>)
 800e4e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800e4e6:	4b05      	ldr	r3, [pc, #20]	; (800e4fc <std+0x40>)
 800e4e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e4ea:	4b05      	ldr	r3, [pc, #20]	; (800e500 <std+0x44>)
 800e4ec:	6224      	str	r4, [r4, #32]
 800e4ee:	6323      	str	r3, [r4, #48]	; 0x30
 800e4f0:	bd10      	pop	{r4, pc}
 800e4f2:	bf00      	nop
 800e4f4:	0800ff31 	.word	0x0800ff31
 800e4f8:	0800ff53 	.word	0x0800ff53
 800e4fc:	0800ff8b 	.word	0x0800ff8b
 800e500:	0800ffaf 	.word	0x0800ffaf

0800e504 <_cleanup_r>:
 800e504:	4901      	ldr	r1, [pc, #4]	; (800e50c <_cleanup_r+0x8>)
 800e506:	f000 b8af 	b.w	800e668 <_fwalk_reent>
 800e50a:	bf00      	nop
 800e50c:	0800e445 	.word	0x0800e445

0800e510 <__sfmoreglue>:
 800e510:	b570      	push	{r4, r5, r6, lr}
 800e512:	1e4a      	subs	r2, r1, #1
 800e514:	2568      	movs	r5, #104	; 0x68
 800e516:	4355      	muls	r5, r2
 800e518:	460e      	mov	r6, r1
 800e51a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e51e:	f001 f9df 	bl	800f8e0 <_malloc_r>
 800e522:	4604      	mov	r4, r0
 800e524:	b140      	cbz	r0, 800e538 <__sfmoreglue+0x28>
 800e526:	2100      	movs	r1, #0
 800e528:	e9c0 1600 	strd	r1, r6, [r0]
 800e52c:	300c      	adds	r0, #12
 800e52e:	60a0      	str	r0, [r4, #8]
 800e530:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e534:	f7fd f9bc 	bl	800b8b0 <memset>
 800e538:	4620      	mov	r0, r4
 800e53a:	bd70      	pop	{r4, r5, r6, pc}

0800e53c <__sfp_lock_acquire>:
 800e53c:	4801      	ldr	r0, [pc, #4]	; (800e544 <__sfp_lock_acquire+0x8>)
 800e53e:	f000 bc26 	b.w	800ed8e <__retarget_lock_acquire_recursive>
 800e542:	bf00      	nop
 800e544:	20000b62 	.word	0x20000b62

0800e548 <__sfp_lock_release>:
 800e548:	4801      	ldr	r0, [pc, #4]	; (800e550 <__sfp_lock_release+0x8>)
 800e54a:	f000 bc21 	b.w	800ed90 <__retarget_lock_release_recursive>
 800e54e:	bf00      	nop
 800e550:	20000b62 	.word	0x20000b62

0800e554 <__sinit_lock_acquire>:
 800e554:	4801      	ldr	r0, [pc, #4]	; (800e55c <__sinit_lock_acquire+0x8>)
 800e556:	f000 bc1a 	b.w	800ed8e <__retarget_lock_acquire_recursive>
 800e55a:	bf00      	nop
 800e55c:	20000b5d 	.word	0x20000b5d

0800e560 <__sinit_lock_release>:
 800e560:	4801      	ldr	r0, [pc, #4]	; (800e568 <__sinit_lock_release+0x8>)
 800e562:	f000 bc15 	b.w	800ed90 <__retarget_lock_release_recursive>
 800e566:	bf00      	nop
 800e568:	20000b5d 	.word	0x20000b5d

0800e56c <__sinit>:
 800e56c:	b510      	push	{r4, lr}
 800e56e:	4604      	mov	r4, r0
 800e570:	f7ff fff0 	bl	800e554 <__sinit_lock_acquire>
 800e574:	69a3      	ldr	r3, [r4, #24]
 800e576:	b11b      	cbz	r3, 800e580 <__sinit+0x14>
 800e578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e57c:	f7ff bff0 	b.w	800e560 <__sinit_lock_release>
 800e580:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e584:	6523      	str	r3, [r4, #80]	; 0x50
 800e586:	4b13      	ldr	r3, [pc, #76]	; (800e5d4 <__sinit+0x68>)
 800e588:	4a13      	ldr	r2, [pc, #76]	; (800e5d8 <__sinit+0x6c>)
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	62a2      	str	r2, [r4, #40]	; 0x28
 800e58e:	42a3      	cmp	r3, r4
 800e590:	bf04      	itt	eq
 800e592:	2301      	moveq	r3, #1
 800e594:	61a3      	streq	r3, [r4, #24]
 800e596:	4620      	mov	r0, r4
 800e598:	f000 f820 	bl	800e5dc <__sfp>
 800e59c:	6060      	str	r0, [r4, #4]
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f000 f81c 	bl	800e5dc <__sfp>
 800e5a4:	60a0      	str	r0, [r4, #8]
 800e5a6:	4620      	mov	r0, r4
 800e5a8:	f000 f818 	bl	800e5dc <__sfp>
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	60e0      	str	r0, [r4, #12]
 800e5b0:	2104      	movs	r1, #4
 800e5b2:	6860      	ldr	r0, [r4, #4]
 800e5b4:	f7ff ff82 	bl	800e4bc <std>
 800e5b8:	68a0      	ldr	r0, [r4, #8]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	2109      	movs	r1, #9
 800e5be:	f7ff ff7d 	bl	800e4bc <std>
 800e5c2:	68e0      	ldr	r0, [r4, #12]
 800e5c4:	2202      	movs	r2, #2
 800e5c6:	2112      	movs	r1, #18
 800e5c8:	f7ff ff78 	bl	800e4bc <std>
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	61a3      	str	r3, [r4, #24]
 800e5d0:	e7d2      	b.n	800e578 <__sinit+0xc>
 800e5d2:	bf00      	nop
 800e5d4:	08014744 	.word	0x08014744
 800e5d8:	0800e505 	.word	0x0800e505

0800e5dc <__sfp>:
 800e5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5de:	4607      	mov	r7, r0
 800e5e0:	f7ff ffac 	bl	800e53c <__sfp_lock_acquire>
 800e5e4:	4b1e      	ldr	r3, [pc, #120]	; (800e660 <__sfp+0x84>)
 800e5e6:	681e      	ldr	r6, [r3, #0]
 800e5e8:	69b3      	ldr	r3, [r6, #24]
 800e5ea:	b913      	cbnz	r3, 800e5f2 <__sfp+0x16>
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	f7ff ffbd 	bl	800e56c <__sinit>
 800e5f2:	3648      	adds	r6, #72	; 0x48
 800e5f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e5f8:	3b01      	subs	r3, #1
 800e5fa:	d503      	bpl.n	800e604 <__sfp+0x28>
 800e5fc:	6833      	ldr	r3, [r6, #0]
 800e5fe:	b30b      	cbz	r3, 800e644 <__sfp+0x68>
 800e600:	6836      	ldr	r6, [r6, #0]
 800e602:	e7f7      	b.n	800e5f4 <__sfp+0x18>
 800e604:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e608:	b9d5      	cbnz	r5, 800e640 <__sfp+0x64>
 800e60a:	4b16      	ldr	r3, [pc, #88]	; (800e664 <__sfp+0x88>)
 800e60c:	60e3      	str	r3, [r4, #12]
 800e60e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e612:	6665      	str	r5, [r4, #100]	; 0x64
 800e614:	f000 fbba 	bl	800ed8c <__retarget_lock_init_recursive>
 800e618:	f7ff ff96 	bl	800e548 <__sfp_lock_release>
 800e61c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e620:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e624:	6025      	str	r5, [r4, #0]
 800e626:	61a5      	str	r5, [r4, #24]
 800e628:	2208      	movs	r2, #8
 800e62a:	4629      	mov	r1, r5
 800e62c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e630:	f7fd f93e 	bl	800b8b0 <memset>
 800e634:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e638:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e63c:	4620      	mov	r0, r4
 800e63e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e640:	3468      	adds	r4, #104	; 0x68
 800e642:	e7d9      	b.n	800e5f8 <__sfp+0x1c>
 800e644:	2104      	movs	r1, #4
 800e646:	4638      	mov	r0, r7
 800e648:	f7ff ff62 	bl	800e510 <__sfmoreglue>
 800e64c:	4604      	mov	r4, r0
 800e64e:	6030      	str	r0, [r6, #0]
 800e650:	2800      	cmp	r0, #0
 800e652:	d1d5      	bne.n	800e600 <__sfp+0x24>
 800e654:	f7ff ff78 	bl	800e548 <__sfp_lock_release>
 800e658:	230c      	movs	r3, #12
 800e65a:	603b      	str	r3, [r7, #0]
 800e65c:	e7ee      	b.n	800e63c <__sfp+0x60>
 800e65e:	bf00      	nop
 800e660:	08014744 	.word	0x08014744
 800e664:	ffff0001 	.word	0xffff0001

0800e668 <_fwalk_reent>:
 800e668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e66c:	4606      	mov	r6, r0
 800e66e:	4688      	mov	r8, r1
 800e670:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e674:	2700      	movs	r7, #0
 800e676:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e67a:	f1b9 0901 	subs.w	r9, r9, #1
 800e67e:	d505      	bpl.n	800e68c <_fwalk_reent+0x24>
 800e680:	6824      	ldr	r4, [r4, #0]
 800e682:	2c00      	cmp	r4, #0
 800e684:	d1f7      	bne.n	800e676 <_fwalk_reent+0xe>
 800e686:	4638      	mov	r0, r7
 800e688:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e68c:	89ab      	ldrh	r3, [r5, #12]
 800e68e:	2b01      	cmp	r3, #1
 800e690:	d907      	bls.n	800e6a2 <_fwalk_reent+0x3a>
 800e692:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e696:	3301      	adds	r3, #1
 800e698:	d003      	beq.n	800e6a2 <_fwalk_reent+0x3a>
 800e69a:	4629      	mov	r1, r5
 800e69c:	4630      	mov	r0, r6
 800e69e:	47c0      	blx	r8
 800e6a0:	4307      	orrs	r7, r0
 800e6a2:	3568      	adds	r5, #104	; 0x68
 800e6a4:	e7e9      	b.n	800e67a <_fwalk_reent+0x12>

0800e6a6 <rshift>:
 800e6a6:	6903      	ldr	r3, [r0, #16]
 800e6a8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e6ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6b0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e6b4:	f100 0414 	add.w	r4, r0, #20
 800e6b8:	dd45      	ble.n	800e746 <rshift+0xa0>
 800e6ba:	f011 011f 	ands.w	r1, r1, #31
 800e6be:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e6c2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e6c6:	d10c      	bne.n	800e6e2 <rshift+0x3c>
 800e6c8:	f100 0710 	add.w	r7, r0, #16
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	42b1      	cmp	r1, r6
 800e6d0:	d334      	bcc.n	800e73c <rshift+0x96>
 800e6d2:	1a9b      	subs	r3, r3, r2
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	1eea      	subs	r2, r5, #3
 800e6d8:	4296      	cmp	r6, r2
 800e6da:	bf38      	it	cc
 800e6dc:	2300      	movcc	r3, #0
 800e6de:	4423      	add	r3, r4
 800e6e0:	e015      	b.n	800e70e <rshift+0x68>
 800e6e2:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e6e6:	f1c1 0820 	rsb	r8, r1, #32
 800e6ea:	40cf      	lsrs	r7, r1
 800e6ec:	f105 0e04 	add.w	lr, r5, #4
 800e6f0:	46a1      	mov	r9, r4
 800e6f2:	4576      	cmp	r6, lr
 800e6f4:	46f4      	mov	ip, lr
 800e6f6:	d815      	bhi.n	800e724 <rshift+0x7e>
 800e6f8:	1a9b      	subs	r3, r3, r2
 800e6fa:	009a      	lsls	r2, r3, #2
 800e6fc:	3a04      	subs	r2, #4
 800e6fe:	3501      	adds	r5, #1
 800e700:	42ae      	cmp	r6, r5
 800e702:	bf38      	it	cc
 800e704:	2200      	movcc	r2, #0
 800e706:	18a3      	adds	r3, r4, r2
 800e708:	50a7      	str	r7, [r4, r2]
 800e70a:	b107      	cbz	r7, 800e70e <rshift+0x68>
 800e70c:	3304      	adds	r3, #4
 800e70e:	1b1a      	subs	r2, r3, r4
 800e710:	42a3      	cmp	r3, r4
 800e712:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e716:	bf08      	it	eq
 800e718:	2300      	moveq	r3, #0
 800e71a:	6102      	str	r2, [r0, #16]
 800e71c:	bf08      	it	eq
 800e71e:	6143      	streq	r3, [r0, #20]
 800e720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e724:	f8dc c000 	ldr.w	ip, [ip]
 800e728:	fa0c fc08 	lsl.w	ip, ip, r8
 800e72c:	ea4c 0707 	orr.w	r7, ip, r7
 800e730:	f849 7b04 	str.w	r7, [r9], #4
 800e734:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e738:	40cf      	lsrs	r7, r1
 800e73a:	e7da      	b.n	800e6f2 <rshift+0x4c>
 800e73c:	f851 cb04 	ldr.w	ip, [r1], #4
 800e740:	f847 cf04 	str.w	ip, [r7, #4]!
 800e744:	e7c3      	b.n	800e6ce <rshift+0x28>
 800e746:	4623      	mov	r3, r4
 800e748:	e7e1      	b.n	800e70e <rshift+0x68>

0800e74a <__hexdig_fun>:
 800e74a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e74e:	2b09      	cmp	r3, #9
 800e750:	d802      	bhi.n	800e758 <__hexdig_fun+0xe>
 800e752:	3820      	subs	r0, #32
 800e754:	b2c0      	uxtb	r0, r0
 800e756:	4770      	bx	lr
 800e758:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e75c:	2b05      	cmp	r3, #5
 800e75e:	d801      	bhi.n	800e764 <__hexdig_fun+0x1a>
 800e760:	3847      	subs	r0, #71	; 0x47
 800e762:	e7f7      	b.n	800e754 <__hexdig_fun+0xa>
 800e764:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e768:	2b05      	cmp	r3, #5
 800e76a:	d801      	bhi.n	800e770 <__hexdig_fun+0x26>
 800e76c:	3827      	subs	r0, #39	; 0x27
 800e76e:	e7f1      	b.n	800e754 <__hexdig_fun+0xa>
 800e770:	2000      	movs	r0, #0
 800e772:	4770      	bx	lr

0800e774 <__gethex>:
 800e774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e778:	ed2d 8b02 	vpush	{d8}
 800e77c:	b089      	sub	sp, #36	; 0x24
 800e77e:	ee08 0a10 	vmov	s16, r0
 800e782:	9304      	str	r3, [sp, #16]
 800e784:	4bbc      	ldr	r3, [pc, #752]	; (800ea78 <__gethex+0x304>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	4618      	mov	r0, r3
 800e78c:	468b      	mov	fp, r1
 800e78e:	4690      	mov	r8, r2
 800e790:	f7f1 fd2e 	bl	80001f0 <strlen>
 800e794:	9b01      	ldr	r3, [sp, #4]
 800e796:	f8db 2000 	ldr.w	r2, [fp]
 800e79a:	4403      	add	r3, r0
 800e79c:	4682      	mov	sl, r0
 800e79e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e7a2:	9305      	str	r3, [sp, #20]
 800e7a4:	1c93      	adds	r3, r2, #2
 800e7a6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e7aa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e7ae:	32fe      	adds	r2, #254	; 0xfe
 800e7b0:	18d1      	adds	r1, r2, r3
 800e7b2:	461f      	mov	r7, r3
 800e7b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e7b8:	9100      	str	r1, [sp, #0]
 800e7ba:	2830      	cmp	r0, #48	; 0x30
 800e7bc:	d0f8      	beq.n	800e7b0 <__gethex+0x3c>
 800e7be:	f7ff ffc4 	bl	800e74a <__hexdig_fun>
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	d13a      	bne.n	800e83e <__gethex+0xca>
 800e7c8:	9901      	ldr	r1, [sp, #4]
 800e7ca:	4652      	mov	r2, sl
 800e7cc:	4638      	mov	r0, r7
 800e7ce:	f001 fbf2 	bl	800ffb6 <strncmp>
 800e7d2:	4605      	mov	r5, r0
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	d168      	bne.n	800e8aa <__gethex+0x136>
 800e7d8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e7dc:	eb07 060a 	add.w	r6, r7, sl
 800e7e0:	f7ff ffb3 	bl	800e74a <__hexdig_fun>
 800e7e4:	2800      	cmp	r0, #0
 800e7e6:	d062      	beq.n	800e8ae <__gethex+0x13a>
 800e7e8:	4633      	mov	r3, r6
 800e7ea:	7818      	ldrb	r0, [r3, #0]
 800e7ec:	2830      	cmp	r0, #48	; 0x30
 800e7ee:	461f      	mov	r7, r3
 800e7f0:	f103 0301 	add.w	r3, r3, #1
 800e7f4:	d0f9      	beq.n	800e7ea <__gethex+0x76>
 800e7f6:	f7ff ffa8 	bl	800e74a <__hexdig_fun>
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	fab0 f480 	clz	r4, r0
 800e800:	0964      	lsrs	r4, r4, #5
 800e802:	4635      	mov	r5, r6
 800e804:	9300      	str	r3, [sp, #0]
 800e806:	463a      	mov	r2, r7
 800e808:	4616      	mov	r6, r2
 800e80a:	3201      	adds	r2, #1
 800e80c:	7830      	ldrb	r0, [r6, #0]
 800e80e:	f7ff ff9c 	bl	800e74a <__hexdig_fun>
 800e812:	2800      	cmp	r0, #0
 800e814:	d1f8      	bne.n	800e808 <__gethex+0x94>
 800e816:	9901      	ldr	r1, [sp, #4]
 800e818:	4652      	mov	r2, sl
 800e81a:	4630      	mov	r0, r6
 800e81c:	f001 fbcb 	bl	800ffb6 <strncmp>
 800e820:	b980      	cbnz	r0, 800e844 <__gethex+0xd0>
 800e822:	b94d      	cbnz	r5, 800e838 <__gethex+0xc4>
 800e824:	eb06 050a 	add.w	r5, r6, sl
 800e828:	462a      	mov	r2, r5
 800e82a:	4616      	mov	r6, r2
 800e82c:	3201      	adds	r2, #1
 800e82e:	7830      	ldrb	r0, [r6, #0]
 800e830:	f7ff ff8b 	bl	800e74a <__hexdig_fun>
 800e834:	2800      	cmp	r0, #0
 800e836:	d1f8      	bne.n	800e82a <__gethex+0xb6>
 800e838:	1bad      	subs	r5, r5, r6
 800e83a:	00ad      	lsls	r5, r5, #2
 800e83c:	e004      	b.n	800e848 <__gethex+0xd4>
 800e83e:	2400      	movs	r4, #0
 800e840:	4625      	mov	r5, r4
 800e842:	e7e0      	b.n	800e806 <__gethex+0x92>
 800e844:	2d00      	cmp	r5, #0
 800e846:	d1f7      	bne.n	800e838 <__gethex+0xc4>
 800e848:	7833      	ldrb	r3, [r6, #0]
 800e84a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e84e:	2b50      	cmp	r3, #80	; 0x50
 800e850:	d13b      	bne.n	800e8ca <__gethex+0x156>
 800e852:	7873      	ldrb	r3, [r6, #1]
 800e854:	2b2b      	cmp	r3, #43	; 0x2b
 800e856:	d02c      	beq.n	800e8b2 <__gethex+0x13e>
 800e858:	2b2d      	cmp	r3, #45	; 0x2d
 800e85a:	d02e      	beq.n	800e8ba <__gethex+0x146>
 800e85c:	1c71      	adds	r1, r6, #1
 800e85e:	f04f 0900 	mov.w	r9, #0
 800e862:	7808      	ldrb	r0, [r1, #0]
 800e864:	f7ff ff71 	bl	800e74a <__hexdig_fun>
 800e868:	1e43      	subs	r3, r0, #1
 800e86a:	b2db      	uxtb	r3, r3
 800e86c:	2b18      	cmp	r3, #24
 800e86e:	d82c      	bhi.n	800e8ca <__gethex+0x156>
 800e870:	f1a0 0210 	sub.w	r2, r0, #16
 800e874:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e878:	f7ff ff67 	bl	800e74a <__hexdig_fun>
 800e87c:	1e43      	subs	r3, r0, #1
 800e87e:	b2db      	uxtb	r3, r3
 800e880:	2b18      	cmp	r3, #24
 800e882:	d91d      	bls.n	800e8c0 <__gethex+0x14c>
 800e884:	f1b9 0f00 	cmp.w	r9, #0
 800e888:	d000      	beq.n	800e88c <__gethex+0x118>
 800e88a:	4252      	negs	r2, r2
 800e88c:	4415      	add	r5, r2
 800e88e:	f8cb 1000 	str.w	r1, [fp]
 800e892:	b1e4      	cbz	r4, 800e8ce <__gethex+0x15a>
 800e894:	9b00      	ldr	r3, [sp, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	bf14      	ite	ne
 800e89a:	2700      	movne	r7, #0
 800e89c:	2706      	moveq	r7, #6
 800e89e:	4638      	mov	r0, r7
 800e8a0:	b009      	add	sp, #36	; 0x24
 800e8a2:	ecbd 8b02 	vpop	{d8}
 800e8a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8aa:	463e      	mov	r6, r7
 800e8ac:	4625      	mov	r5, r4
 800e8ae:	2401      	movs	r4, #1
 800e8b0:	e7ca      	b.n	800e848 <__gethex+0xd4>
 800e8b2:	f04f 0900 	mov.w	r9, #0
 800e8b6:	1cb1      	adds	r1, r6, #2
 800e8b8:	e7d3      	b.n	800e862 <__gethex+0xee>
 800e8ba:	f04f 0901 	mov.w	r9, #1
 800e8be:	e7fa      	b.n	800e8b6 <__gethex+0x142>
 800e8c0:	230a      	movs	r3, #10
 800e8c2:	fb03 0202 	mla	r2, r3, r2, r0
 800e8c6:	3a10      	subs	r2, #16
 800e8c8:	e7d4      	b.n	800e874 <__gethex+0x100>
 800e8ca:	4631      	mov	r1, r6
 800e8cc:	e7df      	b.n	800e88e <__gethex+0x11a>
 800e8ce:	1bf3      	subs	r3, r6, r7
 800e8d0:	3b01      	subs	r3, #1
 800e8d2:	4621      	mov	r1, r4
 800e8d4:	2b07      	cmp	r3, #7
 800e8d6:	dc0b      	bgt.n	800e8f0 <__gethex+0x17c>
 800e8d8:	ee18 0a10 	vmov	r0, s16
 800e8dc:	f000 fae6 	bl	800eeac <_Balloc>
 800e8e0:	4604      	mov	r4, r0
 800e8e2:	b940      	cbnz	r0, 800e8f6 <__gethex+0x182>
 800e8e4:	4b65      	ldr	r3, [pc, #404]	; (800ea7c <__gethex+0x308>)
 800e8e6:	4602      	mov	r2, r0
 800e8e8:	21de      	movs	r1, #222	; 0xde
 800e8ea:	4865      	ldr	r0, [pc, #404]	; (800ea80 <__gethex+0x30c>)
 800e8ec:	f001 fb94 	bl	8010018 <__assert_func>
 800e8f0:	3101      	adds	r1, #1
 800e8f2:	105b      	asrs	r3, r3, #1
 800e8f4:	e7ee      	b.n	800e8d4 <__gethex+0x160>
 800e8f6:	f100 0914 	add.w	r9, r0, #20
 800e8fa:	f04f 0b00 	mov.w	fp, #0
 800e8fe:	f1ca 0301 	rsb	r3, sl, #1
 800e902:	f8cd 9008 	str.w	r9, [sp, #8]
 800e906:	f8cd b000 	str.w	fp, [sp]
 800e90a:	9306      	str	r3, [sp, #24]
 800e90c:	42b7      	cmp	r7, r6
 800e90e:	d340      	bcc.n	800e992 <__gethex+0x21e>
 800e910:	9802      	ldr	r0, [sp, #8]
 800e912:	9b00      	ldr	r3, [sp, #0]
 800e914:	f840 3b04 	str.w	r3, [r0], #4
 800e918:	eba0 0009 	sub.w	r0, r0, r9
 800e91c:	1080      	asrs	r0, r0, #2
 800e91e:	0146      	lsls	r6, r0, #5
 800e920:	6120      	str	r0, [r4, #16]
 800e922:	4618      	mov	r0, r3
 800e924:	f000 fbb8 	bl	800f098 <__hi0bits>
 800e928:	1a30      	subs	r0, r6, r0
 800e92a:	f8d8 6000 	ldr.w	r6, [r8]
 800e92e:	42b0      	cmp	r0, r6
 800e930:	dd63      	ble.n	800e9fa <__gethex+0x286>
 800e932:	1b87      	subs	r7, r0, r6
 800e934:	4639      	mov	r1, r7
 800e936:	4620      	mov	r0, r4
 800e938:	f000 ff52 	bl	800f7e0 <__any_on>
 800e93c:	4682      	mov	sl, r0
 800e93e:	b1a8      	cbz	r0, 800e96c <__gethex+0x1f8>
 800e940:	1e7b      	subs	r3, r7, #1
 800e942:	1159      	asrs	r1, r3, #5
 800e944:	f003 021f 	and.w	r2, r3, #31
 800e948:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e94c:	f04f 0a01 	mov.w	sl, #1
 800e950:	fa0a f202 	lsl.w	r2, sl, r2
 800e954:	420a      	tst	r2, r1
 800e956:	d009      	beq.n	800e96c <__gethex+0x1f8>
 800e958:	4553      	cmp	r3, sl
 800e95a:	dd05      	ble.n	800e968 <__gethex+0x1f4>
 800e95c:	1eb9      	subs	r1, r7, #2
 800e95e:	4620      	mov	r0, r4
 800e960:	f000 ff3e 	bl	800f7e0 <__any_on>
 800e964:	2800      	cmp	r0, #0
 800e966:	d145      	bne.n	800e9f4 <__gethex+0x280>
 800e968:	f04f 0a02 	mov.w	sl, #2
 800e96c:	4639      	mov	r1, r7
 800e96e:	4620      	mov	r0, r4
 800e970:	f7ff fe99 	bl	800e6a6 <rshift>
 800e974:	443d      	add	r5, r7
 800e976:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e97a:	42ab      	cmp	r3, r5
 800e97c:	da4c      	bge.n	800ea18 <__gethex+0x2a4>
 800e97e:	ee18 0a10 	vmov	r0, s16
 800e982:	4621      	mov	r1, r4
 800e984:	f000 fad2 	bl	800ef2c <_Bfree>
 800e988:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e98a:	2300      	movs	r3, #0
 800e98c:	6013      	str	r3, [r2, #0]
 800e98e:	27a3      	movs	r7, #163	; 0xa3
 800e990:	e785      	b.n	800e89e <__gethex+0x12a>
 800e992:	1e73      	subs	r3, r6, #1
 800e994:	9a05      	ldr	r2, [sp, #20]
 800e996:	9303      	str	r3, [sp, #12]
 800e998:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e99c:	4293      	cmp	r3, r2
 800e99e:	d019      	beq.n	800e9d4 <__gethex+0x260>
 800e9a0:	f1bb 0f20 	cmp.w	fp, #32
 800e9a4:	d107      	bne.n	800e9b6 <__gethex+0x242>
 800e9a6:	9b02      	ldr	r3, [sp, #8]
 800e9a8:	9a00      	ldr	r2, [sp, #0]
 800e9aa:	f843 2b04 	str.w	r2, [r3], #4
 800e9ae:	9302      	str	r3, [sp, #8]
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	9300      	str	r3, [sp, #0]
 800e9b4:	469b      	mov	fp, r3
 800e9b6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e9ba:	f7ff fec6 	bl	800e74a <__hexdig_fun>
 800e9be:	9b00      	ldr	r3, [sp, #0]
 800e9c0:	f000 000f 	and.w	r0, r0, #15
 800e9c4:	fa00 f00b 	lsl.w	r0, r0, fp
 800e9c8:	4303      	orrs	r3, r0
 800e9ca:	9300      	str	r3, [sp, #0]
 800e9cc:	f10b 0b04 	add.w	fp, fp, #4
 800e9d0:	9b03      	ldr	r3, [sp, #12]
 800e9d2:	e00d      	b.n	800e9f0 <__gethex+0x27c>
 800e9d4:	9b03      	ldr	r3, [sp, #12]
 800e9d6:	9a06      	ldr	r2, [sp, #24]
 800e9d8:	4413      	add	r3, r2
 800e9da:	42bb      	cmp	r3, r7
 800e9dc:	d3e0      	bcc.n	800e9a0 <__gethex+0x22c>
 800e9de:	4618      	mov	r0, r3
 800e9e0:	9901      	ldr	r1, [sp, #4]
 800e9e2:	9307      	str	r3, [sp, #28]
 800e9e4:	4652      	mov	r2, sl
 800e9e6:	f001 fae6 	bl	800ffb6 <strncmp>
 800e9ea:	9b07      	ldr	r3, [sp, #28]
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d1d7      	bne.n	800e9a0 <__gethex+0x22c>
 800e9f0:	461e      	mov	r6, r3
 800e9f2:	e78b      	b.n	800e90c <__gethex+0x198>
 800e9f4:	f04f 0a03 	mov.w	sl, #3
 800e9f8:	e7b8      	b.n	800e96c <__gethex+0x1f8>
 800e9fa:	da0a      	bge.n	800ea12 <__gethex+0x29e>
 800e9fc:	1a37      	subs	r7, r6, r0
 800e9fe:	4621      	mov	r1, r4
 800ea00:	ee18 0a10 	vmov	r0, s16
 800ea04:	463a      	mov	r2, r7
 800ea06:	f000 fcad 	bl	800f364 <__lshift>
 800ea0a:	1bed      	subs	r5, r5, r7
 800ea0c:	4604      	mov	r4, r0
 800ea0e:	f100 0914 	add.w	r9, r0, #20
 800ea12:	f04f 0a00 	mov.w	sl, #0
 800ea16:	e7ae      	b.n	800e976 <__gethex+0x202>
 800ea18:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ea1c:	42a8      	cmp	r0, r5
 800ea1e:	dd72      	ble.n	800eb06 <__gethex+0x392>
 800ea20:	1b45      	subs	r5, r0, r5
 800ea22:	42ae      	cmp	r6, r5
 800ea24:	dc36      	bgt.n	800ea94 <__gethex+0x320>
 800ea26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ea2a:	2b02      	cmp	r3, #2
 800ea2c:	d02a      	beq.n	800ea84 <__gethex+0x310>
 800ea2e:	2b03      	cmp	r3, #3
 800ea30:	d02c      	beq.n	800ea8c <__gethex+0x318>
 800ea32:	2b01      	cmp	r3, #1
 800ea34:	d115      	bne.n	800ea62 <__gethex+0x2ee>
 800ea36:	42ae      	cmp	r6, r5
 800ea38:	d113      	bne.n	800ea62 <__gethex+0x2ee>
 800ea3a:	2e01      	cmp	r6, #1
 800ea3c:	d10b      	bne.n	800ea56 <__gethex+0x2e2>
 800ea3e:	9a04      	ldr	r2, [sp, #16]
 800ea40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ea44:	6013      	str	r3, [r2, #0]
 800ea46:	2301      	movs	r3, #1
 800ea48:	6123      	str	r3, [r4, #16]
 800ea4a:	f8c9 3000 	str.w	r3, [r9]
 800ea4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ea50:	2762      	movs	r7, #98	; 0x62
 800ea52:	601c      	str	r4, [r3, #0]
 800ea54:	e723      	b.n	800e89e <__gethex+0x12a>
 800ea56:	1e71      	subs	r1, r6, #1
 800ea58:	4620      	mov	r0, r4
 800ea5a:	f000 fec1 	bl	800f7e0 <__any_on>
 800ea5e:	2800      	cmp	r0, #0
 800ea60:	d1ed      	bne.n	800ea3e <__gethex+0x2ca>
 800ea62:	ee18 0a10 	vmov	r0, s16
 800ea66:	4621      	mov	r1, r4
 800ea68:	f000 fa60 	bl	800ef2c <_Bfree>
 800ea6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ea6e:	2300      	movs	r3, #0
 800ea70:	6013      	str	r3, [r2, #0]
 800ea72:	2750      	movs	r7, #80	; 0x50
 800ea74:	e713      	b.n	800e89e <__gethex+0x12a>
 800ea76:	bf00      	nop
 800ea78:	08014a3c 	.word	0x08014a3c
 800ea7c:	0801495c 	.word	0x0801495c
 800ea80:	080149d0 	.word	0x080149d0
 800ea84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1eb      	bne.n	800ea62 <__gethex+0x2ee>
 800ea8a:	e7d8      	b.n	800ea3e <__gethex+0x2ca>
 800ea8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d1d5      	bne.n	800ea3e <__gethex+0x2ca>
 800ea92:	e7e6      	b.n	800ea62 <__gethex+0x2ee>
 800ea94:	1e6f      	subs	r7, r5, #1
 800ea96:	f1ba 0f00 	cmp.w	sl, #0
 800ea9a:	d131      	bne.n	800eb00 <__gethex+0x38c>
 800ea9c:	b127      	cbz	r7, 800eaa8 <__gethex+0x334>
 800ea9e:	4639      	mov	r1, r7
 800eaa0:	4620      	mov	r0, r4
 800eaa2:	f000 fe9d 	bl	800f7e0 <__any_on>
 800eaa6:	4682      	mov	sl, r0
 800eaa8:	117b      	asrs	r3, r7, #5
 800eaaa:	2101      	movs	r1, #1
 800eaac:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800eab0:	f007 071f 	and.w	r7, r7, #31
 800eab4:	fa01 f707 	lsl.w	r7, r1, r7
 800eab8:	421f      	tst	r7, r3
 800eaba:	4629      	mov	r1, r5
 800eabc:	4620      	mov	r0, r4
 800eabe:	bf18      	it	ne
 800eac0:	f04a 0a02 	orrne.w	sl, sl, #2
 800eac4:	1b76      	subs	r6, r6, r5
 800eac6:	f7ff fdee 	bl	800e6a6 <rshift>
 800eaca:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800eace:	2702      	movs	r7, #2
 800ead0:	f1ba 0f00 	cmp.w	sl, #0
 800ead4:	d048      	beq.n	800eb68 <__gethex+0x3f4>
 800ead6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800eada:	2b02      	cmp	r3, #2
 800eadc:	d015      	beq.n	800eb0a <__gethex+0x396>
 800eade:	2b03      	cmp	r3, #3
 800eae0:	d017      	beq.n	800eb12 <__gethex+0x39e>
 800eae2:	2b01      	cmp	r3, #1
 800eae4:	d109      	bne.n	800eafa <__gethex+0x386>
 800eae6:	f01a 0f02 	tst.w	sl, #2
 800eaea:	d006      	beq.n	800eafa <__gethex+0x386>
 800eaec:	f8d9 0000 	ldr.w	r0, [r9]
 800eaf0:	ea4a 0a00 	orr.w	sl, sl, r0
 800eaf4:	f01a 0f01 	tst.w	sl, #1
 800eaf8:	d10e      	bne.n	800eb18 <__gethex+0x3a4>
 800eafa:	f047 0710 	orr.w	r7, r7, #16
 800eafe:	e033      	b.n	800eb68 <__gethex+0x3f4>
 800eb00:	f04f 0a01 	mov.w	sl, #1
 800eb04:	e7d0      	b.n	800eaa8 <__gethex+0x334>
 800eb06:	2701      	movs	r7, #1
 800eb08:	e7e2      	b.n	800ead0 <__gethex+0x35c>
 800eb0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb0c:	f1c3 0301 	rsb	r3, r3, #1
 800eb10:	9315      	str	r3, [sp, #84]	; 0x54
 800eb12:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d0f0      	beq.n	800eafa <__gethex+0x386>
 800eb18:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800eb1c:	f104 0314 	add.w	r3, r4, #20
 800eb20:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800eb24:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800eb28:	f04f 0c00 	mov.w	ip, #0
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800eb32:	f1b2 3fff 	cmp.w	r2, #4294967295
 800eb36:	d01c      	beq.n	800eb72 <__gethex+0x3fe>
 800eb38:	3201      	adds	r2, #1
 800eb3a:	6002      	str	r2, [r0, #0]
 800eb3c:	2f02      	cmp	r7, #2
 800eb3e:	f104 0314 	add.w	r3, r4, #20
 800eb42:	d13f      	bne.n	800ebc4 <__gethex+0x450>
 800eb44:	f8d8 2000 	ldr.w	r2, [r8]
 800eb48:	3a01      	subs	r2, #1
 800eb4a:	42b2      	cmp	r2, r6
 800eb4c:	d10a      	bne.n	800eb64 <__gethex+0x3f0>
 800eb4e:	1171      	asrs	r1, r6, #5
 800eb50:	2201      	movs	r2, #1
 800eb52:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eb56:	f006 061f 	and.w	r6, r6, #31
 800eb5a:	fa02 f606 	lsl.w	r6, r2, r6
 800eb5e:	421e      	tst	r6, r3
 800eb60:	bf18      	it	ne
 800eb62:	4617      	movne	r7, r2
 800eb64:	f047 0720 	orr.w	r7, r7, #32
 800eb68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb6a:	601c      	str	r4, [r3, #0]
 800eb6c:	9b04      	ldr	r3, [sp, #16]
 800eb6e:	601d      	str	r5, [r3, #0]
 800eb70:	e695      	b.n	800e89e <__gethex+0x12a>
 800eb72:	4299      	cmp	r1, r3
 800eb74:	f843 cc04 	str.w	ip, [r3, #-4]
 800eb78:	d8d8      	bhi.n	800eb2c <__gethex+0x3b8>
 800eb7a:	68a3      	ldr	r3, [r4, #8]
 800eb7c:	459b      	cmp	fp, r3
 800eb7e:	db19      	blt.n	800ebb4 <__gethex+0x440>
 800eb80:	6861      	ldr	r1, [r4, #4]
 800eb82:	ee18 0a10 	vmov	r0, s16
 800eb86:	3101      	adds	r1, #1
 800eb88:	f000 f990 	bl	800eeac <_Balloc>
 800eb8c:	4681      	mov	r9, r0
 800eb8e:	b918      	cbnz	r0, 800eb98 <__gethex+0x424>
 800eb90:	4b1a      	ldr	r3, [pc, #104]	; (800ebfc <__gethex+0x488>)
 800eb92:	4602      	mov	r2, r0
 800eb94:	2184      	movs	r1, #132	; 0x84
 800eb96:	e6a8      	b.n	800e8ea <__gethex+0x176>
 800eb98:	6922      	ldr	r2, [r4, #16]
 800eb9a:	3202      	adds	r2, #2
 800eb9c:	f104 010c 	add.w	r1, r4, #12
 800eba0:	0092      	lsls	r2, r2, #2
 800eba2:	300c      	adds	r0, #12
 800eba4:	f000 f974 	bl	800ee90 <memcpy>
 800eba8:	4621      	mov	r1, r4
 800ebaa:	ee18 0a10 	vmov	r0, s16
 800ebae:	f000 f9bd 	bl	800ef2c <_Bfree>
 800ebb2:	464c      	mov	r4, r9
 800ebb4:	6923      	ldr	r3, [r4, #16]
 800ebb6:	1c5a      	adds	r2, r3, #1
 800ebb8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ebbc:	6122      	str	r2, [r4, #16]
 800ebbe:	2201      	movs	r2, #1
 800ebc0:	615a      	str	r2, [r3, #20]
 800ebc2:	e7bb      	b.n	800eb3c <__gethex+0x3c8>
 800ebc4:	6922      	ldr	r2, [r4, #16]
 800ebc6:	455a      	cmp	r2, fp
 800ebc8:	dd0b      	ble.n	800ebe2 <__gethex+0x46e>
 800ebca:	2101      	movs	r1, #1
 800ebcc:	4620      	mov	r0, r4
 800ebce:	f7ff fd6a 	bl	800e6a6 <rshift>
 800ebd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ebd6:	3501      	adds	r5, #1
 800ebd8:	42ab      	cmp	r3, r5
 800ebda:	f6ff aed0 	blt.w	800e97e <__gethex+0x20a>
 800ebde:	2701      	movs	r7, #1
 800ebe0:	e7c0      	b.n	800eb64 <__gethex+0x3f0>
 800ebe2:	f016 061f 	ands.w	r6, r6, #31
 800ebe6:	d0fa      	beq.n	800ebde <__gethex+0x46a>
 800ebe8:	449a      	add	sl, r3
 800ebea:	f1c6 0620 	rsb	r6, r6, #32
 800ebee:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800ebf2:	f000 fa51 	bl	800f098 <__hi0bits>
 800ebf6:	42b0      	cmp	r0, r6
 800ebf8:	dbe7      	blt.n	800ebca <__gethex+0x456>
 800ebfa:	e7f0      	b.n	800ebde <__gethex+0x46a>
 800ebfc:	0801495c 	.word	0x0801495c

0800ec00 <L_shift>:
 800ec00:	f1c2 0208 	rsb	r2, r2, #8
 800ec04:	0092      	lsls	r2, r2, #2
 800ec06:	b570      	push	{r4, r5, r6, lr}
 800ec08:	f1c2 0620 	rsb	r6, r2, #32
 800ec0c:	6843      	ldr	r3, [r0, #4]
 800ec0e:	6804      	ldr	r4, [r0, #0]
 800ec10:	fa03 f506 	lsl.w	r5, r3, r6
 800ec14:	432c      	orrs	r4, r5
 800ec16:	40d3      	lsrs	r3, r2
 800ec18:	6004      	str	r4, [r0, #0]
 800ec1a:	f840 3f04 	str.w	r3, [r0, #4]!
 800ec1e:	4288      	cmp	r0, r1
 800ec20:	d3f4      	bcc.n	800ec0c <L_shift+0xc>
 800ec22:	bd70      	pop	{r4, r5, r6, pc}

0800ec24 <__match>:
 800ec24:	b530      	push	{r4, r5, lr}
 800ec26:	6803      	ldr	r3, [r0, #0]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec2e:	b914      	cbnz	r4, 800ec36 <__match+0x12>
 800ec30:	6003      	str	r3, [r0, #0]
 800ec32:	2001      	movs	r0, #1
 800ec34:	bd30      	pop	{r4, r5, pc}
 800ec36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ec3e:	2d19      	cmp	r5, #25
 800ec40:	bf98      	it	ls
 800ec42:	3220      	addls	r2, #32
 800ec44:	42a2      	cmp	r2, r4
 800ec46:	d0f0      	beq.n	800ec2a <__match+0x6>
 800ec48:	2000      	movs	r0, #0
 800ec4a:	e7f3      	b.n	800ec34 <__match+0x10>

0800ec4c <__hexnan>:
 800ec4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec50:	680b      	ldr	r3, [r1, #0]
 800ec52:	6801      	ldr	r1, [r0, #0]
 800ec54:	115e      	asrs	r6, r3, #5
 800ec56:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ec5a:	f013 031f 	ands.w	r3, r3, #31
 800ec5e:	b087      	sub	sp, #28
 800ec60:	bf18      	it	ne
 800ec62:	3604      	addne	r6, #4
 800ec64:	2500      	movs	r5, #0
 800ec66:	1f37      	subs	r7, r6, #4
 800ec68:	4682      	mov	sl, r0
 800ec6a:	4690      	mov	r8, r2
 800ec6c:	9301      	str	r3, [sp, #4]
 800ec6e:	f846 5c04 	str.w	r5, [r6, #-4]
 800ec72:	46b9      	mov	r9, r7
 800ec74:	463c      	mov	r4, r7
 800ec76:	9502      	str	r5, [sp, #8]
 800ec78:	46ab      	mov	fp, r5
 800ec7a:	784a      	ldrb	r2, [r1, #1]
 800ec7c:	1c4b      	adds	r3, r1, #1
 800ec7e:	9303      	str	r3, [sp, #12]
 800ec80:	b342      	cbz	r2, 800ecd4 <__hexnan+0x88>
 800ec82:	4610      	mov	r0, r2
 800ec84:	9105      	str	r1, [sp, #20]
 800ec86:	9204      	str	r2, [sp, #16]
 800ec88:	f7ff fd5f 	bl	800e74a <__hexdig_fun>
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	d14f      	bne.n	800ed30 <__hexnan+0xe4>
 800ec90:	9a04      	ldr	r2, [sp, #16]
 800ec92:	9905      	ldr	r1, [sp, #20]
 800ec94:	2a20      	cmp	r2, #32
 800ec96:	d818      	bhi.n	800ecca <__hexnan+0x7e>
 800ec98:	9b02      	ldr	r3, [sp, #8]
 800ec9a:	459b      	cmp	fp, r3
 800ec9c:	dd13      	ble.n	800ecc6 <__hexnan+0x7a>
 800ec9e:	454c      	cmp	r4, r9
 800eca0:	d206      	bcs.n	800ecb0 <__hexnan+0x64>
 800eca2:	2d07      	cmp	r5, #7
 800eca4:	dc04      	bgt.n	800ecb0 <__hexnan+0x64>
 800eca6:	462a      	mov	r2, r5
 800eca8:	4649      	mov	r1, r9
 800ecaa:	4620      	mov	r0, r4
 800ecac:	f7ff ffa8 	bl	800ec00 <L_shift>
 800ecb0:	4544      	cmp	r4, r8
 800ecb2:	d950      	bls.n	800ed56 <__hexnan+0x10a>
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	f1a4 0904 	sub.w	r9, r4, #4
 800ecba:	f844 3c04 	str.w	r3, [r4, #-4]
 800ecbe:	f8cd b008 	str.w	fp, [sp, #8]
 800ecc2:	464c      	mov	r4, r9
 800ecc4:	461d      	mov	r5, r3
 800ecc6:	9903      	ldr	r1, [sp, #12]
 800ecc8:	e7d7      	b.n	800ec7a <__hexnan+0x2e>
 800ecca:	2a29      	cmp	r2, #41	; 0x29
 800eccc:	d156      	bne.n	800ed7c <__hexnan+0x130>
 800ecce:	3102      	adds	r1, #2
 800ecd0:	f8ca 1000 	str.w	r1, [sl]
 800ecd4:	f1bb 0f00 	cmp.w	fp, #0
 800ecd8:	d050      	beq.n	800ed7c <__hexnan+0x130>
 800ecda:	454c      	cmp	r4, r9
 800ecdc:	d206      	bcs.n	800ecec <__hexnan+0xa0>
 800ecde:	2d07      	cmp	r5, #7
 800ece0:	dc04      	bgt.n	800ecec <__hexnan+0xa0>
 800ece2:	462a      	mov	r2, r5
 800ece4:	4649      	mov	r1, r9
 800ece6:	4620      	mov	r0, r4
 800ece8:	f7ff ff8a 	bl	800ec00 <L_shift>
 800ecec:	4544      	cmp	r4, r8
 800ecee:	d934      	bls.n	800ed5a <__hexnan+0x10e>
 800ecf0:	f1a8 0204 	sub.w	r2, r8, #4
 800ecf4:	4623      	mov	r3, r4
 800ecf6:	f853 1b04 	ldr.w	r1, [r3], #4
 800ecfa:	f842 1f04 	str.w	r1, [r2, #4]!
 800ecfe:	429f      	cmp	r7, r3
 800ed00:	d2f9      	bcs.n	800ecf6 <__hexnan+0xaa>
 800ed02:	1b3b      	subs	r3, r7, r4
 800ed04:	f023 0303 	bic.w	r3, r3, #3
 800ed08:	3304      	adds	r3, #4
 800ed0a:	3401      	adds	r4, #1
 800ed0c:	3e03      	subs	r6, #3
 800ed0e:	42b4      	cmp	r4, r6
 800ed10:	bf88      	it	hi
 800ed12:	2304      	movhi	r3, #4
 800ed14:	4443      	add	r3, r8
 800ed16:	2200      	movs	r2, #0
 800ed18:	f843 2b04 	str.w	r2, [r3], #4
 800ed1c:	429f      	cmp	r7, r3
 800ed1e:	d2fb      	bcs.n	800ed18 <__hexnan+0xcc>
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	b91b      	cbnz	r3, 800ed2c <__hexnan+0xe0>
 800ed24:	4547      	cmp	r7, r8
 800ed26:	d127      	bne.n	800ed78 <__hexnan+0x12c>
 800ed28:	2301      	movs	r3, #1
 800ed2a:	603b      	str	r3, [r7, #0]
 800ed2c:	2005      	movs	r0, #5
 800ed2e:	e026      	b.n	800ed7e <__hexnan+0x132>
 800ed30:	3501      	adds	r5, #1
 800ed32:	2d08      	cmp	r5, #8
 800ed34:	f10b 0b01 	add.w	fp, fp, #1
 800ed38:	dd06      	ble.n	800ed48 <__hexnan+0xfc>
 800ed3a:	4544      	cmp	r4, r8
 800ed3c:	d9c3      	bls.n	800ecc6 <__hexnan+0x7a>
 800ed3e:	2300      	movs	r3, #0
 800ed40:	f844 3c04 	str.w	r3, [r4, #-4]
 800ed44:	2501      	movs	r5, #1
 800ed46:	3c04      	subs	r4, #4
 800ed48:	6822      	ldr	r2, [r4, #0]
 800ed4a:	f000 000f 	and.w	r0, r0, #15
 800ed4e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ed52:	6022      	str	r2, [r4, #0]
 800ed54:	e7b7      	b.n	800ecc6 <__hexnan+0x7a>
 800ed56:	2508      	movs	r5, #8
 800ed58:	e7b5      	b.n	800ecc6 <__hexnan+0x7a>
 800ed5a:	9b01      	ldr	r3, [sp, #4]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d0df      	beq.n	800ed20 <__hexnan+0xd4>
 800ed60:	f04f 32ff 	mov.w	r2, #4294967295
 800ed64:	f1c3 0320 	rsb	r3, r3, #32
 800ed68:	fa22 f303 	lsr.w	r3, r2, r3
 800ed6c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ed70:	401a      	ands	r2, r3
 800ed72:	f846 2c04 	str.w	r2, [r6, #-4]
 800ed76:	e7d3      	b.n	800ed20 <__hexnan+0xd4>
 800ed78:	3f04      	subs	r7, #4
 800ed7a:	e7d1      	b.n	800ed20 <__hexnan+0xd4>
 800ed7c:	2004      	movs	r0, #4
 800ed7e:	b007      	add	sp, #28
 800ed80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed84 <_localeconv_r>:
 800ed84:	4800      	ldr	r0, [pc, #0]	; (800ed88 <_localeconv_r+0x4>)
 800ed86:	4770      	bx	lr
 800ed88:	200001bc 	.word	0x200001bc

0800ed8c <__retarget_lock_init_recursive>:
 800ed8c:	4770      	bx	lr

0800ed8e <__retarget_lock_acquire_recursive>:
 800ed8e:	4770      	bx	lr

0800ed90 <__retarget_lock_release_recursive>:
 800ed90:	4770      	bx	lr

0800ed92 <__swhatbuf_r>:
 800ed92:	b570      	push	{r4, r5, r6, lr}
 800ed94:	460e      	mov	r6, r1
 800ed96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed9a:	2900      	cmp	r1, #0
 800ed9c:	b096      	sub	sp, #88	; 0x58
 800ed9e:	4614      	mov	r4, r2
 800eda0:	461d      	mov	r5, r3
 800eda2:	da07      	bge.n	800edb4 <__swhatbuf_r+0x22>
 800eda4:	2300      	movs	r3, #0
 800eda6:	602b      	str	r3, [r5, #0]
 800eda8:	89b3      	ldrh	r3, [r6, #12]
 800edaa:	061a      	lsls	r2, r3, #24
 800edac:	d410      	bmi.n	800edd0 <__swhatbuf_r+0x3e>
 800edae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edb2:	e00e      	b.n	800edd2 <__swhatbuf_r+0x40>
 800edb4:	466a      	mov	r2, sp
 800edb6:	f001 f96f 	bl	8010098 <_fstat_r>
 800edba:	2800      	cmp	r0, #0
 800edbc:	dbf2      	blt.n	800eda4 <__swhatbuf_r+0x12>
 800edbe:	9a01      	ldr	r2, [sp, #4]
 800edc0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800edc4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800edc8:	425a      	negs	r2, r3
 800edca:	415a      	adcs	r2, r3
 800edcc:	602a      	str	r2, [r5, #0]
 800edce:	e7ee      	b.n	800edae <__swhatbuf_r+0x1c>
 800edd0:	2340      	movs	r3, #64	; 0x40
 800edd2:	2000      	movs	r0, #0
 800edd4:	6023      	str	r3, [r4, #0]
 800edd6:	b016      	add	sp, #88	; 0x58
 800edd8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800eddc <__smakebuf_r>:
 800eddc:	898b      	ldrh	r3, [r1, #12]
 800edde:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ede0:	079d      	lsls	r5, r3, #30
 800ede2:	4606      	mov	r6, r0
 800ede4:	460c      	mov	r4, r1
 800ede6:	d507      	bpl.n	800edf8 <__smakebuf_r+0x1c>
 800ede8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800edec:	6023      	str	r3, [r4, #0]
 800edee:	6123      	str	r3, [r4, #16]
 800edf0:	2301      	movs	r3, #1
 800edf2:	6163      	str	r3, [r4, #20]
 800edf4:	b002      	add	sp, #8
 800edf6:	bd70      	pop	{r4, r5, r6, pc}
 800edf8:	ab01      	add	r3, sp, #4
 800edfa:	466a      	mov	r2, sp
 800edfc:	f7ff ffc9 	bl	800ed92 <__swhatbuf_r>
 800ee00:	9900      	ldr	r1, [sp, #0]
 800ee02:	4605      	mov	r5, r0
 800ee04:	4630      	mov	r0, r6
 800ee06:	f000 fd6b 	bl	800f8e0 <_malloc_r>
 800ee0a:	b948      	cbnz	r0, 800ee20 <__smakebuf_r+0x44>
 800ee0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee10:	059a      	lsls	r2, r3, #22
 800ee12:	d4ef      	bmi.n	800edf4 <__smakebuf_r+0x18>
 800ee14:	f023 0303 	bic.w	r3, r3, #3
 800ee18:	f043 0302 	orr.w	r3, r3, #2
 800ee1c:	81a3      	strh	r3, [r4, #12]
 800ee1e:	e7e3      	b.n	800ede8 <__smakebuf_r+0xc>
 800ee20:	4b0d      	ldr	r3, [pc, #52]	; (800ee58 <__smakebuf_r+0x7c>)
 800ee22:	62b3      	str	r3, [r6, #40]	; 0x28
 800ee24:	89a3      	ldrh	r3, [r4, #12]
 800ee26:	6020      	str	r0, [r4, #0]
 800ee28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee2c:	81a3      	strh	r3, [r4, #12]
 800ee2e:	9b00      	ldr	r3, [sp, #0]
 800ee30:	6163      	str	r3, [r4, #20]
 800ee32:	9b01      	ldr	r3, [sp, #4]
 800ee34:	6120      	str	r0, [r4, #16]
 800ee36:	b15b      	cbz	r3, 800ee50 <__smakebuf_r+0x74>
 800ee38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	f001 f93d 	bl	80100bc <_isatty_r>
 800ee42:	b128      	cbz	r0, 800ee50 <__smakebuf_r+0x74>
 800ee44:	89a3      	ldrh	r3, [r4, #12]
 800ee46:	f023 0303 	bic.w	r3, r3, #3
 800ee4a:	f043 0301 	orr.w	r3, r3, #1
 800ee4e:	81a3      	strh	r3, [r4, #12]
 800ee50:	89a0      	ldrh	r0, [r4, #12]
 800ee52:	4305      	orrs	r5, r0
 800ee54:	81a5      	strh	r5, [r4, #12]
 800ee56:	e7cd      	b.n	800edf4 <__smakebuf_r+0x18>
 800ee58:	0800e505 	.word	0x0800e505

0800ee5c <malloc>:
 800ee5c:	4b02      	ldr	r3, [pc, #8]	; (800ee68 <malloc+0xc>)
 800ee5e:	4601      	mov	r1, r0
 800ee60:	6818      	ldr	r0, [r3, #0]
 800ee62:	f000 bd3d 	b.w	800f8e0 <_malloc_r>
 800ee66:	bf00      	nop
 800ee68:	20000064 	.word	0x20000064

0800ee6c <__ascii_mbtowc>:
 800ee6c:	b082      	sub	sp, #8
 800ee6e:	b901      	cbnz	r1, 800ee72 <__ascii_mbtowc+0x6>
 800ee70:	a901      	add	r1, sp, #4
 800ee72:	b142      	cbz	r2, 800ee86 <__ascii_mbtowc+0x1a>
 800ee74:	b14b      	cbz	r3, 800ee8a <__ascii_mbtowc+0x1e>
 800ee76:	7813      	ldrb	r3, [r2, #0]
 800ee78:	600b      	str	r3, [r1, #0]
 800ee7a:	7812      	ldrb	r2, [r2, #0]
 800ee7c:	1e10      	subs	r0, r2, #0
 800ee7e:	bf18      	it	ne
 800ee80:	2001      	movne	r0, #1
 800ee82:	b002      	add	sp, #8
 800ee84:	4770      	bx	lr
 800ee86:	4610      	mov	r0, r2
 800ee88:	e7fb      	b.n	800ee82 <__ascii_mbtowc+0x16>
 800ee8a:	f06f 0001 	mvn.w	r0, #1
 800ee8e:	e7f8      	b.n	800ee82 <__ascii_mbtowc+0x16>

0800ee90 <memcpy>:
 800ee90:	440a      	add	r2, r1
 800ee92:	4291      	cmp	r1, r2
 800ee94:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee98:	d100      	bne.n	800ee9c <memcpy+0xc>
 800ee9a:	4770      	bx	lr
 800ee9c:	b510      	push	{r4, lr}
 800ee9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eea6:	4291      	cmp	r1, r2
 800eea8:	d1f9      	bne.n	800ee9e <memcpy+0xe>
 800eeaa:	bd10      	pop	{r4, pc}

0800eeac <_Balloc>:
 800eeac:	b570      	push	{r4, r5, r6, lr}
 800eeae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	460d      	mov	r5, r1
 800eeb4:	b976      	cbnz	r6, 800eed4 <_Balloc+0x28>
 800eeb6:	2010      	movs	r0, #16
 800eeb8:	f7ff ffd0 	bl	800ee5c <malloc>
 800eebc:	4602      	mov	r2, r0
 800eebe:	6260      	str	r0, [r4, #36]	; 0x24
 800eec0:	b920      	cbnz	r0, 800eecc <_Balloc+0x20>
 800eec2:	4b18      	ldr	r3, [pc, #96]	; (800ef24 <_Balloc+0x78>)
 800eec4:	4818      	ldr	r0, [pc, #96]	; (800ef28 <_Balloc+0x7c>)
 800eec6:	2166      	movs	r1, #102	; 0x66
 800eec8:	f001 f8a6 	bl	8010018 <__assert_func>
 800eecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eed0:	6006      	str	r6, [r0, #0]
 800eed2:	60c6      	str	r6, [r0, #12]
 800eed4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eed6:	68f3      	ldr	r3, [r6, #12]
 800eed8:	b183      	cbz	r3, 800eefc <_Balloc+0x50>
 800eeda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eee2:	b9b8      	cbnz	r0, 800ef14 <_Balloc+0x68>
 800eee4:	2101      	movs	r1, #1
 800eee6:	fa01 f605 	lsl.w	r6, r1, r5
 800eeea:	1d72      	adds	r2, r6, #5
 800eeec:	0092      	lsls	r2, r2, #2
 800eeee:	4620      	mov	r0, r4
 800eef0:	f000 fc97 	bl	800f822 <_calloc_r>
 800eef4:	b160      	cbz	r0, 800ef10 <_Balloc+0x64>
 800eef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eefa:	e00e      	b.n	800ef1a <_Balloc+0x6e>
 800eefc:	2221      	movs	r2, #33	; 0x21
 800eefe:	2104      	movs	r1, #4
 800ef00:	4620      	mov	r0, r4
 800ef02:	f000 fc8e 	bl	800f822 <_calloc_r>
 800ef06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef08:	60f0      	str	r0, [r6, #12]
 800ef0a:	68db      	ldr	r3, [r3, #12]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d1e4      	bne.n	800eeda <_Balloc+0x2e>
 800ef10:	2000      	movs	r0, #0
 800ef12:	bd70      	pop	{r4, r5, r6, pc}
 800ef14:	6802      	ldr	r2, [r0, #0]
 800ef16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ef1a:	2300      	movs	r3, #0
 800ef1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef20:	e7f7      	b.n	800ef12 <_Balloc+0x66>
 800ef22:	bf00      	nop
 800ef24:	080148e6 	.word	0x080148e6
 800ef28:	08014a50 	.word	0x08014a50

0800ef2c <_Bfree>:
 800ef2c:	b570      	push	{r4, r5, r6, lr}
 800ef2e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ef30:	4605      	mov	r5, r0
 800ef32:	460c      	mov	r4, r1
 800ef34:	b976      	cbnz	r6, 800ef54 <_Bfree+0x28>
 800ef36:	2010      	movs	r0, #16
 800ef38:	f7ff ff90 	bl	800ee5c <malloc>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	6268      	str	r0, [r5, #36]	; 0x24
 800ef40:	b920      	cbnz	r0, 800ef4c <_Bfree+0x20>
 800ef42:	4b09      	ldr	r3, [pc, #36]	; (800ef68 <_Bfree+0x3c>)
 800ef44:	4809      	ldr	r0, [pc, #36]	; (800ef6c <_Bfree+0x40>)
 800ef46:	218a      	movs	r1, #138	; 0x8a
 800ef48:	f001 f866 	bl	8010018 <__assert_func>
 800ef4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ef50:	6006      	str	r6, [r0, #0]
 800ef52:	60c6      	str	r6, [r0, #12]
 800ef54:	b13c      	cbz	r4, 800ef66 <_Bfree+0x3a>
 800ef56:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ef58:	6862      	ldr	r2, [r4, #4]
 800ef5a:	68db      	ldr	r3, [r3, #12]
 800ef5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef60:	6021      	str	r1, [r4, #0]
 800ef62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ef66:	bd70      	pop	{r4, r5, r6, pc}
 800ef68:	080148e6 	.word	0x080148e6
 800ef6c:	08014a50 	.word	0x08014a50

0800ef70 <__multadd>:
 800ef70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef74:	690e      	ldr	r6, [r1, #16]
 800ef76:	4607      	mov	r7, r0
 800ef78:	4698      	mov	r8, r3
 800ef7a:	460c      	mov	r4, r1
 800ef7c:	f101 0014 	add.w	r0, r1, #20
 800ef80:	2300      	movs	r3, #0
 800ef82:	6805      	ldr	r5, [r0, #0]
 800ef84:	b2a9      	uxth	r1, r5
 800ef86:	fb02 8101 	mla	r1, r2, r1, r8
 800ef8a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800ef8e:	0c2d      	lsrs	r5, r5, #16
 800ef90:	fb02 c505 	mla	r5, r2, r5, ip
 800ef94:	b289      	uxth	r1, r1
 800ef96:	3301      	adds	r3, #1
 800ef98:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800ef9c:	429e      	cmp	r6, r3
 800ef9e:	f840 1b04 	str.w	r1, [r0], #4
 800efa2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800efa6:	dcec      	bgt.n	800ef82 <__multadd+0x12>
 800efa8:	f1b8 0f00 	cmp.w	r8, #0
 800efac:	d022      	beq.n	800eff4 <__multadd+0x84>
 800efae:	68a3      	ldr	r3, [r4, #8]
 800efb0:	42b3      	cmp	r3, r6
 800efb2:	dc19      	bgt.n	800efe8 <__multadd+0x78>
 800efb4:	6861      	ldr	r1, [r4, #4]
 800efb6:	4638      	mov	r0, r7
 800efb8:	3101      	adds	r1, #1
 800efba:	f7ff ff77 	bl	800eeac <_Balloc>
 800efbe:	4605      	mov	r5, r0
 800efc0:	b928      	cbnz	r0, 800efce <__multadd+0x5e>
 800efc2:	4602      	mov	r2, r0
 800efc4:	4b0d      	ldr	r3, [pc, #52]	; (800effc <__multadd+0x8c>)
 800efc6:	480e      	ldr	r0, [pc, #56]	; (800f000 <__multadd+0x90>)
 800efc8:	21b5      	movs	r1, #181	; 0xb5
 800efca:	f001 f825 	bl	8010018 <__assert_func>
 800efce:	6922      	ldr	r2, [r4, #16]
 800efd0:	3202      	adds	r2, #2
 800efd2:	f104 010c 	add.w	r1, r4, #12
 800efd6:	0092      	lsls	r2, r2, #2
 800efd8:	300c      	adds	r0, #12
 800efda:	f7ff ff59 	bl	800ee90 <memcpy>
 800efde:	4621      	mov	r1, r4
 800efe0:	4638      	mov	r0, r7
 800efe2:	f7ff ffa3 	bl	800ef2c <_Bfree>
 800efe6:	462c      	mov	r4, r5
 800efe8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800efec:	3601      	adds	r6, #1
 800efee:	f8c3 8014 	str.w	r8, [r3, #20]
 800eff2:	6126      	str	r6, [r4, #16]
 800eff4:	4620      	mov	r0, r4
 800eff6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800effa:	bf00      	nop
 800effc:	0801495c 	.word	0x0801495c
 800f000:	08014a50 	.word	0x08014a50

0800f004 <__s2b>:
 800f004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f008:	460c      	mov	r4, r1
 800f00a:	4615      	mov	r5, r2
 800f00c:	461f      	mov	r7, r3
 800f00e:	2209      	movs	r2, #9
 800f010:	3308      	adds	r3, #8
 800f012:	4606      	mov	r6, r0
 800f014:	fb93 f3f2 	sdiv	r3, r3, r2
 800f018:	2100      	movs	r1, #0
 800f01a:	2201      	movs	r2, #1
 800f01c:	429a      	cmp	r2, r3
 800f01e:	db09      	blt.n	800f034 <__s2b+0x30>
 800f020:	4630      	mov	r0, r6
 800f022:	f7ff ff43 	bl	800eeac <_Balloc>
 800f026:	b940      	cbnz	r0, 800f03a <__s2b+0x36>
 800f028:	4602      	mov	r2, r0
 800f02a:	4b19      	ldr	r3, [pc, #100]	; (800f090 <__s2b+0x8c>)
 800f02c:	4819      	ldr	r0, [pc, #100]	; (800f094 <__s2b+0x90>)
 800f02e:	21ce      	movs	r1, #206	; 0xce
 800f030:	f000 fff2 	bl	8010018 <__assert_func>
 800f034:	0052      	lsls	r2, r2, #1
 800f036:	3101      	adds	r1, #1
 800f038:	e7f0      	b.n	800f01c <__s2b+0x18>
 800f03a:	9b08      	ldr	r3, [sp, #32]
 800f03c:	6143      	str	r3, [r0, #20]
 800f03e:	2d09      	cmp	r5, #9
 800f040:	f04f 0301 	mov.w	r3, #1
 800f044:	6103      	str	r3, [r0, #16]
 800f046:	dd16      	ble.n	800f076 <__s2b+0x72>
 800f048:	f104 0909 	add.w	r9, r4, #9
 800f04c:	46c8      	mov	r8, r9
 800f04e:	442c      	add	r4, r5
 800f050:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f054:	4601      	mov	r1, r0
 800f056:	3b30      	subs	r3, #48	; 0x30
 800f058:	220a      	movs	r2, #10
 800f05a:	4630      	mov	r0, r6
 800f05c:	f7ff ff88 	bl	800ef70 <__multadd>
 800f060:	45a0      	cmp	r8, r4
 800f062:	d1f5      	bne.n	800f050 <__s2b+0x4c>
 800f064:	f1a5 0408 	sub.w	r4, r5, #8
 800f068:	444c      	add	r4, r9
 800f06a:	1b2d      	subs	r5, r5, r4
 800f06c:	1963      	adds	r3, r4, r5
 800f06e:	42bb      	cmp	r3, r7
 800f070:	db04      	blt.n	800f07c <__s2b+0x78>
 800f072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f076:	340a      	adds	r4, #10
 800f078:	2509      	movs	r5, #9
 800f07a:	e7f6      	b.n	800f06a <__s2b+0x66>
 800f07c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f080:	4601      	mov	r1, r0
 800f082:	3b30      	subs	r3, #48	; 0x30
 800f084:	220a      	movs	r2, #10
 800f086:	4630      	mov	r0, r6
 800f088:	f7ff ff72 	bl	800ef70 <__multadd>
 800f08c:	e7ee      	b.n	800f06c <__s2b+0x68>
 800f08e:	bf00      	nop
 800f090:	0801495c 	.word	0x0801495c
 800f094:	08014a50 	.word	0x08014a50

0800f098 <__hi0bits>:
 800f098:	0c03      	lsrs	r3, r0, #16
 800f09a:	041b      	lsls	r3, r3, #16
 800f09c:	b9d3      	cbnz	r3, 800f0d4 <__hi0bits+0x3c>
 800f09e:	0400      	lsls	r0, r0, #16
 800f0a0:	2310      	movs	r3, #16
 800f0a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f0a6:	bf04      	itt	eq
 800f0a8:	0200      	lsleq	r0, r0, #8
 800f0aa:	3308      	addeq	r3, #8
 800f0ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f0b0:	bf04      	itt	eq
 800f0b2:	0100      	lsleq	r0, r0, #4
 800f0b4:	3304      	addeq	r3, #4
 800f0b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f0ba:	bf04      	itt	eq
 800f0bc:	0080      	lsleq	r0, r0, #2
 800f0be:	3302      	addeq	r3, #2
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	db05      	blt.n	800f0d0 <__hi0bits+0x38>
 800f0c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f0c8:	f103 0301 	add.w	r3, r3, #1
 800f0cc:	bf08      	it	eq
 800f0ce:	2320      	moveq	r3, #32
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	4770      	bx	lr
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	e7e4      	b.n	800f0a2 <__hi0bits+0xa>

0800f0d8 <__lo0bits>:
 800f0d8:	6803      	ldr	r3, [r0, #0]
 800f0da:	f013 0207 	ands.w	r2, r3, #7
 800f0de:	4601      	mov	r1, r0
 800f0e0:	d00b      	beq.n	800f0fa <__lo0bits+0x22>
 800f0e2:	07da      	lsls	r2, r3, #31
 800f0e4:	d424      	bmi.n	800f130 <__lo0bits+0x58>
 800f0e6:	0798      	lsls	r0, r3, #30
 800f0e8:	bf49      	itett	mi
 800f0ea:	085b      	lsrmi	r3, r3, #1
 800f0ec:	089b      	lsrpl	r3, r3, #2
 800f0ee:	2001      	movmi	r0, #1
 800f0f0:	600b      	strmi	r3, [r1, #0]
 800f0f2:	bf5c      	itt	pl
 800f0f4:	600b      	strpl	r3, [r1, #0]
 800f0f6:	2002      	movpl	r0, #2
 800f0f8:	4770      	bx	lr
 800f0fa:	b298      	uxth	r0, r3
 800f0fc:	b9b0      	cbnz	r0, 800f12c <__lo0bits+0x54>
 800f0fe:	0c1b      	lsrs	r3, r3, #16
 800f100:	2010      	movs	r0, #16
 800f102:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f106:	bf04      	itt	eq
 800f108:	0a1b      	lsreq	r3, r3, #8
 800f10a:	3008      	addeq	r0, #8
 800f10c:	071a      	lsls	r2, r3, #28
 800f10e:	bf04      	itt	eq
 800f110:	091b      	lsreq	r3, r3, #4
 800f112:	3004      	addeq	r0, #4
 800f114:	079a      	lsls	r2, r3, #30
 800f116:	bf04      	itt	eq
 800f118:	089b      	lsreq	r3, r3, #2
 800f11a:	3002      	addeq	r0, #2
 800f11c:	07da      	lsls	r2, r3, #31
 800f11e:	d403      	bmi.n	800f128 <__lo0bits+0x50>
 800f120:	085b      	lsrs	r3, r3, #1
 800f122:	f100 0001 	add.w	r0, r0, #1
 800f126:	d005      	beq.n	800f134 <__lo0bits+0x5c>
 800f128:	600b      	str	r3, [r1, #0]
 800f12a:	4770      	bx	lr
 800f12c:	4610      	mov	r0, r2
 800f12e:	e7e8      	b.n	800f102 <__lo0bits+0x2a>
 800f130:	2000      	movs	r0, #0
 800f132:	4770      	bx	lr
 800f134:	2020      	movs	r0, #32
 800f136:	4770      	bx	lr

0800f138 <__i2b>:
 800f138:	b510      	push	{r4, lr}
 800f13a:	460c      	mov	r4, r1
 800f13c:	2101      	movs	r1, #1
 800f13e:	f7ff feb5 	bl	800eeac <_Balloc>
 800f142:	4602      	mov	r2, r0
 800f144:	b928      	cbnz	r0, 800f152 <__i2b+0x1a>
 800f146:	4b05      	ldr	r3, [pc, #20]	; (800f15c <__i2b+0x24>)
 800f148:	4805      	ldr	r0, [pc, #20]	; (800f160 <__i2b+0x28>)
 800f14a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f14e:	f000 ff63 	bl	8010018 <__assert_func>
 800f152:	2301      	movs	r3, #1
 800f154:	6144      	str	r4, [r0, #20]
 800f156:	6103      	str	r3, [r0, #16]
 800f158:	bd10      	pop	{r4, pc}
 800f15a:	bf00      	nop
 800f15c:	0801495c 	.word	0x0801495c
 800f160:	08014a50 	.word	0x08014a50

0800f164 <__multiply>:
 800f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f168:	4614      	mov	r4, r2
 800f16a:	690a      	ldr	r2, [r1, #16]
 800f16c:	6923      	ldr	r3, [r4, #16]
 800f16e:	429a      	cmp	r2, r3
 800f170:	bfb8      	it	lt
 800f172:	460b      	movlt	r3, r1
 800f174:	460d      	mov	r5, r1
 800f176:	bfbc      	itt	lt
 800f178:	4625      	movlt	r5, r4
 800f17a:	461c      	movlt	r4, r3
 800f17c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800f180:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f184:	68ab      	ldr	r3, [r5, #8]
 800f186:	6869      	ldr	r1, [r5, #4]
 800f188:	eb0a 0709 	add.w	r7, sl, r9
 800f18c:	42bb      	cmp	r3, r7
 800f18e:	b085      	sub	sp, #20
 800f190:	bfb8      	it	lt
 800f192:	3101      	addlt	r1, #1
 800f194:	f7ff fe8a 	bl	800eeac <_Balloc>
 800f198:	b930      	cbnz	r0, 800f1a8 <__multiply+0x44>
 800f19a:	4602      	mov	r2, r0
 800f19c:	4b42      	ldr	r3, [pc, #264]	; (800f2a8 <__multiply+0x144>)
 800f19e:	4843      	ldr	r0, [pc, #268]	; (800f2ac <__multiply+0x148>)
 800f1a0:	f240 115d 	movw	r1, #349	; 0x15d
 800f1a4:	f000 ff38 	bl	8010018 <__assert_func>
 800f1a8:	f100 0614 	add.w	r6, r0, #20
 800f1ac:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800f1b0:	4633      	mov	r3, r6
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	4543      	cmp	r3, r8
 800f1b6:	d31e      	bcc.n	800f1f6 <__multiply+0x92>
 800f1b8:	f105 0c14 	add.w	ip, r5, #20
 800f1bc:	f104 0314 	add.w	r3, r4, #20
 800f1c0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800f1c4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800f1c8:	9202      	str	r2, [sp, #8]
 800f1ca:	ebac 0205 	sub.w	r2, ip, r5
 800f1ce:	3a15      	subs	r2, #21
 800f1d0:	f022 0203 	bic.w	r2, r2, #3
 800f1d4:	3204      	adds	r2, #4
 800f1d6:	f105 0115 	add.w	r1, r5, #21
 800f1da:	458c      	cmp	ip, r1
 800f1dc:	bf38      	it	cc
 800f1de:	2204      	movcc	r2, #4
 800f1e0:	9201      	str	r2, [sp, #4]
 800f1e2:	9a02      	ldr	r2, [sp, #8]
 800f1e4:	9303      	str	r3, [sp, #12]
 800f1e6:	429a      	cmp	r2, r3
 800f1e8:	d808      	bhi.n	800f1fc <__multiply+0x98>
 800f1ea:	2f00      	cmp	r7, #0
 800f1ec:	dc55      	bgt.n	800f29a <__multiply+0x136>
 800f1ee:	6107      	str	r7, [r0, #16]
 800f1f0:	b005      	add	sp, #20
 800f1f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f6:	f843 2b04 	str.w	r2, [r3], #4
 800f1fa:	e7db      	b.n	800f1b4 <__multiply+0x50>
 800f1fc:	f8b3 a000 	ldrh.w	sl, [r3]
 800f200:	f1ba 0f00 	cmp.w	sl, #0
 800f204:	d020      	beq.n	800f248 <__multiply+0xe4>
 800f206:	f105 0e14 	add.w	lr, r5, #20
 800f20a:	46b1      	mov	r9, r6
 800f20c:	2200      	movs	r2, #0
 800f20e:	f85e 4b04 	ldr.w	r4, [lr], #4
 800f212:	f8d9 b000 	ldr.w	fp, [r9]
 800f216:	b2a1      	uxth	r1, r4
 800f218:	fa1f fb8b 	uxth.w	fp, fp
 800f21c:	fb0a b101 	mla	r1, sl, r1, fp
 800f220:	4411      	add	r1, r2
 800f222:	f8d9 2000 	ldr.w	r2, [r9]
 800f226:	0c24      	lsrs	r4, r4, #16
 800f228:	0c12      	lsrs	r2, r2, #16
 800f22a:	fb0a 2404 	mla	r4, sl, r4, r2
 800f22e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800f232:	b289      	uxth	r1, r1
 800f234:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800f238:	45f4      	cmp	ip, lr
 800f23a:	f849 1b04 	str.w	r1, [r9], #4
 800f23e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800f242:	d8e4      	bhi.n	800f20e <__multiply+0xaa>
 800f244:	9901      	ldr	r1, [sp, #4]
 800f246:	5072      	str	r2, [r6, r1]
 800f248:	9a03      	ldr	r2, [sp, #12]
 800f24a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f24e:	3304      	adds	r3, #4
 800f250:	f1b9 0f00 	cmp.w	r9, #0
 800f254:	d01f      	beq.n	800f296 <__multiply+0x132>
 800f256:	6834      	ldr	r4, [r6, #0]
 800f258:	f105 0114 	add.w	r1, r5, #20
 800f25c:	46b6      	mov	lr, r6
 800f25e:	f04f 0a00 	mov.w	sl, #0
 800f262:	880a      	ldrh	r2, [r1, #0]
 800f264:	f8be b002 	ldrh.w	fp, [lr, #2]
 800f268:	fb09 b202 	mla	r2, r9, r2, fp
 800f26c:	4492      	add	sl, r2
 800f26e:	b2a4      	uxth	r4, r4
 800f270:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800f274:	f84e 4b04 	str.w	r4, [lr], #4
 800f278:	f851 4b04 	ldr.w	r4, [r1], #4
 800f27c:	f8be 2000 	ldrh.w	r2, [lr]
 800f280:	0c24      	lsrs	r4, r4, #16
 800f282:	fb09 2404 	mla	r4, r9, r4, r2
 800f286:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800f28a:	458c      	cmp	ip, r1
 800f28c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f290:	d8e7      	bhi.n	800f262 <__multiply+0xfe>
 800f292:	9a01      	ldr	r2, [sp, #4]
 800f294:	50b4      	str	r4, [r6, r2]
 800f296:	3604      	adds	r6, #4
 800f298:	e7a3      	b.n	800f1e2 <__multiply+0x7e>
 800f29a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d1a5      	bne.n	800f1ee <__multiply+0x8a>
 800f2a2:	3f01      	subs	r7, #1
 800f2a4:	e7a1      	b.n	800f1ea <__multiply+0x86>
 800f2a6:	bf00      	nop
 800f2a8:	0801495c 	.word	0x0801495c
 800f2ac:	08014a50 	.word	0x08014a50

0800f2b0 <__pow5mult>:
 800f2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2b4:	4615      	mov	r5, r2
 800f2b6:	f012 0203 	ands.w	r2, r2, #3
 800f2ba:	4606      	mov	r6, r0
 800f2bc:	460f      	mov	r7, r1
 800f2be:	d007      	beq.n	800f2d0 <__pow5mult+0x20>
 800f2c0:	4c25      	ldr	r4, [pc, #148]	; (800f358 <__pow5mult+0xa8>)
 800f2c2:	3a01      	subs	r2, #1
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f2ca:	f7ff fe51 	bl	800ef70 <__multadd>
 800f2ce:	4607      	mov	r7, r0
 800f2d0:	10ad      	asrs	r5, r5, #2
 800f2d2:	d03d      	beq.n	800f350 <__pow5mult+0xa0>
 800f2d4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f2d6:	b97c      	cbnz	r4, 800f2f8 <__pow5mult+0x48>
 800f2d8:	2010      	movs	r0, #16
 800f2da:	f7ff fdbf 	bl	800ee5c <malloc>
 800f2de:	4602      	mov	r2, r0
 800f2e0:	6270      	str	r0, [r6, #36]	; 0x24
 800f2e2:	b928      	cbnz	r0, 800f2f0 <__pow5mult+0x40>
 800f2e4:	4b1d      	ldr	r3, [pc, #116]	; (800f35c <__pow5mult+0xac>)
 800f2e6:	481e      	ldr	r0, [pc, #120]	; (800f360 <__pow5mult+0xb0>)
 800f2e8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f2ec:	f000 fe94 	bl	8010018 <__assert_func>
 800f2f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f2f4:	6004      	str	r4, [r0, #0]
 800f2f6:	60c4      	str	r4, [r0, #12]
 800f2f8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f2fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f300:	b94c      	cbnz	r4, 800f316 <__pow5mult+0x66>
 800f302:	f240 2171 	movw	r1, #625	; 0x271
 800f306:	4630      	mov	r0, r6
 800f308:	f7ff ff16 	bl	800f138 <__i2b>
 800f30c:	2300      	movs	r3, #0
 800f30e:	f8c8 0008 	str.w	r0, [r8, #8]
 800f312:	4604      	mov	r4, r0
 800f314:	6003      	str	r3, [r0, #0]
 800f316:	f04f 0900 	mov.w	r9, #0
 800f31a:	07eb      	lsls	r3, r5, #31
 800f31c:	d50a      	bpl.n	800f334 <__pow5mult+0x84>
 800f31e:	4639      	mov	r1, r7
 800f320:	4622      	mov	r2, r4
 800f322:	4630      	mov	r0, r6
 800f324:	f7ff ff1e 	bl	800f164 <__multiply>
 800f328:	4639      	mov	r1, r7
 800f32a:	4680      	mov	r8, r0
 800f32c:	4630      	mov	r0, r6
 800f32e:	f7ff fdfd 	bl	800ef2c <_Bfree>
 800f332:	4647      	mov	r7, r8
 800f334:	106d      	asrs	r5, r5, #1
 800f336:	d00b      	beq.n	800f350 <__pow5mult+0xa0>
 800f338:	6820      	ldr	r0, [r4, #0]
 800f33a:	b938      	cbnz	r0, 800f34c <__pow5mult+0x9c>
 800f33c:	4622      	mov	r2, r4
 800f33e:	4621      	mov	r1, r4
 800f340:	4630      	mov	r0, r6
 800f342:	f7ff ff0f 	bl	800f164 <__multiply>
 800f346:	6020      	str	r0, [r4, #0]
 800f348:	f8c0 9000 	str.w	r9, [r0]
 800f34c:	4604      	mov	r4, r0
 800f34e:	e7e4      	b.n	800f31a <__pow5mult+0x6a>
 800f350:	4638      	mov	r0, r7
 800f352:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f356:	bf00      	nop
 800f358:	08014ba0 	.word	0x08014ba0
 800f35c:	080148e6 	.word	0x080148e6
 800f360:	08014a50 	.word	0x08014a50

0800f364 <__lshift>:
 800f364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f368:	460c      	mov	r4, r1
 800f36a:	6849      	ldr	r1, [r1, #4]
 800f36c:	6923      	ldr	r3, [r4, #16]
 800f36e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f372:	68a3      	ldr	r3, [r4, #8]
 800f374:	4607      	mov	r7, r0
 800f376:	4691      	mov	r9, r2
 800f378:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f37c:	f108 0601 	add.w	r6, r8, #1
 800f380:	42b3      	cmp	r3, r6
 800f382:	db0b      	blt.n	800f39c <__lshift+0x38>
 800f384:	4638      	mov	r0, r7
 800f386:	f7ff fd91 	bl	800eeac <_Balloc>
 800f38a:	4605      	mov	r5, r0
 800f38c:	b948      	cbnz	r0, 800f3a2 <__lshift+0x3e>
 800f38e:	4602      	mov	r2, r0
 800f390:	4b28      	ldr	r3, [pc, #160]	; (800f434 <__lshift+0xd0>)
 800f392:	4829      	ldr	r0, [pc, #164]	; (800f438 <__lshift+0xd4>)
 800f394:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f398:	f000 fe3e 	bl	8010018 <__assert_func>
 800f39c:	3101      	adds	r1, #1
 800f39e:	005b      	lsls	r3, r3, #1
 800f3a0:	e7ee      	b.n	800f380 <__lshift+0x1c>
 800f3a2:	2300      	movs	r3, #0
 800f3a4:	f100 0114 	add.w	r1, r0, #20
 800f3a8:	f100 0210 	add.w	r2, r0, #16
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	4553      	cmp	r3, sl
 800f3b0:	db33      	blt.n	800f41a <__lshift+0xb6>
 800f3b2:	6920      	ldr	r0, [r4, #16]
 800f3b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f3b8:	f104 0314 	add.w	r3, r4, #20
 800f3bc:	f019 091f 	ands.w	r9, r9, #31
 800f3c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f3c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f3c8:	d02b      	beq.n	800f422 <__lshift+0xbe>
 800f3ca:	f1c9 0e20 	rsb	lr, r9, #32
 800f3ce:	468a      	mov	sl, r1
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	6818      	ldr	r0, [r3, #0]
 800f3d4:	fa00 f009 	lsl.w	r0, r0, r9
 800f3d8:	4302      	orrs	r2, r0
 800f3da:	f84a 2b04 	str.w	r2, [sl], #4
 800f3de:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3e2:	459c      	cmp	ip, r3
 800f3e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800f3e8:	d8f3      	bhi.n	800f3d2 <__lshift+0x6e>
 800f3ea:	ebac 0304 	sub.w	r3, ip, r4
 800f3ee:	3b15      	subs	r3, #21
 800f3f0:	f023 0303 	bic.w	r3, r3, #3
 800f3f4:	3304      	adds	r3, #4
 800f3f6:	f104 0015 	add.w	r0, r4, #21
 800f3fa:	4584      	cmp	ip, r0
 800f3fc:	bf38      	it	cc
 800f3fe:	2304      	movcc	r3, #4
 800f400:	50ca      	str	r2, [r1, r3]
 800f402:	b10a      	cbz	r2, 800f408 <__lshift+0xa4>
 800f404:	f108 0602 	add.w	r6, r8, #2
 800f408:	3e01      	subs	r6, #1
 800f40a:	4638      	mov	r0, r7
 800f40c:	612e      	str	r6, [r5, #16]
 800f40e:	4621      	mov	r1, r4
 800f410:	f7ff fd8c 	bl	800ef2c <_Bfree>
 800f414:	4628      	mov	r0, r5
 800f416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f41a:	f842 0f04 	str.w	r0, [r2, #4]!
 800f41e:	3301      	adds	r3, #1
 800f420:	e7c5      	b.n	800f3ae <__lshift+0x4a>
 800f422:	3904      	subs	r1, #4
 800f424:	f853 2b04 	ldr.w	r2, [r3], #4
 800f428:	f841 2f04 	str.w	r2, [r1, #4]!
 800f42c:	459c      	cmp	ip, r3
 800f42e:	d8f9      	bhi.n	800f424 <__lshift+0xc0>
 800f430:	e7ea      	b.n	800f408 <__lshift+0xa4>
 800f432:	bf00      	nop
 800f434:	0801495c 	.word	0x0801495c
 800f438:	08014a50 	.word	0x08014a50

0800f43c <__mcmp>:
 800f43c:	b530      	push	{r4, r5, lr}
 800f43e:	6902      	ldr	r2, [r0, #16]
 800f440:	690c      	ldr	r4, [r1, #16]
 800f442:	1b12      	subs	r2, r2, r4
 800f444:	d10e      	bne.n	800f464 <__mcmp+0x28>
 800f446:	f100 0314 	add.w	r3, r0, #20
 800f44a:	3114      	adds	r1, #20
 800f44c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f450:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f454:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f458:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f45c:	42a5      	cmp	r5, r4
 800f45e:	d003      	beq.n	800f468 <__mcmp+0x2c>
 800f460:	d305      	bcc.n	800f46e <__mcmp+0x32>
 800f462:	2201      	movs	r2, #1
 800f464:	4610      	mov	r0, r2
 800f466:	bd30      	pop	{r4, r5, pc}
 800f468:	4283      	cmp	r3, r0
 800f46a:	d3f3      	bcc.n	800f454 <__mcmp+0x18>
 800f46c:	e7fa      	b.n	800f464 <__mcmp+0x28>
 800f46e:	f04f 32ff 	mov.w	r2, #4294967295
 800f472:	e7f7      	b.n	800f464 <__mcmp+0x28>

0800f474 <__mdiff>:
 800f474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f478:	460c      	mov	r4, r1
 800f47a:	4606      	mov	r6, r0
 800f47c:	4611      	mov	r1, r2
 800f47e:	4620      	mov	r0, r4
 800f480:	4617      	mov	r7, r2
 800f482:	f7ff ffdb 	bl	800f43c <__mcmp>
 800f486:	1e05      	subs	r5, r0, #0
 800f488:	d110      	bne.n	800f4ac <__mdiff+0x38>
 800f48a:	4629      	mov	r1, r5
 800f48c:	4630      	mov	r0, r6
 800f48e:	f7ff fd0d 	bl	800eeac <_Balloc>
 800f492:	b930      	cbnz	r0, 800f4a2 <__mdiff+0x2e>
 800f494:	4b39      	ldr	r3, [pc, #228]	; (800f57c <__mdiff+0x108>)
 800f496:	4602      	mov	r2, r0
 800f498:	f240 2132 	movw	r1, #562	; 0x232
 800f49c:	4838      	ldr	r0, [pc, #224]	; (800f580 <__mdiff+0x10c>)
 800f49e:	f000 fdbb 	bl	8010018 <__assert_func>
 800f4a2:	2301      	movs	r3, #1
 800f4a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f4a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4ac:	bfa4      	itt	ge
 800f4ae:	463b      	movge	r3, r7
 800f4b0:	4627      	movge	r7, r4
 800f4b2:	4630      	mov	r0, r6
 800f4b4:	6879      	ldr	r1, [r7, #4]
 800f4b6:	bfa6      	itte	ge
 800f4b8:	461c      	movge	r4, r3
 800f4ba:	2500      	movge	r5, #0
 800f4bc:	2501      	movlt	r5, #1
 800f4be:	f7ff fcf5 	bl	800eeac <_Balloc>
 800f4c2:	b920      	cbnz	r0, 800f4ce <__mdiff+0x5a>
 800f4c4:	4b2d      	ldr	r3, [pc, #180]	; (800f57c <__mdiff+0x108>)
 800f4c6:	4602      	mov	r2, r0
 800f4c8:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f4cc:	e7e6      	b.n	800f49c <__mdiff+0x28>
 800f4ce:	693e      	ldr	r6, [r7, #16]
 800f4d0:	60c5      	str	r5, [r0, #12]
 800f4d2:	6925      	ldr	r5, [r4, #16]
 800f4d4:	f107 0114 	add.w	r1, r7, #20
 800f4d8:	f104 0914 	add.w	r9, r4, #20
 800f4dc:	f100 0e14 	add.w	lr, r0, #20
 800f4e0:	f107 0210 	add.w	r2, r7, #16
 800f4e4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f4e8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f4ec:	46f2      	mov	sl, lr
 800f4ee:	2700      	movs	r7, #0
 800f4f0:	f859 3b04 	ldr.w	r3, [r9], #4
 800f4f4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f4f8:	fa1f f883 	uxth.w	r8, r3
 800f4fc:	fa17 f78b 	uxtah	r7, r7, fp
 800f500:	0c1b      	lsrs	r3, r3, #16
 800f502:	eba7 0808 	sub.w	r8, r7, r8
 800f506:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f50a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f50e:	fa1f f888 	uxth.w	r8, r8
 800f512:	141f      	asrs	r7, r3, #16
 800f514:	454d      	cmp	r5, r9
 800f516:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f51a:	f84a 3b04 	str.w	r3, [sl], #4
 800f51e:	d8e7      	bhi.n	800f4f0 <__mdiff+0x7c>
 800f520:	1b2b      	subs	r3, r5, r4
 800f522:	3b15      	subs	r3, #21
 800f524:	f023 0303 	bic.w	r3, r3, #3
 800f528:	3304      	adds	r3, #4
 800f52a:	3415      	adds	r4, #21
 800f52c:	42a5      	cmp	r5, r4
 800f52e:	bf38      	it	cc
 800f530:	2304      	movcc	r3, #4
 800f532:	4419      	add	r1, r3
 800f534:	4473      	add	r3, lr
 800f536:	469e      	mov	lr, r3
 800f538:	460d      	mov	r5, r1
 800f53a:	4565      	cmp	r5, ip
 800f53c:	d30e      	bcc.n	800f55c <__mdiff+0xe8>
 800f53e:	f10c 0203 	add.w	r2, ip, #3
 800f542:	1a52      	subs	r2, r2, r1
 800f544:	f022 0203 	bic.w	r2, r2, #3
 800f548:	3903      	subs	r1, #3
 800f54a:	458c      	cmp	ip, r1
 800f54c:	bf38      	it	cc
 800f54e:	2200      	movcc	r2, #0
 800f550:	441a      	add	r2, r3
 800f552:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f556:	b17b      	cbz	r3, 800f578 <__mdiff+0x104>
 800f558:	6106      	str	r6, [r0, #16]
 800f55a:	e7a5      	b.n	800f4a8 <__mdiff+0x34>
 800f55c:	f855 8b04 	ldr.w	r8, [r5], #4
 800f560:	fa17 f488 	uxtah	r4, r7, r8
 800f564:	1422      	asrs	r2, r4, #16
 800f566:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f56a:	b2a4      	uxth	r4, r4
 800f56c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f570:	f84e 4b04 	str.w	r4, [lr], #4
 800f574:	1417      	asrs	r7, r2, #16
 800f576:	e7e0      	b.n	800f53a <__mdiff+0xc6>
 800f578:	3e01      	subs	r6, #1
 800f57a:	e7ea      	b.n	800f552 <__mdiff+0xde>
 800f57c:	0801495c 	.word	0x0801495c
 800f580:	08014a50 	.word	0x08014a50

0800f584 <__ulp>:
 800f584:	b082      	sub	sp, #8
 800f586:	ed8d 0b00 	vstr	d0, [sp]
 800f58a:	9b01      	ldr	r3, [sp, #4]
 800f58c:	4912      	ldr	r1, [pc, #72]	; (800f5d8 <__ulp+0x54>)
 800f58e:	4019      	ands	r1, r3
 800f590:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f594:	2900      	cmp	r1, #0
 800f596:	dd05      	ble.n	800f5a4 <__ulp+0x20>
 800f598:	2200      	movs	r2, #0
 800f59a:	460b      	mov	r3, r1
 800f59c:	ec43 2b10 	vmov	d0, r2, r3
 800f5a0:	b002      	add	sp, #8
 800f5a2:	4770      	bx	lr
 800f5a4:	4249      	negs	r1, r1
 800f5a6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f5aa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f5ae:	f04f 0200 	mov.w	r2, #0
 800f5b2:	f04f 0300 	mov.w	r3, #0
 800f5b6:	da04      	bge.n	800f5c2 <__ulp+0x3e>
 800f5b8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f5bc:	fa41 f300 	asr.w	r3, r1, r0
 800f5c0:	e7ec      	b.n	800f59c <__ulp+0x18>
 800f5c2:	f1a0 0114 	sub.w	r1, r0, #20
 800f5c6:	291e      	cmp	r1, #30
 800f5c8:	bfda      	itte	le
 800f5ca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f5ce:	fa20 f101 	lsrle.w	r1, r0, r1
 800f5d2:	2101      	movgt	r1, #1
 800f5d4:	460a      	mov	r2, r1
 800f5d6:	e7e1      	b.n	800f59c <__ulp+0x18>
 800f5d8:	7ff00000 	.word	0x7ff00000

0800f5dc <__b2d>:
 800f5dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5de:	6905      	ldr	r5, [r0, #16]
 800f5e0:	f100 0714 	add.w	r7, r0, #20
 800f5e4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f5e8:	1f2e      	subs	r6, r5, #4
 800f5ea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	f7ff fd52 	bl	800f098 <__hi0bits>
 800f5f4:	f1c0 0320 	rsb	r3, r0, #32
 800f5f8:	280a      	cmp	r0, #10
 800f5fa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f678 <__b2d+0x9c>
 800f5fe:	600b      	str	r3, [r1, #0]
 800f600:	dc14      	bgt.n	800f62c <__b2d+0x50>
 800f602:	f1c0 0e0b 	rsb	lr, r0, #11
 800f606:	fa24 f10e 	lsr.w	r1, r4, lr
 800f60a:	42b7      	cmp	r7, r6
 800f60c:	ea41 030c 	orr.w	r3, r1, ip
 800f610:	bf34      	ite	cc
 800f612:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f616:	2100      	movcs	r1, #0
 800f618:	3015      	adds	r0, #21
 800f61a:	fa04 f000 	lsl.w	r0, r4, r0
 800f61e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f622:	ea40 0201 	orr.w	r2, r0, r1
 800f626:	ec43 2b10 	vmov	d0, r2, r3
 800f62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f62c:	42b7      	cmp	r7, r6
 800f62e:	bf3a      	itte	cc
 800f630:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f634:	f1a5 0608 	subcc.w	r6, r5, #8
 800f638:	2100      	movcs	r1, #0
 800f63a:	380b      	subs	r0, #11
 800f63c:	d017      	beq.n	800f66e <__b2d+0x92>
 800f63e:	f1c0 0c20 	rsb	ip, r0, #32
 800f642:	fa04 f500 	lsl.w	r5, r4, r0
 800f646:	42be      	cmp	r6, r7
 800f648:	fa21 f40c 	lsr.w	r4, r1, ip
 800f64c:	ea45 0504 	orr.w	r5, r5, r4
 800f650:	bf8c      	ite	hi
 800f652:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f656:	2400      	movls	r4, #0
 800f658:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f65c:	fa01 f000 	lsl.w	r0, r1, r0
 800f660:	fa24 f40c 	lsr.w	r4, r4, ip
 800f664:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f668:	ea40 0204 	orr.w	r2, r0, r4
 800f66c:	e7db      	b.n	800f626 <__b2d+0x4a>
 800f66e:	ea44 030c 	orr.w	r3, r4, ip
 800f672:	460a      	mov	r2, r1
 800f674:	e7d7      	b.n	800f626 <__b2d+0x4a>
 800f676:	bf00      	nop
 800f678:	3ff00000 	.word	0x3ff00000

0800f67c <__d2b>:
 800f67c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f680:	4689      	mov	r9, r1
 800f682:	2101      	movs	r1, #1
 800f684:	ec57 6b10 	vmov	r6, r7, d0
 800f688:	4690      	mov	r8, r2
 800f68a:	f7ff fc0f 	bl	800eeac <_Balloc>
 800f68e:	4604      	mov	r4, r0
 800f690:	b930      	cbnz	r0, 800f6a0 <__d2b+0x24>
 800f692:	4602      	mov	r2, r0
 800f694:	4b25      	ldr	r3, [pc, #148]	; (800f72c <__d2b+0xb0>)
 800f696:	4826      	ldr	r0, [pc, #152]	; (800f730 <__d2b+0xb4>)
 800f698:	f240 310a 	movw	r1, #778	; 0x30a
 800f69c:	f000 fcbc 	bl	8010018 <__assert_func>
 800f6a0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f6a4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f6a8:	bb35      	cbnz	r5, 800f6f8 <__d2b+0x7c>
 800f6aa:	2e00      	cmp	r6, #0
 800f6ac:	9301      	str	r3, [sp, #4]
 800f6ae:	d028      	beq.n	800f702 <__d2b+0x86>
 800f6b0:	4668      	mov	r0, sp
 800f6b2:	9600      	str	r6, [sp, #0]
 800f6b4:	f7ff fd10 	bl	800f0d8 <__lo0bits>
 800f6b8:	9900      	ldr	r1, [sp, #0]
 800f6ba:	b300      	cbz	r0, 800f6fe <__d2b+0x82>
 800f6bc:	9a01      	ldr	r2, [sp, #4]
 800f6be:	f1c0 0320 	rsb	r3, r0, #32
 800f6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800f6c6:	430b      	orrs	r3, r1
 800f6c8:	40c2      	lsrs	r2, r0
 800f6ca:	6163      	str	r3, [r4, #20]
 800f6cc:	9201      	str	r2, [sp, #4]
 800f6ce:	9b01      	ldr	r3, [sp, #4]
 800f6d0:	61a3      	str	r3, [r4, #24]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	bf14      	ite	ne
 800f6d6:	2202      	movne	r2, #2
 800f6d8:	2201      	moveq	r2, #1
 800f6da:	6122      	str	r2, [r4, #16]
 800f6dc:	b1d5      	cbz	r5, 800f714 <__d2b+0x98>
 800f6de:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f6e2:	4405      	add	r5, r0
 800f6e4:	f8c9 5000 	str.w	r5, [r9]
 800f6e8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f6ec:	f8c8 0000 	str.w	r0, [r8]
 800f6f0:	4620      	mov	r0, r4
 800f6f2:	b003      	add	sp, #12
 800f6f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f6f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f6fc:	e7d5      	b.n	800f6aa <__d2b+0x2e>
 800f6fe:	6161      	str	r1, [r4, #20]
 800f700:	e7e5      	b.n	800f6ce <__d2b+0x52>
 800f702:	a801      	add	r0, sp, #4
 800f704:	f7ff fce8 	bl	800f0d8 <__lo0bits>
 800f708:	9b01      	ldr	r3, [sp, #4]
 800f70a:	6163      	str	r3, [r4, #20]
 800f70c:	2201      	movs	r2, #1
 800f70e:	6122      	str	r2, [r4, #16]
 800f710:	3020      	adds	r0, #32
 800f712:	e7e3      	b.n	800f6dc <__d2b+0x60>
 800f714:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f718:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f71c:	f8c9 0000 	str.w	r0, [r9]
 800f720:	6918      	ldr	r0, [r3, #16]
 800f722:	f7ff fcb9 	bl	800f098 <__hi0bits>
 800f726:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f72a:	e7df      	b.n	800f6ec <__d2b+0x70>
 800f72c:	0801495c 	.word	0x0801495c
 800f730:	08014a50 	.word	0x08014a50

0800f734 <__ratio>:
 800f734:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f738:	4688      	mov	r8, r1
 800f73a:	4669      	mov	r1, sp
 800f73c:	4681      	mov	r9, r0
 800f73e:	f7ff ff4d 	bl	800f5dc <__b2d>
 800f742:	a901      	add	r1, sp, #4
 800f744:	4640      	mov	r0, r8
 800f746:	ec55 4b10 	vmov	r4, r5, d0
 800f74a:	f7ff ff47 	bl	800f5dc <__b2d>
 800f74e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f752:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f756:	eba3 0c02 	sub.w	ip, r3, r2
 800f75a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f75e:	1a9b      	subs	r3, r3, r2
 800f760:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f764:	ec51 0b10 	vmov	r0, r1, d0
 800f768:	2b00      	cmp	r3, #0
 800f76a:	bfd6      	itet	le
 800f76c:	460a      	movle	r2, r1
 800f76e:	462a      	movgt	r2, r5
 800f770:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f774:	468b      	mov	fp, r1
 800f776:	462f      	mov	r7, r5
 800f778:	bfd4      	ite	le
 800f77a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f77e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f782:	4620      	mov	r0, r4
 800f784:	ee10 2a10 	vmov	r2, s0
 800f788:	465b      	mov	r3, fp
 800f78a:	4639      	mov	r1, r7
 800f78c:	f7f1 f86e 	bl	800086c <__aeabi_ddiv>
 800f790:	ec41 0b10 	vmov	d0, r0, r1
 800f794:	b003      	add	sp, #12
 800f796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f79a <__copybits>:
 800f79a:	3901      	subs	r1, #1
 800f79c:	b570      	push	{r4, r5, r6, lr}
 800f79e:	1149      	asrs	r1, r1, #5
 800f7a0:	6914      	ldr	r4, [r2, #16]
 800f7a2:	3101      	adds	r1, #1
 800f7a4:	f102 0314 	add.w	r3, r2, #20
 800f7a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f7ac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f7b0:	1f05      	subs	r5, r0, #4
 800f7b2:	42a3      	cmp	r3, r4
 800f7b4:	d30c      	bcc.n	800f7d0 <__copybits+0x36>
 800f7b6:	1aa3      	subs	r3, r4, r2
 800f7b8:	3b11      	subs	r3, #17
 800f7ba:	f023 0303 	bic.w	r3, r3, #3
 800f7be:	3211      	adds	r2, #17
 800f7c0:	42a2      	cmp	r2, r4
 800f7c2:	bf88      	it	hi
 800f7c4:	2300      	movhi	r3, #0
 800f7c6:	4418      	add	r0, r3
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	4288      	cmp	r0, r1
 800f7cc:	d305      	bcc.n	800f7da <__copybits+0x40>
 800f7ce:	bd70      	pop	{r4, r5, r6, pc}
 800f7d0:	f853 6b04 	ldr.w	r6, [r3], #4
 800f7d4:	f845 6f04 	str.w	r6, [r5, #4]!
 800f7d8:	e7eb      	b.n	800f7b2 <__copybits+0x18>
 800f7da:	f840 3b04 	str.w	r3, [r0], #4
 800f7de:	e7f4      	b.n	800f7ca <__copybits+0x30>

0800f7e0 <__any_on>:
 800f7e0:	f100 0214 	add.w	r2, r0, #20
 800f7e4:	6900      	ldr	r0, [r0, #16]
 800f7e6:	114b      	asrs	r3, r1, #5
 800f7e8:	4298      	cmp	r0, r3
 800f7ea:	b510      	push	{r4, lr}
 800f7ec:	db11      	blt.n	800f812 <__any_on+0x32>
 800f7ee:	dd0a      	ble.n	800f806 <__any_on+0x26>
 800f7f0:	f011 011f 	ands.w	r1, r1, #31
 800f7f4:	d007      	beq.n	800f806 <__any_on+0x26>
 800f7f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f7fa:	fa24 f001 	lsr.w	r0, r4, r1
 800f7fe:	fa00 f101 	lsl.w	r1, r0, r1
 800f802:	428c      	cmp	r4, r1
 800f804:	d10b      	bne.n	800f81e <__any_on+0x3e>
 800f806:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d803      	bhi.n	800f816 <__any_on+0x36>
 800f80e:	2000      	movs	r0, #0
 800f810:	bd10      	pop	{r4, pc}
 800f812:	4603      	mov	r3, r0
 800f814:	e7f7      	b.n	800f806 <__any_on+0x26>
 800f816:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f81a:	2900      	cmp	r1, #0
 800f81c:	d0f5      	beq.n	800f80a <__any_on+0x2a>
 800f81e:	2001      	movs	r0, #1
 800f820:	e7f6      	b.n	800f810 <__any_on+0x30>

0800f822 <_calloc_r>:
 800f822:	b513      	push	{r0, r1, r4, lr}
 800f824:	434a      	muls	r2, r1
 800f826:	4611      	mov	r1, r2
 800f828:	9201      	str	r2, [sp, #4]
 800f82a:	f000 f859 	bl	800f8e0 <_malloc_r>
 800f82e:	4604      	mov	r4, r0
 800f830:	b118      	cbz	r0, 800f83a <_calloc_r+0x18>
 800f832:	9a01      	ldr	r2, [sp, #4]
 800f834:	2100      	movs	r1, #0
 800f836:	f7fc f83b 	bl	800b8b0 <memset>
 800f83a:	4620      	mov	r0, r4
 800f83c:	b002      	add	sp, #8
 800f83e:	bd10      	pop	{r4, pc}

0800f840 <_free_r>:
 800f840:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f842:	2900      	cmp	r1, #0
 800f844:	d048      	beq.n	800f8d8 <_free_r+0x98>
 800f846:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f84a:	9001      	str	r0, [sp, #4]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	f1a1 0404 	sub.w	r4, r1, #4
 800f852:	bfb8      	it	lt
 800f854:	18e4      	addlt	r4, r4, r3
 800f856:	f000 fc6d 	bl	8010134 <__malloc_lock>
 800f85a:	4a20      	ldr	r2, [pc, #128]	; (800f8dc <_free_r+0x9c>)
 800f85c:	9801      	ldr	r0, [sp, #4]
 800f85e:	6813      	ldr	r3, [r2, #0]
 800f860:	4615      	mov	r5, r2
 800f862:	b933      	cbnz	r3, 800f872 <_free_r+0x32>
 800f864:	6063      	str	r3, [r4, #4]
 800f866:	6014      	str	r4, [r2, #0]
 800f868:	b003      	add	sp, #12
 800f86a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f86e:	f000 bc67 	b.w	8010140 <__malloc_unlock>
 800f872:	42a3      	cmp	r3, r4
 800f874:	d90b      	bls.n	800f88e <_free_r+0x4e>
 800f876:	6821      	ldr	r1, [r4, #0]
 800f878:	1862      	adds	r2, r4, r1
 800f87a:	4293      	cmp	r3, r2
 800f87c:	bf04      	itt	eq
 800f87e:	681a      	ldreq	r2, [r3, #0]
 800f880:	685b      	ldreq	r3, [r3, #4]
 800f882:	6063      	str	r3, [r4, #4]
 800f884:	bf04      	itt	eq
 800f886:	1852      	addeq	r2, r2, r1
 800f888:	6022      	streq	r2, [r4, #0]
 800f88a:	602c      	str	r4, [r5, #0]
 800f88c:	e7ec      	b.n	800f868 <_free_r+0x28>
 800f88e:	461a      	mov	r2, r3
 800f890:	685b      	ldr	r3, [r3, #4]
 800f892:	b10b      	cbz	r3, 800f898 <_free_r+0x58>
 800f894:	42a3      	cmp	r3, r4
 800f896:	d9fa      	bls.n	800f88e <_free_r+0x4e>
 800f898:	6811      	ldr	r1, [r2, #0]
 800f89a:	1855      	adds	r5, r2, r1
 800f89c:	42a5      	cmp	r5, r4
 800f89e:	d10b      	bne.n	800f8b8 <_free_r+0x78>
 800f8a0:	6824      	ldr	r4, [r4, #0]
 800f8a2:	4421      	add	r1, r4
 800f8a4:	1854      	adds	r4, r2, r1
 800f8a6:	42a3      	cmp	r3, r4
 800f8a8:	6011      	str	r1, [r2, #0]
 800f8aa:	d1dd      	bne.n	800f868 <_free_r+0x28>
 800f8ac:	681c      	ldr	r4, [r3, #0]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	6053      	str	r3, [r2, #4]
 800f8b2:	4421      	add	r1, r4
 800f8b4:	6011      	str	r1, [r2, #0]
 800f8b6:	e7d7      	b.n	800f868 <_free_r+0x28>
 800f8b8:	d902      	bls.n	800f8c0 <_free_r+0x80>
 800f8ba:	230c      	movs	r3, #12
 800f8bc:	6003      	str	r3, [r0, #0]
 800f8be:	e7d3      	b.n	800f868 <_free_r+0x28>
 800f8c0:	6825      	ldr	r5, [r4, #0]
 800f8c2:	1961      	adds	r1, r4, r5
 800f8c4:	428b      	cmp	r3, r1
 800f8c6:	bf04      	itt	eq
 800f8c8:	6819      	ldreq	r1, [r3, #0]
 800f8ca:	685b      	ldreq	r3, [r3, #4]
 800f8cc:	6063      	str	r3, [r4, #4]
 800f8ce:	bf04      	itt	eq
 800f8d0:	1949      	addeq	r1, r1, r5
 800f8d2:	6021      	streq	r1, [r4, #0]
 800f8d4:	6054      	str	r4, [r2, #4]
 800f8d6:	e7c7      	b.n	800f868 <_free_r+0x28>
 800f8d8:	b003      	add	sp, #12
 800f8da:	bd30      	pop	{r4, r5, pc}
 800f8dc:	200003a4 	.word	0x200003a4

0800f8e0 <_malloc_r>:
 800f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e2:	1ccd      	adds	r5, r1, #3
 800f8e4:	f025 0503 	bic.w	r5, r5, #3
 800f8e8:	3508      	adds	r5, #8
 800f8ea:	2d0c      	cmp	r5, #12
 800f8ec:	bf38      	it	cc
 800f8ee:	250c      	movcc	r5, #12
 800f8f0:	2d00      	cmp	r5, #0
 800f8f2:	4606      	mov	r6, r0
 800f8f4:	db01      	blt.n	800f8fa <_malloc_r+0x1a>
 800f8f6:	42a9      	cmp	r1, r5
 800f8f8:	d903      	bls.n	800f902 <_malloc_r+0x22>
 800f8fa:	230c      	movs	r3, #12
 800f8fc:	6033      	str	r3, [r6, #0]
 800f8fe:	2000      	movs	r0, #0
 800f900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f902:	f000 fc17 	bl	8010134 <__malloc_lock>
 800f906:	4921      	ldr	r1, [pc, #132]	; (800f98c <_malloc_r+0xac>)
 800f908:	680a      	ldr	r2, [r1, #0]
 800f90a:	4614      	mov	r4, r2
 800f90c:	b99c      	cbnz	r4, 800f936 <_malloc_r+0x56>
 800f90e:	4f20      	ldr	r7, [pc, #128]	; (800f990 <_malloc_r+0xb0>)
 800f910:	683b      	ldr	r3, [r7, #0]
 800f912:	b923      	cbnz	r3, 800f91e <_malloc_r+0x3e>
 800f914:	4621      	mov	r1, r4
 800f916:	4630      	mov	r0, r6
 800f918:	f000 fafa 	bl	800ff10 <_sbrk_r>
 800f91c:	6038      	str	r0, [r7, #0]
 800f91e:	4629      	mov	r1, r5
 800f920:	4630      	mov	r0, r6
 800f922:	f000 faf5 	bl	800ff10 <_sbrk_r>
 800f926:	1c43      	adds	r3, r0, #1
 800f928:	d123      	bne.n	800f972 <_malloc_r+0x92>
 800f92a:	230c      	movs	r3, #12
 800f92c:	6033      	str	r3, [r6, #0]
 800f92e:	4630      	mov	r0, r6
 800f930:	f000 fc06 	bl	8010140 <__malloc_unlock>
 800f934:	e7e3      	b.n	800f8fe <_malloc_r+0x1e>
 800f936:	6823      	ldr	r3, [r4, #0]
 800f938:	1b5b      	subs	r3, r3, r5
 800f93a:	d417      	bmi.n	800f96c <_malloc_r+0x8c>
 800f93c:	2b0b      	cmp	r3, #11
 800f93e:	d903      	bls.n	800f948 <_malloc_r+0x68>
 800f940:	6023      	str	r3, [r4, #0]
 800f942:	441c      	add	r4, r3
 800f944:	6025      	str	r5, [r4, #0]
 800f946:	e004      	b.n	800f952 <_malloc_r+0x72>
 800f948:	6863      	ldr	r3, [r4, #4]
 800f94a:	42a2      	cmp	r2, r4
 800f94c:	bf0c      	ite	eq
 800f94e:	600b      	streq	r3, [r1, #0]
 800f950:	6053      	strne	r3, [r2, #4]
 800f952:	4630      	mov	r0, r6
 800f954:	f000 fbf4 	bl	8010140 <__malloc_unlock>
 800f958:	f104 000b 	add.w	r0, r4, #11
 800f95c:	1d23      	adds	r3, r4, #4
 800f95e:	f020 0007 	bic.w	r0, r0, #7
 800f962:	1ac2      	subs	r2, r0, r3
 800f964:	d0cc      	beq.n	800f900 <_malloc_r+0x20>
 800f966:	1a1b      	subs	r3, r3, r0
 800f968:	50a3      	str	r3, [r4, r2]
 800f96a:	e7c9      	b.n	800f900 <_malloc_r+0x20>
 800f96c:	4622      	mov	r2, r4
 800f96e:	6864      	ldr	r4, [r4, #4]
 800f970:	e7cc      	b.n	800f90c <_malloc_r+0x2c>
 800f972:	1cc4      	adds	r4, r0, #3
 800f974:	f024 0403 	bic.w	r4, r4, #3
 800f978:	42a0      	cmp	r0, r4
 800f97a:	d0e3      	beq.n	800f944 <_malloc_r+0x64>
 800f97c:	1a21      	subs	r1, r4, r0
 800f97e:	4630      	mov	r0, r6
 800f980:	f000 fac6 	bl	800ff10 <_sbrk_r>
 800f984:	3001      	adds	r0, #1
 800f986:	d1dd      	bne.n	800f944 <_malloc_r+0x64>
 800f988:	e7cf      	b.n	800f92a <_malloc_r+0x4a>
 800f98a:	bf00      	nop
 800f98c:	200003a4 	.word	0x200003a4
 800f990:	200003a8 	.word	0x200003a8

0800f994 <__ssputs_r>:
 800f994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f998:	688e      	ldr	r6, [r1, #8]
 800f99a:	429e      	cmp	r6, r3
 800f99c:	4682      	mov	sl, r0
 800f99e:	460c      	mov	r4, r1
 800f9a0:	4690      	mov	r8, r2
 800f9a2:	461f      	mov	r7, r3
 800f9a4:	d838      	bhi.n	800fa18 <__ssputs_r+0x84>
 800f9a6:	898a      	ldrh	r2, [r1, #12]
 800f9a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f9ac:	d032      	beq.n	800fa14 <__ssputs_r+0x80>
 800f9ae:	6825      	ldr	r5, [r4, #0]
 800f9b0:	6909      	ldr	r1, [r1, #16]
 800f9b2:	eba5 0901 	sub.w	r9, r5, r1
 800f9b6:	6965      	ldr	r5, [r4, #20]
 800f9b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f9bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	444b      	add	r3, r9
 800f9c4:	106d      	asrs	r5, r5, #1
 800f9c6:	429d      	cmp	r5, r3
 800f9c8:	bf38      	it	cc
 800f9ca:	461d      	movcc	r5, r3
 800f9cc:	0553      	lsls	r3, r2, #21
 800f9ce:	d531      	bpl.n	800fa34 <__ssputs_r+0xa0>
 800f9d0:	4629      	mov	r1, r5
 800f9d2:	f7ff ff85 	bl	800f8e0 <_malloc_r>
 800f9d6:	4606      	mov	r6, r0
 800f9d8:	b950      	cbnz	r0, 800f9f0 <__ssputs_r+0x5c>
 800f9da:	230c      	movs	r3, #12
 800f9dc:	f8ca 3000 	str.w	r3, [sl]
 800f9e0:	89a3      	ldrh	r3, [r4, #12]
 800f9e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9e6:	81a3      	strh	r3, [r4, #12]
 800f9e8:	f04f 30ff 	mov.w	r0, #4294967295
 800f9ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9f0:	6921      	ldr	r1, [r4, #16]
 800f9f2:	464a      	mov	r2, r9
 800f9f4:	f7ff fa4c 	bl	800ee90 <memcpy>
 800f9f8:	89a3      	ldrh	r3, [r4, #12]
 800f9fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f9fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa02:	81a3      	strh	r3, [r4, #12]
 800fa04:	6126      	str	r6, [r4, #16]
 800fa06:	6165      	str	r5, [r4, #20]
 800fa08:	444e      	add	r6, r9
 800fa0a:	eba5 0509 	sub.w	r5, r5, r9
 800fa0e:	6026      	str	r6, [r4, #0]
 800fa10:	60a5      	str	r5, [r4, #8]
 800fa12:	463e      	mov	r6, r7
 800fa14:	42be      	cmp	r6, r7
 800fa16:	d900      	bls.n	800fa1a <__ssputs_r+0x86>
 800fa18:	463e      	mov	r6, r7
 800fa1a:	4632      	mov	r2, r6
 800fa1c:	6820      	ldr	r0, [r4, #0]
 800fa1e:	4641      	mov	r1, r8
 800fa20:	f000 fb6e 	bl	8010100 <memmove>
 800fa24:	68a3      	ldr	r3, [r4, #8]
 800fa26:	6822      	ldr	r2, [r4, #0]
 800fa28:	1b9b      	subs	r3, r3, r6
 800fa2a:	4432      	add	r2, r6
 800fa2c:	60a3      	str	r3, [r4, #8]
 800fa2e:	6022      	str	r2, [r4, #0]
 800fa30:	2000      	movs	r0, #0
 800fa32:	e7db      	b.n	800f9ec <__ssputs_r+0x58>
 800fa34:	462a      	mov	r2, r5
 800fa36:	f000 fb89 	bl	801014c <_realloc_r>
 800fa3a:	4606      	mov	r6, r0
 800fa3c:	2800      	cmp	r0, #0
 800fa3e:	d1e1      	bne.n	800fa04 <__ssputs_r+0x70>
 800fa40:	6921      	ldr	r1, [r4, #16]
 800fa42:	4650      	mov	r0, sl
 800fa44:	f7ff fefc 	bl	800f840 <_free_r>
 800fa48:	e7c7      	b.n	800f9da <__ssputs_r+0x46>
	...

0800fa4c <_svfiprintf_r>:
 800fa4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa50:	4698      	mov	r8, r3
 800fa52:	898b      	ldrh	r3, [r1, #12]
 800fa54:	061b      	lsls	r3, r3, #24
 800fa56:	b09d      	sub	sp, #116	; 0x74
 800fa58:	4607      	mov	r7, r0
 800fa5a:	460d      	mov	r5, r1
 800fa5c:	4614      	mov	r4, r2
 800fa5e:	d50e      	bpl.n	800fa7e <_svfiprintf_r+0x32>
 800fa60:	690b      	ldr	r3, [r1, #16]
 800fa62:	b963      	cbnz	r3, 800fa7e <_svfiprintf_r+0x32>
 800fa64:	2140      	movs	r1, #64	; 0x40
 800fa66:	f7ff ff3b 	bl	800f8e0 <_malloc_r>
 800fa6a:	6028      	str	r0, [r5, #0]
 800fa6c:	6128      	str	r0, [r5, #16]
 800fa6e:	b920      	cbnz	r0, 800fa7a <_svfiprintf_r+0x2e>
 800fa70:	230c      	movs	r3, #12
 800fa72:	603b      	str	r3, [r7, #0]
 800fa74:	f04f 30ff 	mov.w	r0, #4294967295
 800fa78:	e0d1      	b.n	800fc1e <_svfiprintf_r+0x1d2>
 800fa7a:	2340      	movs	r3, #64	; 0x40
 800fa7c:	616b      	str	r3, [r5, #20]
 800fa7e:	2300      	movs	r3, #0
 800fa80:	9309      	str	r3, [sp, #36]	; 0x24
 800fa82:	2320      	movs	r3, #32
 800fa84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa88:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa8c:	2330      	movs	r3, #48	; 0x30
 800fa8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800fc38 <_svfiprintf_r+0x1ec>
 800fa92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa96:	f04f 0901 	mov.w	r9, #1
 800fa9a:	4623      	mov	r3, r4
 800fa9c:	469a      	mov	sl, r3
 800fa9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800faa2:	b10a      	cbz	r2, 800faa8 <_svfiprintf_r+0x5c>
 800faa4:	2a25      	cmp	r2, #37	; 0x25
 800faa6:	d1f9      	bne.n	800fa9c <_svfiprintf_r+0x50>
 800faa8:	ebba 0b04 	subs.w	fp, sl, r4
 800faac:	d00b      	beq.n	800fac6 <_svfiprintf_r+0x7a>
 800faae:	465b      	mov	r3, fp
 800fab0:	4622      	mov	r2, r4
 800fab2:	4629      	mov	r1, r5
 800fab4:	4638      	mov	r0, r7
 800fab6:	f7ff ff6d 	bl	800f994 <__ssputs_r>
 800faba:	3001      	adds	r0, #1
 800fabc:	f000 80aa 	beq.w	800fc14 <_svfiprintf_r+0x1c8>
 800fac0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fac2:	445a      	add	r2, fp
 800fac4:	9209      	str	r2, [sp, #36]	; 0x24
 800fac6:	f89a 3000 	ldrb.w	r3, [sl]
 800faca:	2b00      	cmp	r3, #0
 800facc:	f000 80a2 	beq.w	800fc14 <_svfiprintf_r+0x1c8>
 800fad0:	2300      	movs	r3, #0
 800fad2:	f04f 32ff 	mov.w	r2, #4294967295
 800fad6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fada:	f10a 0a01 	add.w	sl, sl, #1
 800fade:	9304      	str	r3, [sp, #16]
 800fae0:	9307      	str	r3, [sp, #28]
 800fae2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fae6:	931a      	str	r3, [sp, #104]	; 0x68
 800fae8:	4654      	mov	r4, sl
 800faea:	2205      	movs	r2, #5
 800faec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800faf0:	4851      	ldr	r0, [pc, #324]	; (800fc38 <_svfiprintf_r+0x1ec>)
 800faf2:	f7f0 fb85 	bl	8000200 <memchr>
 800faf6:	9a04      	ldr	r2, [sp, #16]
 800faf8:	b9d8      	cbnz	r0, 800fb32 <_svfiprintf_r+0xe6>
 800fafa:	06d0      	lsls	r0, r2, #27
 800fafc:	bf44      	itt	mi
 800fafe:	2320      	movmi	r3, #32
 800fb00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb04:	0711      	lsls	r1, r2, #28
 800fb06:	bf44      	itt	mi
 800fb08:	232b      	movmi	r3, #43	; 0x2b
 800fb0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fb0e:	f89a 3000 	ldrb.w	r3, [sl]
 800fb12:	2b2a      	cmp	r3, #42	; 0x2a
 800fb14:	d015      	beq.n	800fb42 <_svfiprintf_r+0xf6>
 800fb16:	9a07      	ldr	r2, [sp, #28]
 800fb18:	4654      	mov	r4, sl
 800fb1a:	2000      	movs	r0, #0
 800fb1c:	f04f 0c0a 	mov.w	ip, #10
 800fb20:	4621      	mov	r1, r4
 800fb22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb26:	3b30      	subs	r3, #48	; 0x30
 800fb28:	2b09      	cmp	r3, #9
 800fb2a:	d94e      	bls.n	800fbca <_svfiprintf_r+0x17e>
 800fb2c:	b1b0      	cbz	r0, 800fb5c <_svfiprintf_r+0x110>
 800fb2e:	9207      	str	r2, [sp, #28]
 800fb30:	e014      	b.n	800fb5c <_svfiprintf_r+0x110>
 800fb32:	eba0 0308 	sub.w	r3, r0, r8
 800fb36:	fa09 f303 	lsl.w	r3, r9, r3
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	9304      	str	r3, [sp, #16]
 800fb3e:	46a2      	mov	sl, r4
 800fb40:	e7d2      	b.n	800fae8 <_svfiprintf_r+0x9c>
 800fb42:	9b03      	ldr	r3, [sp, #12]
 800fb44:	1d19      	adds	r1, r3, #4
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	9103      	str	r1, [sp, #12]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	bfbb      	ittet	lt
 800fb4e:	425b      	neglt	r3, r3
 800fb50:	f042 0202 	orrlt.w	r2, r2, #2
 800fb54:	9307      	strge	r3, [sp, #28]
 800fb56:	9307      	strlt	r3, [sp, #28]
 800fb58:	bfb8      	it	lt
 800fb5a:	9204      	strlt	r2, [sp, #16]
 800fb5c:	7823      	ldrb	r3, [r4, #0]
 800fb5e:	2b2e      	cmp	r3, #46	; 0x2e
 800fb60:	d10c      	bne.n	800fb7c <_svfiprintf_r+0x130>
 800fb62:	7863      	ldrb	r3, [r4, #1]
 800fb64:	2b2a      	cmp	r3, #42	; 0x2a
 800fb66:	d135      	bne.n	800fbd4 <_svfiprintf_r+0x188>
 800fb68:	9b03      	ldr	r3, [sp, #12]
 800fb6a:	1d1a      	adds	r2, r3, #4
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	9203      	str	r2, [sp, #12]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	bfb8      	it	lt
 800fb74:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb78:	3402      	adds	r4, #2
 800fb7a:	9305      	str	r3, [sp, #20]
 800fb7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800fc48 <_svfiprintf_r+0x1fc>
 800fb80:	7821      	ldrb	r1, [r4, #0]
 800fb82:	2203      	movs	r2, #3
 800fb84:	4650      	mov	r0, sl
 800fb86:	f7f0 fb3b 	bl	8000200 <memchr>
 800fb8a:	b140      	cbz	r0, 800fb9e <_svfiprintf_r+0x152>
 800fb8c:	2340      	movs	r3, #64	; 0x40
 800fb8e:	eba0 000a 	sub.w	r0, r0, sl
 800fb92:	fa03 f000 	lsl.w	r0, r3, r0
 800fb96:	9b04      	ldr	r3, [sp, #16]
 800fb98:	4303      	orrs	r3, r0
 800fb9a:	3401      	adds	r4, #1
 800fb9c:	9304      	str	r3, [sp, #16]
 800fb9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fba2:	4826      	ldr	r0, [pc, #152]	; (800fc3c <_svfiprintf_r+0x1f0>)
 800fba4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fba8:	2206      	movs	r2, #6
 800fbaa:	f7f0 fb29 	bl	8000200 <memchr>
 800fbae:	2800      	cmp	r0, #0
 800fbb0:	d038      	beq.n	800fc24 <_svfiprintf_r+0x1d8>
 800fbb2:	4b23      	ldr	r3, [pc, #140]	; (800fc40 <_svfiprintf_r+0x1f4>)
 800fbb4:	bb1b      	cbnz	r3, 800fbfe <_svfiprintf_r+0x1b2>
 800fbb6:	9b03      	ldr	r3, [sp, #12]
 800fbb8:	3307      	adds	r3, #7
 800fbba:	f023 0307 	bic.w	r3, r3, #7
 800fbbe:	3308      	adds	r3, #8
 800fbc0:	9303      	str	r3, [sp, #12]
 800fbc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fbc4:	4433      	add	r3, r6
 800fbc6:	9309      	str	r3, [sp, #36]	; 0x24
 800fbc8:	e767      	b.n	800fa9a <_svfiprintf_r+0x4e>
 800fbca:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbce:	460c      	mov	r4, r1
 800fbd0:	2001      	movs	r0, #1
 800fbd2:	e7a5      	b.n	800fb20 <_svfiprintf_r+0xd4>
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	3401      	adds	r4, #1
 800fbd8:	9305      	str	r3, [sp, #20]
 800fbda:	4619      	mov	r1, r3
 800fbdc:	f04f 0c0a 	mov.w	ip, #10
 800fbe0:	4620      	mov	r0, r4
 800fbe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbe6:	3a30      	subs	r2, #48	; 0x30
 800fbe8:	2a09      	cmp	r2, #9
 800fbea:	d903      	bls.n	800fbf4 <_svfiprintf_r+0x1a8>
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	d0c5      	beq.n	800fb7c <_svfiprintf_r+0x130>
 800fbf0:	9105      	str	r1, [sp, #20]
 800fbf2:	e7c3      	b.n	800fb7c <_svfiprintf_r+0x130>
 800fbf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	2301      	movs	r3, #1
 800fbfc:	e7f0      	b.n	800fbe0 <_svfiprintf_r+0x194>
 800fbfe:	ab03      	add	r3, sp, #12
 800fc00:	9300      	str	r3, [sp, #0]
 800fc02:	462a      	mov	r2, r5
 800fc04:	4b0f      	ldr	r3, [pc, #60]	; (800fc44 <_svfiprintf_r+0x1f8>)
 800fc06:	a904      	add	r1, sp, #16
 800fc08:	4638      	mov	r0, r7
 800fc0a:	f7fb fef9 	bl	800ba00 <_printf_float>
 800fc0e:	1c42      	adds	r2, r0, #1
 800fc10:	4606      	mov	r6, r0
 800fc12:	d1d6      	bne.n	800fbc2 <_svfiprintf_r+0x176>
 800fc14:	89ab      	ldrh	r3, [r5, #12]
 800fc16:	065b      	lsls	r3, r3, #25
 800fc18:	f53f af2c 	bmi.w	800fa74 <_svfiprintf_r+0x28>
 800fc1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc1e:	b01d      	add	sp, #116	; 0x74
 800fc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc24:	ab03      	add	r3, sp, #12
 800fc26:	9300      	str	r3, [sp, #0]
 800fc28:	462a      	mov	r2, r5
 800fc2a:	4b06      	ldr	r3, [pc, #24]	; (800fc44 <_svfiprintf_r+0x1f8>)
 800fc2c:	a904      	add	r1, sp, #16
 800fc2e:	4638      	mov	r0, r7
 800fc30:	f7fc f98a 	bl	800bf48 <_printf_i>
 800fc34:	e7eb      	b.n	800fc0e <_svfiprintf_r+0x1c2>
 800fc36:	bf00      	nop
 800fc38:	08014bac 	.word	0x08014bac
 800fc3c:	08014bb6 	.word	0x08014bb6
 800fc40:	0800ba01 	.word	0x0800ba01
 800fc44:	0800f995 	.word	0x0800f995
 800fc48:	08014bb2 	.word	0x08014bb2

0800fc4c <__sfputc_r>:
 800fc4c:	6893      	ldr	r3, [r2, #8]
 800fc4e:	3b01      	subs	r3, #1
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	b410      	push	{r4}
 800fc54:	6093      	str	r3, [r2, #8]
 800fc56:	da08      	bge.n	800fc6a <__sfputc_r+0x1e>
 800fc58:	6994      	ldr	r4, [r2, #24]
 800fc5a:	42a3      	cmp	r3, r4
 800fc5c:	db01      	blt.n	800fc62 <__sfputc_r+0x16>
 800fc5e:	290a      	cmp	r1, #10
 800fc60:	d103      	bne.n	800fc6a <__sfputc_r+0x1e>
 800fc62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc66:	f7fd bc2d 	b.w	800d4c4 <__swbuf_r>
 800fc6a:	6813      	ldr	r3, [r2, #0]
 800fc6c:	1c58      	adds	r0, r3, #1
 800fc6e:	6010      	str	r0, [r2, #0]
 800fc70:	7019      	strb	r1, [r3, #0]
 800fc72:	4608      	mov	r0, r1
 800fc74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fc78:	4770      	bx	lr

0800fc7a <__sfputs_r>:
 800fc7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc7c:	4606      	mov	r6, r0
 800fc7e:	460f      	mov	r7, r1
 800fc80:	4614      	mov	r4, r2
 800fc82:	18d5      	adds	r5, r2, r3
 800fc84:	42ac      	cmp	r4, r5
 800fc86:	d101      	bne.n	800fc8c <__sfputs_r+0x12>
 800fc88:	2000      	movs	r0, #0
 800fc8a:	e007      	b.n	800fc9c <__sfputs_r+0x22>
 800fc8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fc90:	463a      	mov	r2, r7
 800fc92:	4630      	mov	r0, r6
 800fc94:	f7ff ffda 	bl	800fc4c <__sfputc_r>
 800fc98:	1c43      	adds	r3, r0, #1
 800fc9a:	d1f3      	bne.n	800fc84 <__sfputs_r+0xa>
 800fc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fca0 <_vfiprintf_r>:
 800fca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fca4:	460d      	mov	r5, r1
 800fca6:	b09d      	sub	sp, #116	; 0x74
 800fca8:	4614      	mov	r4, r2
 800fcaa:	4698      	mov	r8, r3
 800fcac:	4606      	mov	r6, r0
 800fcae:	b118      	cbz	r0, 800fcb8 <_vfiprintf_r+0x18>
 800fcb0:	6983      	ldr	r3, [r0, #24]
 800fcb2:	b90b      	cbnz	r3, 800fcb8 <_vfiprintf_r+0x18>
 800fcb4:	f7fe fc5a 	bl	800e56c <__sinit>
 800fcb8:	4b89      	ldr	r3, [pc, #548]	; (800fee0 <_vfiprintf_r+0x240>)
 800fcba:	429d      	cmp	r5, r3
 800fcbc:	d11b      	bne.n	800fcf6 <_vfiprintf_r+0x56>
 800fcbe:	6875      	ldr	r5, [r6, #4]
 800fcc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fcc2:	07d9      	lsls	r1, r3, #31
 800fcc4:	d405      	bmi.n	800fcd2 <_vfiprintf_r+0x32>
 800fcc6:	89ab      	ldrh	r3, [r5, #12]
 800fcc8:	059a      	lsls	r2, r3, #22
 800fcca:	d402      	bmi.n	800fcd2 <_vfiprintf_r+0x32>
 800fccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fcce:	f7ff f85e 	bl	800ed8e <__retarget_lock_acquire_recursive>
 800fcd2:	89ab      	ldrh	r3, [r5, #12]
 800fcd4:	071b      	lsls	r3, r3, #28
 800fcd6:	d501      	bpl.n	800fcdc <_vfiprintf_r+0x3c>
 800fcd8:	692b      	ldr	r3, [r5, #16]
 800fcda:	b9eb      	cbnz	r3, 800fd18 <_vfiprintf_r+0x78>
 800fcdc:	4629      	mov	r1, r5
 800fcde:	4630      	mov	r0, r6
 800fce0:	f7fd fc42 	bl	800d568 <__swsetup_r>
 800fce4:	b1c0      	cbz	r0, 800fd18 <_vfiprintf_r+0x78>
 800fce6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fce8:	07dc      	lsls	r4, r3, #31
 800fcea:	d50e      	bpl.n	800fd0a <_vfiprintf_r+0x6a>
 800fcec:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf0:	b01d      	add	sp, #116	; 0x74
 800fcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf6:	4b7b      	ldr	r3, [pc, #492]	; (800fee4 <_vfiprintf_r+0x244>)
 800fcf8:	429d      	cmp	r5, r3
 800fcfa:	d101      	bne.n	800fd00 <_vfiprintf_r+0x60>
 800fcfc:	68b5      	ldr	r5, [r6, #8]
 800fcfe:	e7df      	b.n	800fcc0 <_vfiprintf_r+0x20>
 800fd00:	4b79      	ldr	r3, [pc, #484]	; (800fee8 <_vfiprintf_r+0x248>)
 800fd02:	429d      	cmp	r5, r3
 800fd04:	bf08      	it	eq
 800fd06:	68f5      	ldreq	r5, [r6, #12]
 800fd08:	e7da      	b.n	800fcc0 <_vfiprintf_r+0x20>
 800fd0a:	89ab      	ldrh	r3, [r5, #12]
 800fd0c:	0598      	lsls	r0, r3, #22
 800fd0e:	d4ed      	bmi.n	800fcec <_vfiprintf_r+0x4c>
 800fd10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fd12:	f7ff f83d 	bl	800ed90 <__retarget_lock_release_recursive>
 800fd16:	e7e9      	b.n	800fcec <_vfiprintf_r+0x4c>
 800fd18:	2300      	movs	r3, #0
 800fd1a:	9309      	str	r3, [sp, #36]	; 0x24
 800fd1c:	2320      	movs	r3, #32
 800fd1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fd22:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd26:	2330      	movs	r3, #48	; 0x30
 800fd28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800feec <_vfiprintf_r+0x24c>
 800fd2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fd30:	f04f 0901 	mov.w	r9, #1
 800fd34:	4623      	mov	r3, r4
 800fd36:	469a      	mov	sl, r3
 800fd38:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd3c:	b10a      	cbz	r2, 800fd42 <_vfiprintf_r+0xa2>
 800fd3e:	2a25      	cmp	r2, #37	; 0x25
 800fd40:	d1f9      	bne.n	800fd36 <_vfiprintf_r+0x96>
 800fd42:	ebba 0b04 	subs.w	fp, sl, r4
 800fd46:	d00b      	beq.n	800fd60 <_vfiprintf_r+0xc0>
 800fd48:	465b      	mov	r3, fp
 800fd4a:	4622      	mov	r2, r4
 800fd4c:	4629      	mov	r1, r5
 800fd4e:	4630      	mov	r0, r6
 800fd50:	f7ff ff93 	bl	800fc7a <__sfputs_r>
 800fd54:	3001      	adds	r0, #1
 800fd56:	f000 80aa 	beq.w	800feae <_vfiprintf_r+0x20e>
 800fd5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fd5c:	445a      	add	r2, fp
 800fd5e:	9209      	str	r2, [sp, #36]	; 0x24
 800fd60:	f89a 3000 	ldrb.w	r3, [sl]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f000 80a2 	beq.w	800feae <_vfiprintf_r+0x20e>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	f04f 32ff 	mov.w	r2, #4294967295
 800fd70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd74:	f10a 0a01 	add.w	sl, sl, #1
 800fd78:	9304      	str	r3, [sp, #16]
 800fd7a:	9307      	str	r3, [sp, #28]
 800fd7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fd80:	931a      	str	r3, [sp, #104]	; 0x68
 800fd82:	4654      	mov	r4, sl
 800fd84:	2205      	movs	r2, #5
 800fd86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd8a:	4858      	ldr	r0, [pc, #352]	; (800feec <_vfiprintf_r+0x24c>)
 800fd8c:	f7f0 fa38 	bl	8000200 <memchr>
 800fd90:	9a04      	ldr	r2, [sp, #16]
 800fd92:	b9d8      	cbnz	r0, 800fdcc <_vfiprintf_r+0x12c>
 800fd94:	06d1      	lsls	r1, r2, #27
 800fd96:	bf44      	itt	mi
 800fd98:	2320      	movmi	r3, #32
 800fd9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fd9e:	0713      	lsls	r3, r2, #28
 800fda0:	bf44      	itt	mi
 800fda2:	232b      	movmi	r3, #43	; 0x2b
 800fda4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fda8:	f89a 3000 	ldrb.w	r3, [sl]
 800fdac:	2b2a      	cmp	r3, #42	; 0x2a
 800fdae:	d015      	beq.n	800fddc <_vfiprintf_r+0x13c>
 800fdb0:	9a07      	ldr	r2, [sp, #28]
 800fdb2:	4654      	mov	r4, sl
 800fdb4:	2000      	movs	r0, #0
 800fdb6:	f04f 0c0a 	mov.w	ip, #10
 800fdba:	4621      	mov	r1, r4
 800fdbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fdc0:	3b30      	subs	r3, #48	; 0x30
 800fdc2:	2b09      	cmp	r3, #9
 800fdc4:	d94e      	bls.n	800fe64 <_vfiprintf_r+0x1c4>
 800fdc6:	b1b0      	cbz	r0, 800fdf6 <_vfiprintf_r+0x156>
 800fdc8:	9207      	str	r2, [sp, #28]
 800fdca:	e014      	b.n	800fdf6 <_vfiprintf_r+0x156>
 800fdcc:	eba0 0308 	sub.w	r3, r0, r8
 800fdd0:	fa09 f303 	lsl.w	r3, r9, r3
 800fdd4:	4313      	orrs	r3, r2
 800fdd6:	9304      	str	r3, [sp, #16]
 800fdd8:	46a2      	mov	sl, r4
 800fdda:	e7d2      	b.n	800fd82 <_vfiprintf_r+0xe2>
 800fddc:	9b03      	ldr	r3, [sp, #12]
 800fdde:	1d19      	adds	r1, r3, #4
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	9103      	str	r1, [sp, #12]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	bfbb      	ittet	lt
 800fde8:	425b      	neglt	r3, r3
 800fdea:	f042 0202 	orrlt.w	r2, r2, #2
 800fdee:	9307      	strge	r3, [sp, #28]
 800fdf0:	9307      	strlt	r3, [sp, #28]
 800fdf2:	bfb8      	it	lt
 800fdf4:	9204      	strlt	r2, [sp, #16]
 800fdf6:	7823      	ldrb	r3, [r4, #0]
 800fdf8:	2b2e      	cmp	r3, #46	; 0x2e
 800fdfa:	d10c      	bne.n	800fe16 <_vfiprintf_r+0x176>
 800fdfc:	7863      	ldrb	r3, [r4, #1]
 800fdfe:	2b2a      	cmp	r3, #42	; 0x2a
 800fe00:	d135      	bne.n	800fe6e <_vfiprintf_r+0x1ce>
 800fe02:	9b03      	ldr	r3, [sp, #12]
 800fe04:	1d1a      	adds	r2, r3, #4
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	9203      	str	r2, [sp, #12]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	bfb8      	it	lt
 800fe0e:	f04f 33ff 	movlt.w	r3, #4294967295
 800fe12:	3402      	adds	r4, #2
 800fe14:	9305      	str	r3, [sp, #20]
 800fe16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fefc <_vfiprintf_r+0x25c>
 800fe1a:	7821      	ldrb	r1, [r4, #0]
 800fe1c:	2203      	movs	r2, #3
 800fe1e:	4650      	mov	r0, sl
 800fe20:	f7f0 f9ee 	bl	8000200 <memchr>
 800fe24:	b140      	cbz	r0, 800fe38 <_vfiprintf_r+0x198>
 800fe26:	2340      	movs	r3, #64	; 0x40
 800fe28:	eba0 000a 	sub.w	r0, r0, sl
 800fe2c:	fa03 f000 	lsl.w	r0, r3, r0
 800fe30:	9b04      	ldr	r3, [sp, #16]
 800fe32:	4303      	orrs	r3, r0
 800fe34:	3401      	adds	r4, #1
 800fe36:	9304      	str	r3, [sp, #16]
 800fe38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe3c:	482c      	ldr	r0, [pc, #176]	; (800fef0 <_vfiprintf_r+0x250>)
 800fe3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fe42:	2206      	movs	r2, #6
 800fe44:	f7f0 f9dc 	bl	8000200 <memchr>
 800fe48:	2800      	cmp	r0, #0
 800fe4a:	d03f      	beq.n	800fecc <_vfiprintf_r+0x22c>
 800fe4c:	4b29      	ldr	r3, [pc, #164]	; (800fef4 <_vfiprintf_r+0x254>)
 800fe4e:	bb1b      	cbnz	r3, 800fe98 <_vfiprintf_r+0x1f8>
 800fe50:	9b03      	ldr	r3, [sp, #12]
 800fe52:	3307      	adds	r3, #7
 800fe54:	f023 0307 	bic.w	r3, r3, #7
 800fe58:	3308      	adds	r3, #8
 800fe5a:	9303      	str	r3, [sp, #12]
 800fe5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe5e:	443b      	add	r3, r7
 800fe60:	9309      	str	r3, [sp, #36]	; 0x24
 800fe62:	e767      	b.n	800fd34 <_vfiprintf_r+0x94>
 800fe64:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe68:	460c      	mov	r4, r1
 800fe6a:	2001      	movs	r0, #1
 800fe6c:	e7a5      	b.n	800fdba <_vfiprintf_r+0x11a>
 800fe6e:	2300      	movs	r3, #0
 800fe70:	3401      	adds	r4, #1
 800fe72:	9305      	str	r3, [sp, #20]
 800fe74:	4619      	mov	r1, r3
 800fe76:	f04f 0c0a 	mov.w	ip, #10
 800fe7a:	4620      	mov	r0, r4
 800fe7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe80:	3a30      	subs	r2, #48	; 0x30
 800fe82:	2a09      	cmp	r2, #9
 800fe84:	d903      	bls.n	800fe8e <_vfiprintf_r+0x1ee>
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d0c5      	beq.n	800fe16 <_vfiprintf_r+0x176>
 800fe8a:	9105      	str	r1, [sp, #20]
 800fe8c:	e7c3      	b.n	800fe16 <_vfiprintf_r+0x176>
 800fe8e:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe92:	4604      	mov	r4, r0
 800fe94:	2301      	movs	r3, #1
 800fe96:	e7f0      	b.n	800fe7a <_vfiprintf_r+0x1da>
 800fe98:	ab03      	add	r3, sp, #12
 800fe9a:	9300      	str	r3, [sp, #0]
 800fe9c:	462a      	mov	r2, r5
 800fe9e:	4b16      	ldr	r3, [pc, #88]	; (800fef8 <_vfiprintf_r+0x258>)
 800fea0:	a904      	add	r1, sp, #16
 800fea2:	4630      	mov	r0, r6
 800fea4:	f7fb fdac 	bl	800ba00 <_printf_float>
 800fea8:	4607      	mov	r7, r0
 800feaa:	1c78      	adds	r0, r7, #1
 800feac:	d1d6      	bne.n	800fe5c <_vfiprintf_r+0x1bc>
 800feae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800feb0:	07d9      	lsls	r1, r3, #31
 800feb2:	d405      	bmi.n	800fec0 <_vfiprintf_r+0x220>
 800feb4:	89ab      	ldrh	r3, [r5, #12]
 800feb6:	059a      	lsls	r2, r3, #22
 800feb8:	d402      	bmi.n	800fec0 <_vfiprintf_r+0x220>
 800feba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800febc:	f7fe ff68 	bl	800ed90 <__retarget_lock_release_recursive>
 800fec0:	89ab      	ldrh	r3, [r5, #12]
 800fec2:	065b      	lsls	r3, r3, #25
 800fec4:	f53f af12 	bmi.w	800fcec <_vfiprintf_r+0x4c>
 800fec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800feca:	e711      	b.n	800fcf0 <_vfiprintf_r+0x50>
 800fecc:	ab03      	add	r3, sp, #12
 800fece:	9300      	str	r3, [sp, #0]
 800fed0:	462a      	mov	r2, r5
 800fed2:	4b09      	ldr	r3, [pc, #36]	; (800fef8 <_vfiprintf_r+0x258>)
 800fed4:	a904      	add	r1, sp, #16
 800fed6:	4630      	mov	r0, r6
 800fed8:	f7fc f836 	bl	800bf48 <_printf_i>
 800fedc:	e7e4      	b.n	800fea8 <_vfiprintf_r+0x208>
 800fede:	bf00      	nop
 800fee0:	08014990 	.word	0x08014990
 800fee4:	080149b0 	.word	0x080149b0
 800fee8:	08014970 	.word	0x08014970
 800feec:	08014bac 	.word	0x08014bac
 800fef0:	08014bb6 	.word	0x08014bb6
 800fef4:	0800ba01 	.word	0x0800ba01
 800fef8:	0800fc7b 	.word	0x0800fc7b
 800fefc:	08014bb2 	.word	0x08014bb2

0800ff00 <nan>:
 800ff00:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ff08 <nan+0x8>
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	00000000 	.word	0x00000000
 800ff0c:	7ff80000 	.word	0x7ff80000

0800ff10 <_sbrk_r>:
 800ff10:	b538      	push	{r3, r4, r5, lr}
 800ff12:	4d06      	ldr	r5, [pc, #24]	; (800ff2c <_sbrk_r+0x1c>)
 800ff14:	2300      	movs	r3, #0
 800ff16:	4604      	mov	r4, r0
 800ff18:	4608      	mov	r0, r1
 800ff1a:	602b      	str	r3, [r5, #0]
 800ff1c:	f7f4 fc22 	bl	8004764 <_sbrk>
 800ff20:	1c43      	adds	r3, r0, #1
 800ff22:	d102      	bne.n	800ff2a <_sbrk_r+0x1a>
 800ff24:	682b      	ldr	r3, [r5, #0]
 800ff26:	b103      	cbz	r3, 800ff2a <_sbrk_r+0x1a>
 800ff28:	6023      	str	r3, [r4, #0]
 800ff2a:	bd38      	pop	{r3, r4, r5, pc}
 800ff2c:	20000b64 	.word	0x20000b64

0800ff30 <__sread>:
 800ff30:	b510      	push	{r4, lr}
 800ff32:	460c      	mov	r4, r1
 800ff34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff38:	f000 f92e 	bl	8010198 <_read_r>
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	bfab      	itete	ge
 800ff40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ff42:	89a3      	ldrhlt	r3, [r4, #12]
 800ff44:	181b      	addge	r3, r3, r0
 800ff46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ff4a:	bfac      	ite	ge
 800ff4c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ff4e:	81a3      	strhlt	r3, [r4, #12]
 800ff50:	bd10      	pop	{r4, pc}

0800ff52 <__swrite>:
 800ff52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff56:	461f      	mov	r7, r3
 800ff58:	898b      	ldrh	r3, [r1, #12]
 800ff5a:	05db      	lsls	r3, r3, #23
 800ff5c:	4605      	mov	r5, r0
 800ff5e:	460c      	mov	r4, r1
 800ff60:	4616      	mov	r6, r2
 800ff62:	d505      	bpl.n	800ff70 <__swrite+0x1e>
 800ff64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff68:	2302      	movs	r3, #2
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	f000 f8b6 	bl	80100dc <_lseek_r>
 800ff70:	89a3      	ldrh	r3, [r4, #12]
 800ff72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ff76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff7a:	81a3      	strh	r3, [r4, #12]
 800ff7c:	4632      	mov	r2, r6
 800ff7e:	463b      	mov	r3, r7
 800ff80:	4628      	mov	r0, r5
 800ff82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ff86:	f000 b835 	b.w	800fff4 <_write_r>

0800ff8a <__sseek>:
 800ff8a:	b510      	push	{r4, lr}
 800ff8c:	460c      	mov	r4, r1
 800ff8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff92:	f000 f8a3 	bl	80100dc <_lseek_r>
 800ff96:	1c43      	adds	r3, r0, #1
 800ff98:	89a3      	ldrh	r3, [r4, #12]
 800ff9a:	bf15      	itete	ne
 800ff9c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ff9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ffa2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ffa6:	81a3      	strheq	r3, [r4, #12]
 800ffa8:	bf18      	it	ne
 800ffaa:	81a3      	strhne	r3, [r4, #12]
 800ffac:	bd10      	pop	{r4, pc}

0800ffae <__sclose>:
 800ffae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ffb2:	f000 b84f 	b.w	8010054 <_close_r>

0800ffb6 <strncmp>:
 800ffb6:	b510      	push	{r4, lr}
 800ffb8:	b16a      	cbz	r2, 800ffd6 <strncmp+0x20>
 800ffba:	3901      	subs	r1, #1
 800ffbc:	1884      	adds	r4, r0, r2
 800ffbe:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ffc2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d103      	bne.n	800ffd2 <strncmp+0x1c>
 800ffca:	42a0      	cmp	r0, r4
 800ffcc:	d001      	beq.n	800ffd2 <strncmp+0x1c>
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d1f5      	bne.n	800ffbe <strncmp+0x8>
 800ffd2:	1a98      	subs	r0, r3, r2
 800ffd4:	bd10      	pop	{r4, pc}
 800ffd6:	4610      	mov	r0, r2
 800ffd8:	e7fc      	b.n	800ffd4 <strncmp+0x1e>

0800ffda <__ascii_wctomb>:
 800ffda:	b149      	cbz	r1, 800fff0 <__ascii_wctomb+0x16>
 800ffdc:	2aff      	cmp	r2, #255	; 0xff
 800ffde:	bf85      	ittet	hi
 800ffe0:	238a      	movhi	r3, #138	; 0x8a
 800ffe2:	6003      	strhi	r3, [r0, #0]
 800ffe4:	700a      	strbls	r2, [r1, #0]
 800ffe6:	f04f 30ff 	movhi.w	r0, #4294967295
 800ffea:	bf98      	it	ls
 800ffec:	2001      	movls	r0, #1
 800ffee:	4770      	bx	lr
 800fff0:	4608      	mov	r0, r1
 800fff2:	4770      	bx	lr

0800fff4 <_write_r>:
 800fff4:	b538      	push	{r3, r4, r5, lr}
 800fff6:	4d07      	ldr	r5, [pc, #28]	; (8010014 <_write_r+0x20>)
 800fff8:	4604      	mov	r4, r0
 800fffa:	4608      	mov	r0, r1
 800fffc:	4611      	mov	r1, r2
 800fffe:	2200      	movs	r2, #0
 8010000:	602a      	str	r2, [r5, #0]
 8010002:	461a      	mov	r2, r3
 8010004:	f7f4 fb5d 	bl	80046c2 <_write>
 8010008:	1c43      	adds	r3, r0, #1
 801000a:	d102      	bne.n	8010012 <_write_r+0x1e>
 801000c:	682b      	ldr	r3, [r5, #0]
 801000e:	b103      	cbz	r3, 8010012 <_write_r+0x1e>
 8010010:	6023      	str	r3, [r4, #0]
 8010012:	bd38      	pop	{r3, r4, r5, pc}
 8010014:	20000b64 	.word	0x20000b64

08010018 <__assert_func>:
 8010018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801001a:	4614      	mov	r4, r2
 801001c:	461a      	mov	r2, r3
 801001e:	4b09      	ldr	r3, [pc, #36]	; (8010044 <__assert_func+0x2c>)
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4605      	mov	r5, r0
 8010024:	68d8      	ldr	r0, [r3, #12]
 8010026:	b14c      	cbz	r4, 801003c <__assert_func+0x24>
 8010028:	4b07      	ldr	r3, [pc, #28]	; (8010048 <__assert_func+0x30>)
 801002a:	9100      	str	r1, [sp, #0]
 801002c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010030:	4906      	ldr	r1, [pc, #24]	; (801004c <__assert_func+0x34>)
 8010032:	462b      	mov	r3, r5
 8010034:	f000 f81e 	bl	8010074 <fiprintf>
 8010038:	f000 f8c0 	bl	80101bc <abort>
 801003c:	4b04      	ldr	r3, [pc, #16]	; (8010050 <__assert_func+0x38>)
 801003e:	461c      	mov	r4, r3
 8010040:	e7f3      	b.n	801002a <__assert_func+0x12>
 8010042:	bf00      	nop
 8010044:	20000064 	.word	0x20000064
 8010048:	08014bbd 	.word	0x08014bbd
 801004c:	08014bca 	.word	0x08014bca
 8010050:	08014bf8 	.word	0x08014bf8

08010054 <_close_r>:
 8010054:	b538      	push	{r3, r4, r5, lr}
 8010056:	4d06      	ldr	r5, [pc, #24]	; (8010070 <_close_r+0x1c>)
 8010058:	2300      	movs	r3, #0
 801005a:	4604      	mov	r4, r0
 801005c:	4608      	mov	r0, r1
 801005e:	602b      	str	r3, [r5, #0]
 8010060:	f7f4 fb4b 	bl	80046fa <_close>
 8010064:	1c43      	adds	r3, r0, #1
 8010066:	d102      	bne.n	801006e <_close_r+0x1a>
 8010068:	682b      	ldr	r3, [r5, #0]
 801006a:	b103      	cbz	r3, 801006e <_close_r+0x1a>
 801006c:	6023      	str	r3, [r4, #0]
 801006e:	bd38      	pop	{r3, r4, r5, pc}
 8010070:	20000b64 	.word	0x20000b64

08010074 <fiprintf>:
 8010074:	b40e      	push	{r1, r2, r3}
 8010076:	b503      	push	{r0, r1, lr}
 8010078:	4601      	mov	r1, r0
 801007a:	ab03      	add	r3, sp, #12
 801007c:	4805      	ldr	r0, [pc, #20]	; (8010094 <fiprintf+0x20>)
 801007e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010082:	6800      	ldr	r0, [r0, #0]
 8010084:	9301      	str	r3, [sp, #4]
 8010086:	f7ff fe0b 	bl	800fca0 <_vfiprintf_r>
 801008a:	b002      	add	sp, #8
 801008c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010090:	b003      	add	sp, #12
 8010092:	4770      	bx	lr
 8010094:	20000064 	.word	0x20000064

08010098 <_fstat_r>:
 8010098:	b538      	push	{r3, r4, r5, lr}
 801009a:	4d07      	ldr	r5, [pc, #28]	; (80100b8 <_fstat_r+0x20>)
 801009c:	2300      	movs	r3, #0
 801009e:	4604      	mov	r4, r0
 80100a0:	4608      	mov	r0, r1
 80100a2:	4611      	mov	r1, r2
 80100a4:	602b      	str	r3, [r5, #0]
 80100a6:	f7f4 fb34 	bl	8004712 <_fstat>
 80100aa:	1c43      	adds	r3, r0, #1
 80100ac:	d102      	bne.n	80100b4 <_fstat_r+0x1c>
 80100ae:	682b      	ldr	r3, [r5, #0]
 80100b0:	b103      	cbz	r3, 80100b4 <_fstat_r+0x1c>
 80100b2:	6023      	str	r3, [r4, #0]
 80100b4:	bd38      	pop	{r3, r4, r5, pc}
 80100b6:	bf00      	nop
 80100b8:	20000b64 	.word	0x20000b64

080100bc <_isatty_r>:
 80100bc:	b538      	push	{r3, r4, r5, lr}
 80100be:	4d06      	ldr	r5, [pc, #24]	; (80100d8 <_isatty_r+0x1c>)
 80100c0:	2300      	movs	r3, #0
 80100c2:	4604      	mov	r4, r0
 80100c4:	4608      	mov	r0, r1
 80100c6:	602b      	str	r3, [r5, #0]
 80100c8:	f7f4 fb33 	bl	8004732 <_isatty>
 80100cc:	1c43      	adds	r3, r0, #1
 80100ce:	d102      	bne.n	80100d6 <_isatty_r+0x1a>
 80100d0:	682b      	ldr	r3, [r5, #0]
 80100d2:	b103      	cbz	r3, 80100d6 <_isatty_r+0x1a>
 80100d4:	6023      	str	r3, [r4, #0]
 80100d6:	bd38      	pop	{r3, r4, r5, pc}
 80100d8:	20000b64 	.word	0x20000b64

080100dc <_lseek_r>:
 80100dc:	b538      	push	{r3, r4, r5, lr}
 80100de:	4d07      	ldr	r5, [pc, #28]	; (80100fc <_lseek_r+0x20>)
 80100e0:	4604      	mov	r4, r0
 80100e2:	4608      	mov	r0, r1
 80100e4:	4611      	mov	r1, r2
 80100e6:	2200      	movs	r2, #0
 80100e8:	602a      	str	r2, [r5, #0]
 80100ea:	461a      	mov	r2, r3
 80100ec:	f7f4 fb2c 	bl	8004748 <_lseek>
 80100f0:	1c43      	adds	r3, r0, #1
 80100f2:	d102      	bne.n	80100fa <_lseek_r+0x1e>
 80100f4:	682b      	ldr	r3, [r5, #0]
 80100f6:	b103      	cbz	r3, 80100fa <_lseek_r+0x1e>
 80100f8:	6023      	str	r3, [r4, #0]
 80100fa:	bd38      	pop	{r3, r4, r5, pc}
 80100fc:	20000b64 	.word	0x20000b64

08010100 <memmove>:
 8010100:	4288      	cmp	r0, r1
 8010102:	b510      	push	{r4, lr}
 8010104:	eb01 0402 	add.w	r4, r1, r2
 8010108:	d902      	bls.n	8010110 <memmove+0x10>
 801010a:	4284      	cmp	r4, r0
 801010c:	4623      	mov	r3, r4
 801010e:	d807      	bhi.n	8010120 <memmove+0x20>
 8010110:	1e43      	subs	r3, r0, #1
 8010112:	42a1      	cmp	r1, r4
 8010114:	d008      	beq.n	8010128 <memmove+0x28>
 8010116:	f811 2b01 	ldrb.w	r2, [r1], #1
 801011a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801011e:	e7f8      	b.n	8010112 <memmove+0x12>
 8010120:	4402      	add	r2, r0
 8010122:	4601      	mov	r1, r0
 8010124:	428a      	cmp	r2, r1
 8010126:	d100      	bne.n	801012a <memmove+0x2a>
 8010128:	bd10      	pop	{r4, pc}
 801012a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801012e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010132:	e7f7      	b.n	8010124 <memmove+0x24>

08010134 <__malloc_lock>:
 8010134:	4801      	ldr	r0, [pc, #4]	; (801013c <__malloc_lock+0x8>)
 8010136:	f7fe be2a 	b.w	800ed8e <__retarget_lock_acquire_recursive>
 801013a:	bf00      	nop
 801013c:	20000b5e 	.word	0x20000b5e

08010140 <__malloc_unlock>:
 8010140:	4801      	ldr	r0, [pc, #4]	; (8010148 <__malloc_unlock+0x8>)
 8010142:	f7fe be25 	b.w	800ed90 <__retarget_lock_release_recursive>
 8010146:	bf00      	nop
 8010148:	20000b5e 	.word	0x20000b5e

0801014c <_realloc_r>:
 801014c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801014e:	4607      	mov	r7, r0
 8010150:	4614      	mov	r4, r2
 8010152:	460e      	mov	r6, r1
 8010154:	b921      	cbnz	r1, 8010160 <_realloc_r+0x14>
 8010156:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801015a:	4611      	mov	r1, r2
 801015c:	f7ff bbc0 	b.w	800f8e0 <_malloc_r>
 8010160:	b922      	cbnz	r2, 801016c <_realloc_r+0x20>
 8010162:	f7ff fb6d 	bl	800f840 <_free_r>
 8010166:	4625      	mov	r5, r4
 8010168:	4628      	mov	r0, r5
 801016a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801016c:	f000 f82d 	bl	80101ca <_malloc_usable_size_r>
 8010170:	42a0      	cmp	r0, r4
 8010172:	d20f      	bcs.n	8010194 <_realloc_r+0x48>
 8010174:	4621      	mov	r1, r4
 8010176:	4638      	mov	r0, r7
 8010178:	f7ff fbb2 	bl	800f8e0 <_malloc_r>
 801017c:	4605      	mov	r5, r0
 801017e:	2800      	cmp	r0, #0
 8010180:	d0f2      	beq.n	8010168 <_realloc_r+0x1c>
 8010182:	4631      	mov	r1, r6
 8010184:	4622      	mov	r2, r4
 8010186:	f7fe fe83 	bl	800ee90 <memcpy>
 801018a:	4631      	mov	r1, r6
 801018c:	4638      	mov	r0, r7
 801018e:	f7ff fb57 	bl	800f840 <_free_r>
 8010192:	e7e9      	b.n	8010168 <_realloc_r+0x1c>
 8010194:	4635      	mov	r5, r6
 8010196:	e7e7      	b.n	8010168 <_realloc_r+0x1c>

08010198 <_read_r>:
 8010198:	b538      	push	{r3, r4, r5, lr}
 801019a:	4d07      	ldr	r5, [pc, #28]	; (80101b8 <_read_r+0x20>)
 801019c:	4604      	mov	r4, r0
 801019e:	4608      	mov	r0, r1
 80101a0:	4611      	mov	r1, r2
 80101a2:	2200      	movs	r2, #0
 80101a4:	602a      	str	r2, [r5, #0]
 80101a6:	461a      	mov	r2, r3
 80101a8:	f7f4 fa6e 	bl	8004688 <_read>
 80101ac:	1c43      	adds	r3, r0, #1
 80101ae:	d102      	bne.n	80101b6 <_read_r+0x1e>
 80101b0:	682b      	ldr	r3, [r5, #0]
 80101b2:	b103      	cbz	r3, 80101b6 <_read_r+0x1e>
 80101b4:	6023      	str	r3, [r4, #0]
 80101b6:	bd38      	pop	{r3, r4, r5, pc}
 80101b8:	20000b64 	.word	0x20000b64

080101bc <abort>:
 80101bc:	b508      	push	{r3, lr}
 80101be:	2006      	movs	r0, #6
 80101c0:	f000 f834 	bl	801022c <raise>
 80101c4:	2001      	movs	r0, #1
 80101c6:	f7f4 fa55 	bl	8004674 <_exit>

080101ca <_malloc_usable_size_r>:
 80101ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80101ce:	1f18      	subs	r0, r3, #4
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	bfbc      	itt	lt
 80101d4:	580b      	ldrlt	r3, [r1, r0]
 80101d6:	18c0      	addlt	r0, r0, r3
 80101d8:	4770      	bx	lr

080101da <_raise_r>:
 80101da:	291f      	cmp	r1, #31
 80101dc:	b538      	push	{r3, r4, r5, lr}
 80101de:	4604      	mov	r4, r0
 80101e0:	460d      	mov	r5, r1
 80101e2:	d904      	bls.n	80101ee <_raise_r+0x14>
 80101e4:	2316      	movs	r3, #22
 80101e6:	6003      	str	r3, [r0, #0]
 80101e8:	f04f 30ff 	mov.w	r0, #4294967295
 80101ec:	bd38      	pop	{r3, r4, r5, pc}
 80101ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80101f0:	b112      	cbz	r2, 80101f8 <_raise_r+0x1e>
 80101f2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80101f6:	b94b      	cbnz	r3, 801020c <_raise_r+0x32>
 80101f8:	4620      	mov	r0, r4
 80101fa:	f000 f831 	bl	8010260 <_getpid_r>
 80101fe:	462a      	mov	r2, r5
 8010200:	4601      	mov	r1, r0
 8010202:	4620      	mov	r0, r4
 8010204:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010208:	f000 b818 	b.w	801023c <_kill_r>
 801020c:	2b01      	cmp	r3, #1
 801020e:	d00a      	beq.n	8010226 <_raise_r+0x4c>
 8010210:	1c59      	adds	r1, r3, #1
 8010212:	d103      	bne.n	801021c <_raise_r+0x42>
 8010214:	2316      	movs	r3, #22
 8010216:	6003      	str	r3, [r0, #0]
 8010218:	2001      	movs	r0, #1
 801021a:	e7e7      	b.n	80101ec <_raise_r+0x12>
 801021c:	2400      	movs	r4, #0
 801021e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010222:	4628      	mov	r0, r5
 8010224:	4798      	blx	r3
 8010226:	2000      	movs	r0, #0
 8010228:	e7e0      	b.n	80101ec <_raise_r+0x12>
	...

0801022c <raise>:
 801022c:	4b02      	ldr	r3, [pc, #8]	; (8010238 <raise+0xc>)
 801022e:	4601      	mov	r1, r0
 8010230:	6818      	ldr	r0, [r3, #0]
 8010232:	f7ff bfd2 	b.w	80101da <_raise_r>
 8010236:	bf00      	nop
 8010238:	20000064 	.word	0x20000064

0801023c <_kill_r>:
 801023c:	b538      	push	{r3, r4, r5, lr}
 801023e:	4d07      	ldr	r5, [pc, #28]	; (801025c <_kill_r+0x20>)
 8010240:	2300      	movs	r3, #0
 8010242:	4604      	mov	r4, r0
 8010244:	4608      	mov	r0, r1
 8010246:	4611      	mov	r1, r2
 8010248:	602b      	str	r3, [r5, #0]
 801024a:	f7f4 fa03 	bl	8004654 <_kill>
 801024e:	1c43      	adds	r3, r0, #1
 8010250:	d102      	bne.n	8010258 <_kill_r+0x1c>
 8010252:	682b      	ldr	r3, [r5, #0]
 8010254:	b103      	cbz	r3, 8010258 <_kill_r+0x1c>
 8010256:	6023      	str	r3, [r4, #0]
 8010258:	bd38      	pop	{r3, r4, r5, pc}
 801025a:	bf00      	nop
 801025c:	20000b64 	.word	0x20000b64

08010260 <_getpid_r>:
 8010260:	f7f4 b9f0 	b.w	8004644 <_getpid>

08010264 <atan2>:
 8010264:	f000 b800 	b.w	8010268 <__ieee754_atan2>

08010268 <__ieee754_atan2>:
 8010268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801026c:	ec57 6b11 	vmov	r6, r7, d1
 8010270:	4273      	negs	r3, r6
 8010272:	f8df e184 	ldr.w	lr, [pc, #388]	; 80103f8 <__ieee754_atan2+0x190>
 8010276:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801027a:	4333      	orrs	r3, r6
 801027c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8010280:	4573      	cmp	r3, lr
 8010282:	ec51 0b10 	vmov	r0, r1, d0
 8010286:	ee11 8a10 	vmov	r8, s2
 801028a:	d80a      	bhi.n	80102a2 <__ieee754_atan2+0x3a>
 801028c:	4244      	negs	r4, r0
 801028e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010292:	4304      	orrs	r4, r0
 8010294:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8010298:	4574      	cmp	r4, lr
 801029a:	ee10 9a10 	vmov	r9, s0
 801029e:	468c      	mov	ip, r1
 80102a0:	d907      	bls.n	80102b2 <__ieee754_atan2+0x4a>
 80102a2:	4632      	mov	r2, r6
 80102a4:	463b      	mov	r3, r7
 80102a6:	f7f0 f801 	bl	80002ac <__adddf3>
 80102aa:	ec41 0b10 	vmov	d0, r0, r1
 80102ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102b2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80102b6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80102ba:	4334      	orrs	r4, r6
 80102bc:	d103      	bne.n	80102c6 <__ieee754_atan2+0x5e>
 80102be:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80102c2:	f000 b89d 	b.w	8010400 <atan>
 80102c6:	17bc      	asrs	r4, r7, #30
 80102c8:	f004 0402 	and.w	r4, r4, #2
 80102cc:	ea53 0909 	orrs.w	r9, r3, r9
 80102d0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80102d4:	d107      	bne.n	80102e6 <__ieee754_atan2+0x7e>
 80102d6:	2c02      	cmp	r4, #2
 80102d8:	d060      	beq.n	801039c <__ieee754_atan2+0x134>
 80102da:	2c03      	cmp	r4, #3
 80102dc:	d1e5      	bne.n	80102aa <__ieee754_atan2+0x42>
 80102de:	a142      	add	r1, pc, #264	; (adr r1, 80103e8 <__ieee754_atan2+0x180>)
 80102e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102e4:	e7e1      	b.n	80102aa <__ieee754_atan2+0x42>
 80102e6:	ea52 0808 	orrs.w	r8, r2, r8
 80102ea:	d106      	bne.n	80102fa <__ieee754_atan2+0x92>
 80102ec:	f1bc 0f00 	cmp.w	ip, #0
 80102f0:	da5f      	bge.n	80103b2 <__ieee754_atan2+0x14a>
 80102f2:	a13f      	add	r1, pc, #252	; (adr r1, 80103f0 <__ieee754_atan2+0x188>)
 80102f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80102f8:	e7d7      	b.n	80102aa <__ieee754_atan2+0x42>
 80102fa:	4572      	cmp	r2, lr
 80102fc:	d10f      	bne.n	801031e <__ieee754_atan2+0xb6>
 80102fe:	4293      	cmp	r3, r2
 8010300:	f104 34ff 	add.w	r4, r4, #4294967295
 8010304:	d107      	bne.n	8010316 <__ieee754_atan2+0xae>
 8010306:	2c02      	cmp	r4, #2
 8010308:	d84c      	bhi.n	80103a4 <__ieee754_atan2+0x13c>
 801030a:	4b35      	ldr	r3, [pc, #212]	; (80103e0 <__ieee754_atan2+0x178>)
 801030c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8010310:	e9d4 0100 	ldrd	r0, r1, [r4]
 8010314:	e7c9      	b.n	80102aa <__ieee754_atan2+0x42>
 8010316:	2c02      	cmp	r4, #2
 8010318:	d848      	bhi.n	80103ac <__ieee754_atan2+0x144>
 801031a:	4b32      	ldr	r3, [pc, #200]	; (80103e4 <__ieee754_atan2+0x17c>)
 801031c:	e7f6      	b.n	801030c <__ieee754_atan2+0xa4>
 801031e:	4573      	cmp	r3, lr
 8010320:	d0e4      	beq.n	80102ec <__ieee754_atan2+0x84>
 8010322:	1a9b      	subs	r3, r3, r2
 8010324:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8010328:	ea4f 5223 	mov.w	r2, r3, asr #20
 801032c:	da1e      	bge.n	801036c <__ieee754_atan2+0x104>
 801032e:	2f00      	cmp	r7, #0
 8010330:	da01      	bge.n	8010336 <__ieee754_atan2+0xce>
 8010332:	323c      	adds	r2, #60	; 0x3c
 8010334:	db1e      	blt.n	8010374 <__ieee754_atan2+0x10c>
 8010336:	4632      	mov	r2, r6
 8010338:	463b      	mov	r3, r7
 801033a:	f7f0 fa97 	bl	800086c <__aeabi_ddiv>
 801033e:	ec41 0b10 	vmov	d0, r0, r1
 8010342:	f000 f9fd 	bl	8010740 <fabs>
 8010346:	f000 f85b 	bl	8010400 <atan>
 801034a:	ec51 0b10 	vmov	r0, r1, d0
 801034e:	2c01      	cmp	r4, #1
 8010350:	d013      	beq.n	801037a <__ieee754_atan2+0x112>
 8010352:	2c02      	cmp	r4, #2
 8010354:	d015      	beq.n	8010382 <__ieee754_atan2+0x11a>
 8010356:	2c00      	cmp	r4, #0
 8010358:	d0a7      	beq.n	80102aa <__ieee754_atan2+0x42>
 801035a:	a319      	add	r3, pc, #100	; (adr r3, 80103c0 <__ieee754_atan2+0x158>)
 801035c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010360:	f7ef ffa2 	bl	80002a8 <__aeabi_dsub>
 8010364:	a318      	add	r3, pc, #96	; (adr r3, 80103c8 <__ieee754_atan2+0x160>)
 8010366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801036a:	e014      	b.n	8010396 <__ieee754_atan2+0x12e>
 801036c:	a118      	add	r1, pc, #96	; (adr r1, 80103d0 <__ieee754_atan2+0x168>)
 801036e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010372:	e7ec      	b.n	801034e <__ieee754_atan2+0xe6>
 8010374:	2000      	movs	r0, #0
 8010376:	2100      	movs	r1, #0
 8010378:	e7e9      	b.n	801034e <__ieee754_atan2+0xe6>
 801037a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801037e:	4619      	mov	r1, r3
 8010380:	e793      	b.n	80102aa <__ieee754_atan2+0x42>
 8010382:	a30f      	add	r3, pc, #60	; (adr r3, 80103c0 <__ieee754_atan2+0x158>)
 8010384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010388:	f7ef ff8e 	bl	80002a8 <__aeabi_dsub>
 801038c:	4602      	mov	r2, r0
 801038e:	460b      	mov	r3, r1
 8010390:	a10d      	add	r1, pc, #52	; (adr r1, 80103c8 <__ieee754_atan2+0x160>)
 8010392:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010396:	f7ef ff87 	bl	80002a8 <__aeabi_dsub>
 801039a:	e786      	b.n	80102aa <__ieee754_atan2+0x42>
 801039c:	a10a      	add	r1, pc, #40	; (adr r1, 80103c8 <__ieee754_atan2+0x160>)
 801039e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103a2:	e782      	b.n	80102aa <__ieee754_atan2+0x42>
 80103a4:	a10c      	add	r1, pc, #48	; (adr r1, 80103d8 <__ieee754_atan2+0x170>)
 80103a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103aa:	e77e      	b.n	80102aa <__ieee754_atan2+0x42>
 80103ac:	2000      	movs	r0, #0
 80103ae:	2100      	movs	r1, #0
 80103b0:	e77b      	b.n	80102aa <__ieee754_atan2+0x42>
 80103b2:	a107      	add	r1, pc, #28	; (adr r1, 80103d0 <__ieee754_atan2+0x168>)
 80103b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80103b8:	e777      	b.n	80102aa <__ieee754_atan2+0x42>
 80103ba:	bf00      	nop
 80103bc:	f3af 8000 	nop.w
 80103c0:	33145c07 	.word	0x33145c07
 80103c4:	3ca1a626 	.word	0x3ca1a626
 80103c8:	54442d18 	.word	0x54442d18
 80103cc:	400921fb 	.word	0x400921fb
 80103d0:	54442d18 	.word	0x54442d18
 80103d4:	3ff921fb 	.word	0x3ff921fb
 80103d8:	54442d18 	.word	0x54442d18
 80103dc:	3fe921fb 	.word	0x3fe921fb
 80103e0:	08014c00 	.word	0x08014c00
 80103e4:	08014c18 	.word	0x08014c18
 80103e8:	54442d18 	.word	0x54442d18
 80103ec:	c00921fb 	.word	0xc00921fb
 80103f0:	54442d18 	.word	0x54442d18
 80103f4:	bff921fb 	.word	0xbff921fb
 80103f8:	7ff00000 	.word	0x7ff00000
 80103fc:	00000000 	.word	0x00000000

08010400 <atan>:
 8010400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010404:	ec55 4b10 	vmov	r4, r5, d0
 8010408:	4bc3      	ldr	r3, [pc, #780]	; (8010718 <atan+0x318>)
 801040a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801040e:	429e      	cmp	r6, r3
 8010410:	46ab      	mov	fp, r5
 8010412:	dd18      	ble.n	8010446 <atan+0x46>
 8010414:	4bc1      	ldr	r3, [pc, #772]	; (801071c <atan+0x31c>)
 8010416:	429e      	cmp	r6, r3
 8010418:	dc01      	bgt.n	801041e <atan+0x1e>
 801041a:	d109      	bne.n	8010430 <atan+0x30>
 801041c:	b144      	cbz	r4, 8010430 <atan+0x30>
 801041e:	4622      	mov	r2, r4
 8010420:	462b      	mov	r3, r5
 8010422:	4620      	mov	r0, r4
 8010424:	4629      	mov	r1, r5
 8010426:	f7ef ff41 	bl	80002ac <__adddf3>
 801042a:	4604      	mov	r4, r0
 801042c:	460d      	mov	r5, r1
 801042e:	e006      	b.n	801043e <atan+0x3e>
 8010430:	f1bb 0f00 	cmp.w	fp, #0
 8010434:	f300 8131 	bgt.w	801069a <atan+0x29a>
 8010438:	a59b      	add	r5, pc, #620	; (adr r5, 80106a8 <atan+0x2a8>)
 801043a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801043e:	ec45 4b10 	vmov	d0, r4, r5
 8010442:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010446:	4bb6      	ldr	r3, [pc, #728]	; (8010720 <atan+0x320>)
 8010448:	429e      	cmp	r6, r3
 801044a:	dc14      	bgt.n	8010476 <atan+0x76>
 801044c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8010450:	429e      	cmp	r6, r3
 8010452:	dc0d      	bgt.n	8010470 <atan+0x70>
 8010454:	a396      	add	r3, pc, #600	; (adr r3, 80106b0 <atan+0x2b0>)
 8010456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801045a:	ee10 0a10 	vmov	r0, s0
 801045e:	4629      	mov	r1, r5
 8010460:	f7ef ff24 	bl	80002ac <__adddf3>
 8010464:	4baf      	ldr	r3, [pc, #700]	; (8010724 <atan+0x324>)
 8010466:	2200      	movs	r2, #0
 8010468:	f7f0 fb66 	bl	8000b38 <__aeabi_dcmpgt>
 801046c:	2800      	cmp	r0, #0
 801046e:	d1e6      	bne.n	801043e <atan+0x3e>
 8010470:	f04f 3aff 	mov.w	sl, #4294967295
 8010474:	e02b      	b.n	80104ce <atan+0xce>
 8010476:	f000 f963 	bl	8010740 <fabs>
 801047a:	4bab      	ldr	r3, [pc, #684]	; (8010728 <atan+0x328>)
 801047c:	429e      	cmp	r6, r3
 801047e:	ec55 4b10 	vmov	r4, r5, d0
 8010482:	f300 80bf 	bgt.w	8010604 <atan+0x204>
 8010486:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801048a:	429e      	cmp	r6, r3
 801048c:	f300 80a0 	bgt.w	80105d0 <atan+0x1d0>
 8010490:	ee10 2a10 	vmov	r2, s0
 8010494:	ee10 0a10 	vmov	r0, s0
 8010498:	462b      	mov	r3, r5
 801049a:	4629      	mov	r1, r5
 801049c:	f7ef ff06 	bl	80002ac <__adddf3>
 80104a0:	4ba0      	ldr	r3, [pc, #640]	; (8010724 <atan+0x324>)
 80104a2:	2200      	movs	r2, #0
 80104a4:	f7ef ff00 	bl	80002a8 <__aeabi_dsub>
 80104a8:	2200      	movs	r2, #0
 80104aa:	4606      	mov	r6, r0
 80104ac:	460f      	mov	r7, r1
 80104ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80104b2:	4620      	mov	r0, r4
 80104b4:	4629      	mov	r1, r5
 80104b6:	f7ef fef9 	bl	80002ac <__adddf3>
 80104ba:	4602      	mov	r2, r0
 80104bc:	460b      	mov	r3, r1
 80104be:	4630      	mov	r0, r6
 80104c0:	4639      	mov	r1, r7
 80104c2:	f7f0 f9d3 	bl	800086c <__aeabi_ddiv>
 80104c6:	f04f 0a00 	mov.w	sl, #0
 80104ca:	4604      	mov	r4, r0
 80104cc:	460d      	mov	r5, r1
 80104ce:	4622      	mov	r2, r4
 80104d0:	462b      	mov	r3, r5
 80104d2:	4620      	mov	r0, r4
 80104d4:	4629      	mov	r1, r5
 80104d6:	f7f0 f89f 	bl	8000618 <__aeabi_dmul>
 80104da:	4602      	mov	r2, r0
 80104dc:	460b      	mov	r3, r1
 80104de:	4680      	mov	r8, r0
 80104e0:	4689      	mov	r9, r1
 80104e2:	f7f0 f899 	bl	8000618 <__aeabi_dmul>
 80104e6:	a374      	add	r3, pc, #464	; (adr r3, 80106b8 <atan+0x2b8>)
 80104e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ec:	4606      	mov	r6, r0
 80104ee:	460f      	mov	r7, r1
 80104f0:	f7f0 f892 	bl	8000618 <__aeabi_dmul>
 80104f4:	a372      	add	r3, pc, #456	; (adr r3, 80106c0 <atan+0x2c0>)
 80104f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104fa:	f7ef fed7 	bl	80002ac <__adddf3>
 80104fe:	4632      	mov	r2, r6
 8010500:	463b      	mov	r3, r7
 8010502:	f7f0 f889 	bl	8000618 <__aeabi_dmul>
 8010506:	a370      	add	r3, pc, #448	; (adr r3, 80106c8 <atan+0x2c8>)
 8010508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801050c:	f7ef fece 	bl	80002ac <__adddf3>
 8010510:	4632      	mov	r2, r6
 8010512:	463b      	mov	r3, r7
 8010514:	f7f0 f880 	bl	8000618 <__aeabi_dmul>
 8010518:	a36d      	add	r3, pc, #436	; (adr r3, 80106d0 <atan+0x2d0>)
 801051a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051e:	f7ef fec5 	bl	80002ac <__adddf3>
 8010522:	4632      	mov	r2, r6
 8010524:	463b      	mov	r3, r7
 8010526:	f7f0 f877 	bl	8000618 <__aeabi_dmul>
 801052a:	a36b      	add	r3, pc, #428	; (adr r3, 80106d8 <atan+0x2d8>)
 801052c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010530:	f7ef febc 	bl	80002ac <__adddf3>
 8010534:	4632      	mov	r2, r6
 8010536:	463b      	mov	r3, r7
 8010538:	f7f0 f86e 	bl	8000618 <__aeabi_dmul>
 801053c:	a368      	add	r3, pc, #416	; (adr r3, 80106e0 <atan+0x2e0>)
 801053e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010542:	f7ef feb3 	bl	80002ac <__adddf3>
 8010546:	4642      	mov	r2, r8
 8010548:	464b      	mov	r3, r9
 801054a:	f7f0 f865 	bl	8000618 <__aeabi_dmul>
 801054e:	a366      	add	r3, pc, #408	; (adr r3, 80106e8 <atan+0x2e8>)
 8010550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010554:	4680      	mov	r8, r0
 8010556:	4689      	mov	r9, r1
 8010558:	4630      	mov	r0, r6
 801055a:	4639      	mov	r1, r7
 801055c:	f7f0 f85c 	bl	8000618 <__aeabi_dmul>
 8010560:	a363      	add	r3, pc, #396	; (adr r3, 80106f0 <atan+0x2f0>)
 8010562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010566:	f7ef fe9f 	bl	80002a8 <__aeabi_dsub>
 801056a:	4632      	mov	r2, r6
 801056c:	463b      	mov	r3, r7
 801056e:	f7f0 f853 	bl	8000618 <__aeabi_dmul>
 8010572:	a361      	add	r3, pc, #388	; (adr r3, 80106f8 <atan+0x2f8>)
 8010574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010578:	f7ef fe96 	bl	80002a8 <__aeabi_dsub>
 801057c:	4632      	mov	r2, r6
 801057e:	463b      	mov	r3, r7
 8010580:	f7f0 f84a 	bl	8000618 <__aeabi_dmul>
 8010584:	a35e      	add	r3, pc, #376	; (adr r3, 8010700 <atan+0x300>)
 8010586:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058a:	f7ef fe8d 	bl	80002a8 <__aeabi_dsub>
 801058e:	4632      	mov	r2, r6
 8010590:	463b      	mov	r3, r7
 8010592:	f7f0 f841 	bl	8000618 <__aeabi_dmul>
 8010596:	a35c      	add	r3, pc, #368	; (adr r3, 8010708 <atan+0x308>)
 8010598:	e9d3 2300 	ldrd	r2, r3, [r3]
 801059c:	f7ef fe84 	bl	80002a8 <__aeabi_dsub>
 80105a0:	4632      	mov	r2, r6
 80105a2:	463b      	mov	r3, r7
 80105a4:	f7f0 f838 	bl	8000618 <__aeabi_dmul>
 80105a8:	4602      	mov	r2, r0
 80105aa:	460b      	mov	r3, r1
 80105ac:	4640      	mov	r0, r8
 80105ae:	4649      	mov	r1, r9
 80105b0:	f7ef fe7c 	bl	80002ac <__adddf3>
 80105b4:	4622      	mov	r2, r4
 80105b6:	462b      	mov	r3, r5
 80105b8:	f7f0 f82e 	bl	8000618 <__aeabi_dmul>
 80105bc:	f1ba 3fff 	cmp.w	sl, #4294967295
 80105c0:	4602      	mov	r2, r0
 80105c2:	460b      	mov	r3, r1
 80105c4:	d14b      	bne.n	801065e <atan+0x25e>
 80105c6:	4620      	mov	r0, r4
 80105c8:	4629      	mov	r1, r5
 80105ca:	f7ef fe6d 	bl	80002a8 <__aeabi_dsub>
 80105ce:	e72c      	b.n	801042a <atan+0x2a>
 80105d0:	ee10 0a10 	vmov	r0, s0
 80105d4:	4b53      	ldr	r3, [pc, #332]	; (8010724 <atan+0x324>)
 80105d6:	2200      	movs	r2, #0
 80105d8:	4629      	mov	r1, r5
 80105da:	f7ef fe65 	bl	80002a8 <__aeabi_dsub>
 80105de:	4b51      	ldr	r3, [pc, #324]	; (8010724 <atan+0x324>)
 80105e0:	4606      	mov	r6, r0
 80105e2:	460f      	mov	r7, r1
 80105e4:	2200      	movs	r2, #0
 80105e6:	4620      	mov	r0, r4
 80105e8:	4629      	mov	r1, r5
 80105ea:	f7ef fe5f 	bl	80002ac <__adddf3>
 80105ee:	4602      	mov	r2, r0
 80105f0:	460b      	mov	r3, r1
 80105f2:	4630      	mov	r0, r6
 80105f4:	4639      	mov	r1, r7
 80105f6:	f7f0 f939 	bl	800086c <__aeabi_ddiv>
 80105fa:	f04f 0a01 	mov.w	sl, #1
 80105fe:	4604      	mov	r4, r0
 8010600:	460d      	mov	r5, r1
 8010602:	e764      	b.n	80104ce <atan+0xce>
 8010604:	4b49      	ldr	r3, [pc, #292]	; (801072c <atan+0x32c>)
 8010606:	429e      	cmp	r6, r3
 8010608:	da1d      	bge.n	8010646 <atan+0x246>
 801060a:	ee10 0a10 	vmov	r0, s0
 801060e:	4b48      	ldr	r3, [pc, #288]	; (8010730 <atan+0x330>)
 8010610:	2200      	movs	r2, #0
 8010612:	4629      	mov	r1, r5
 8010614:	f7ef fe48 	bl	80002a8 <__aeabi_dsub>
 8010618:	4b45      	ldr	r3, [pc, #276]	; (8010730 <atan+0x330>)
 801061a:	4606      	mov	r6, r0
 801061c:	460f      	mov	r7, r1
 801061e:	2200      	movs	r2, #0
 8010620:	4620      	mov	r0, r4
 8010622:	4629      	mov	r1, r5
 8010624:	f7ef fff8 	bl	8000618 <__aeabi_dmul>
 8010628:	4b3e      	ldr	r3, [pc, #248]	; (8010724 <atan+0x324>)
 801062a:	2200      	movs	r2, #0
 801062c:	f7ef fe3e 	bl	80002ac <__adddf3>
 8010630:	4602      	mov	r2, r0
 8010632:	460b      	mov	r3, r1
 8010634:	4630      	mov	r0, r6
 8010636:	4639      	mov	r1, r7
 8010638:	f7f0 f918 	bl	800086c <__aeabi_ddiv>
 801063c:	f04f 0a02 	mov.w	sl, #2
 8010640:	4604      	mov	r4, r0
 8010642:	460d      	mov	r5, r1
 8010644:	e743      	b.n	80104ce <atan+0xce>
 8010646:	462b      	mov	r3, r5
 8010648:	ee10 2a10 	vmov	r2, s0
 801064c:	4939      	ldr	r1, [pc, #228]	; (8010734 <atan+0x334>)
 801064e:	2000      	movs	r0, #0
 8010650:	f7f0 f90c 	bl	800086c <__aeabi_ddiv>
 8010654:	f04f 0a03 	mov.w	sl, #3
 8010658:	4604      	mov	r4, r0
 801065a:	460d      	mov	r5, r1
 801065c:	e737      	b.n	80104ce <atan+0xce>
 801065e:	4b36      	ldr	r3, [pc, #216]	; (8010738 <atan+0x338>)
 8010660:	4e36      	ldr	r6, [pc, #216]	; (801073c <atan+0x33c>)
 8010662:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8010666:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801066a:	e9da 2300 	ldrd	r2, r3, [sl]
 801066e:	f7ef fe1b 	bl	80002a8 <__aeabi_dsub>
 8010672:	4622      	mov	r2, r4
 8010674:	462b      	mov	r3, r5
 8010676:	f7ef fe17 	bl	80002a8 <__aeabi_dsub>
 801067a:	4602      	mov	r2, r0
 801067c:	460b      	mov	r3, r1
 801067e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8010682:	f7ef fe11 	bl	80002a8 <__aeabi_dsub>
 8010686:	f1bb 0f00 	cmp.w	fp, #0
 801068a:	4604      	mov	r4, r0
 801068c:	460d      	mov	r5, r1
 801068e:	f6bf aed6 	bge.w	801043e <atan+0x3e>
 8010692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010696:	461d      	mov	r5, r3
 8010698:	e6d1      	b.n	801043e <atan+0x3e>
 801069a:	a51d      	add	r5, pc, #116	; (adr r5, 8010710 <atan+0x310>)
 801069c:	e9d5 4500 	ldrd	r4, r5, [r5]
 80106a0:	e6cd      	b.n	801043e <atan+0x3e>
 80106a2:	bf00      	nop
 80106a4:	f3af 8000 	nop.w
 80106a8:	54442d18 	.word	0x54442d18
 80106ac:	bff921fb 	.word	0xbff921fb
 80106b0:	8800759c 	.word	0x8800759c
 80106b4:	7e37e43c 	.word	0x7e37e43c
 80106b8:	e322da11 	.word	0xe322da11
 80106bc:	3f90ad3a 	.word	0x3f90ad3a
 80106c0:	24760deb 	.word	0x24760deb
 80106c4:	3fa97b4b 	.word	0x3fa97b4b
 80106c8:	a0d03d51 	.word	0xa0d03d51
 80106cc:	3fb10d66 	.word	0x3fb10d66
 80106d0:	c54c206e 	.word	0xc54c206e
 80106d4:	3fb745cd 	.word	0x3fb745cd
 80106d8:	920083ff 	.word	0x920083ff
 80106dc:	3fc24924 	.word	0x3fc24924
 80106e0:	5555550d 	.word	0x5555550d
 80106e4:	3fd55555 	.word	0x3fd55555
 80106e8:	2c6a6c2f 	.word	0x2c6a6c2f
 80106ec:	bfa2b444 	.word	0xbfa2b444
 80106f0:	52defd9a 	.word	0x52defd9a
 80106f4:	3fadde2d 	.word	0x3fadde2d
 80106f8:	af749a6d 	.word	0xaf749a6d
 80106fc:	3fb3b0f2 	.word	0x3fb3b0f2
 8010700:	fe231671 	.word	0xfe231671
 8010704:	3fbc71c6 	.word	0x3fbc71c6
 8010708:	9998ebc4 	.word	0x9998ebc4
 801070c:	3fc99999 	.word	0x3fc99999
 8010710:	54442d18 	.word	0x54442d18
 8010714:	3ff921fb 	.word	0x3ff921fb
 8010718:	440fffff 	.word	0x440fffff
 801071c:	7ff00000 	.word	0x7ff00000
 8010720:	3fdbffff 	.word	0x3fdbffff
 8010724:	3ff00000 	.word	0x3ff00000
 8010728:	3ff2ffff 	.word	0x3ff2ffff
 801072c:	40038000 	.word	0x40038000
 8010730:	3ff80000 	.word	0x3ff80000
 8010734:	bff00000 	.word	0xbff00000
 8010738:	08014c50 	.word	0x08014c50
 801073c:	08014c30 	.word	0x08014c30

08010740 <fabs>:
 8010740:	ec51 0b10 	vmov	r0, r1, d0
 8010744:	ee10 2a10 	vmov	r2, s0
 8010748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801074c:	ec43 2b10 	vmov	d0, r2, r3
 8010750:	4770      	bx	lr
	...

08010754 <_init>:
 8010754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010756:	bf00      	nop
 8010758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801075a:	bc08      	pop	{r3}
 801075c:	469e      	mov	lr, r3
 801075e:	4770      	bx	lr

08010760 <_fini>:
 8010760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010762:	bf00      	nop
 8010764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010766:	bc08      	pop	{r3}
 8010768:	469e      	mov	lr, r3
 801076a:	4770      	bx	lr
